<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP中的基本概念</title>
    <url>/posts/253173a8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在学习AOP源码的过程中你会发现其中的类结构是非常复杂的，什么Advice、Advisor、Pointcut、PointJoint等等概念。如果你不搞清楚这些接口所具体代表的是什么内容，那么源码的阅读就会变得非常困难。但是网上对于这些概念性的东西的介绍又基本都没有，大多数文章都是从一开始就从源码开始介绍。这对于不了解这些概念的人来说是非常难以理解的，再看了一些文章之后自己终于对于这些概念有了一些认知，希望这篇文章能对于你学习AOP源码有一些帮助。</p>
<h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><h2 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h2><p>切面是通知和切点的结合，一个切面能够包含同一个类型的不同增强方法（一个切面可以包含多个Advice），切面是横切关注点的集成化，比如说事务处理和日志处理就代表了两个切面。Spring AOP就是负责执行切面的框架，他将切面中定义的横切逻辑组织到切面所指定的连接点中。你可以简单的认为：被@Aspect注解的类就是切面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class AspectJTest &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="目标对象（Target）"><a href="#目标对象（Target）" class="headerlink" title="目标对象（Target）"></a>目标对象（Target）</h2><p>目标对象是指要被增强的对象，或者说是被一个或多个切面所通知的对象。你可以简单的认为就是符合表达式中条件的对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Pointcut(&quot;execution(* *.say(..))&quot;)</span><br><span class="line">public void test()&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="连接点（JoinPoint）"><a href="#连接点（JoinPoint）" class="headerlink" title="连接点（JoinPoint）"></a>连接点（JoinPoint）</h2><p>连接点由两个信息确定：</p>
<ul>
<li>方法（表示程序的执行点，即目标方法）</li>
<li>相对点（表示方位，即目标方法的哪个位置）</li>
</ul>
<p>简单来说就是被拦截到的程序执行点，因为Spring只支持方法类型的连接点，所以在Spring中连接点就是被拦截到的方法的描述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@After(&quot;test()&quot;)</span><br><span class="line">public void after(JoinPoint joinPoint)&#123;</span><br><span class="line">    System.out.println(&quot;after test..&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="切入点（PointCut）"><a href="#切入点（PointCut）" class="headerlink" title="切入点（PointCut）"></a>切入点（PointCut）</h2><p>切入点是对连接点进行拦截的条件定义，简单来讲通过切入点你可以知道哪些类中的哪些方法需要添加通知。</p>
<h2 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h2><p>你可以理解为通知是对被代理方法前后需要执行的描述，是指拦截到连接点之后要执行的代码的描述，一个切面中可以有多个通知。Spring AOP框架通过拦截器实现了通知模型，维护了一个已连接点为中心的拦截器链。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Before(&quot;test()&quot;)</span><br><span class="line">public void before(JoinPoint joinPoint)&#123;</span><br><span class="line">    System.out.println(&quot;before test..&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面就代表了一个前置通知。</p>
<h2 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h2><p>织入是将切面和业务逻辑对象连接起来, 并创建通知代理的过程。织入可以在编译时，类加载时和运行时完成。在编译时进行织入就是静态代理，而在运行时进行织入则是动态代理。</p>
<h2 id="增强器（Advisor）"><a href="#增强器（Advisor）" class="headerlink" title="增强器（Advisor）"></a>增强器（Advisor）</h2><p>Advisor是切面的另一种实现，能够将通知以更为复杂的方式植入到目标对象中，是将通知包装为更复杂切面装配器。Advisor由PointCut和Advice组成，通过Advisor可以自动完成切面的装配工作。简单来说就是可以通过PointCut来决定哪些目标对象中的方法需要添加Advice.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过一句话将上面的这些概念联系起来：Aspect中定义了Advice和PointCut。Advisor可以通过PointCut来确定哪些方法需要添加Advice。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之aop:aspectj-autoproxy标签</title>
    <url>/posts/185f54c8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>AOP和IOC是Spring的两大基石，aop原理系列文章我们将透过源码来解析aop的底层原理。使用过Spring aop的都知道，当我们要使用aop的时候只需要在配置文件中加上<code>&lt;aop:aspectj-autoproxy/&gt;</code>这个标签和定义好切面，我们就能使用aop这个功能了。通过前面的文章你可能已经知道了aop的底层其实是通过JDK的动态代理和CGLIB的动态代理实现的，那么为什么我们只需要在配置文件中定义一个如下的标签我们就能使用aop了呢？Spring是在什么时候为我们生成代理类的呢？本篇文章将通过源码直击本质！</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>在本系列文章的讲解中，我们所使用的测试代码都是同一代码，所以在后面的文章中就不贴出示例代码了。</p>
<h2 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Person &#123;</span><br><span class="line">    void say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student implements Person &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(&quot;这是一个苦逼程序员&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class AspectJTest &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* *.say(..))&quot;)</span><br><span class="line">    public void test()&#123;&#125;</span><br><span class="line">    @Before(&quot;test()&quot;)</span><br><span class="line">    public void before(JoinPoint joinPoint)&#123;</span><br><span class="line">        System.out.println(&quot;before test..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;test()&quot;)</span><br><span class="line">    public void after(JoinPoint joinPoint)&#123;</span><br><span class="line">        System.out.println(&quot;after test..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;test()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint p)&#123;</span><br><span class="line">        System.out.println(&quot;before1&quot;);</span><br><span class="line">        Object o &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            o &#x3D; p.proceed();</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;after1&quot;);</span><br><span class="line">        return o;</span><br><span class="line">    &#125;</span><br><span class="line">    public void test1()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        Person bean2 &#x3D; (Person)ac.getBean(&quot;student&quot;);</span><br><span class="line">        bean2.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:aspectj-autoproxy&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.pcy.service.impl.Student&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;com.pcy.AspectJTest&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>运行以下上面的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br><span class="line">after test..</span><br><span class="line">after1</span><br></pre></td></tr></table></figure>
<p>可以发现Spring确实为我们的类实现了代理的功能，那么当我们加入<code>&lt;aop:aspectj-autoproxy/&gt;</code>这个标签时，Spring为我们做了些什么呢？</p>
<h2 id="Spring自定义标签的解析"><a href="#Spring自定义标签的解析" class="headerlink" title="Spring自定义标签的解析"></a>Spring自定义标签的解析</h2><p>在Spring中，将标签的解析分为了标准标签解析和自定义标签解析，<code>&lt;aop:aspectj-autoproxy/&gt;</code>就属于自定义标签。Spring在<code>BeanDefinitionParserDelegate#parseCustomElement()</code>方法中完成了对自定义标签的解析，那么我们直接在该方法内打上断点并进入debug模式。<img src="/posts/185f54c8/1.png"><br>在该方法中首先时获取该自定义标签所对应的命名空间处理器，通过debug我们知道了<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签的处理器为<code>AopNamespaceHandler</code>类，之后通过该处理器来解析该标签。我们debug进入parse方法<img src="/posts/185f54c8/2.png"><br>在该方法中为<code>&lt;aop:aspectj-autoproxy/&gt;</code>获取该标签所定义的BeanDefinitionParser，通过debug信息我们可以得知：<code>&lt;aop:aspectj-autoproxy/&gt;</code>的BeanDefinitionParser为<code>AspectJAutoProxyBeanDefinitionParser</code>。我们进入该类的<code>parse</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">	&#x2F;&#x2F;注册proxy creator</span><br><span class="line">	&#x2F;&#x2F;将AnnotationAwareAspectJAutoProxyCreator注册到spring容器中</span><br><span class="line">	AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">	extendBeanDefinition(element, parserContext);</span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中做了非常重要的一件事：将AnnotationAwareAspectJAutoProxyCreator注册到spring容器中。我们可以看下这个类的结构<img src="/posts/185f54c8/3.png"><br>可以看到该类实现了InstantiationAwareBeanPostProcessor接口，该接口中有四个非常重要的方法：</p>
<ul>
<li>postProcessBeforeInstantiation</li>
<li>postProcessAfterInstantiation</li>
<li>postProcessBeforeInitialization</li>
<li>postProcessAfterInitialization</li>
</ul>
<p>这四个方法非常的重要，在bean的生命周期中会去调用这几个方法。代理类的生成就是在<code>postProcessAfterInitialization</code>方法中进行的，Advisor的加载就是在<code>postProcessBeforeInstantiation</code>方法中实现的。那么我们将在后面的文章中详细讲解这几个方法中Spring所干的工作。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇文章中，主要讲解了当添加了<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签之后，Spring为我们使用aop功能做了哪些准备工作以及为代理类的生成提供了哪些支持？Advisor的加载是在哪里进行的。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之Advisor的加载</title>
    <url>/posts/8a3989cc/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>通过前面文章的讲解我们知道Spring通过Advisor来决定哪些Advice需要添加到相应的连接点，在Spring中在进行第一个单例bean创建之前会去初始化需要使用的Advisor。</p>
<h1 id="源码讲解"><a href="#源码讲解" class="headerlink" title="源码讲解"></a>源码讲解</h1><p>在上面我们已经讲过了在bean创建之前会去构建所使用的Advisor，那么我们直接在<code>AbstrractAutowireCapableBeanFactory#createBean()</code>方法中打上断点，并以debug方式运行程序。在该方法中Advisor的加载就是在下面这行代码中进行的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object bean &#x3D; resolveBeforeInstantiation(beanName, mbdToUse);</span><br></pre></td></tr></table></figure>
<p>进入此方法<img src="/posts/8a3989cc/1.png"><br>在该方法中会去执行<code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation()</code>方法，在上篇文章提到过Advisor的加载就是在此方法中进行的。我们接着往下debug，发现并没有进入该if语句。通过debug可以发现<br><img src="/posts/8a3989cc/2.png"><br>没进入的原因就是此时容器中还没有InstantiationAwareBeanPostProcessors，最后通过调用栈发现现在还只是在进行BeanPostProcessor的注册流程<img src="/posts/8a3989cc/3.png"><br>此时容器中还没有InstantiationAwareBeanPostProcessors，这也就不会进入该if语句了。我们再次运行到该方法中<img src="/posts/8a3989cc/4.png"><br>这是会发现此时if中的值是为true的，所以我们直接进入<code>applyBeanPostProcessorsBeforeInstantiation</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object applyBeanPostProcessorsBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">	for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) &#123;</span><br><span class="line">		Object result &#x3D; bp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">		if (result !&#x3D; null) &#123;</span><br><span class="line">			return result;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上篇文章中我们已经讲过了Spring解析<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签时会注册<code>AnnotationAwareAspectJAutoProxyCreator</code>该类实现了<code>InstantiationAwareBeanPostProcessor</code>接口。我们继续执行会发现程序进入了<code>AbstractAutoProxyCreator#postProcessBeforeInstantiation()</code>方法中，该类是<code>AnnotationAwareAspectJAutoProxyCreator</code>类的父类。<img src="/posts/8a3989cc/4.png"><br>在该方法中调用了shouldSkip方法，Advisor的构建就是在此方法中完成的。我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">	&#x2F;&#x2F; TODO: Consider optimization by caching the list of the aspect names</span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors &#x3D; findCandidateAdvisors();</span><br><span class="line">	for (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">		if (advisor instanceof AspectJPointcutAdvisor &amp;&amp;</span><br><span class="line">				((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) &#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return super.shouldSkip(beanClass, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中有一句注释：考虑通过缓存切面名list来优化。我们进入<code>findCandidateAdvisors</code>方法<img src="/posts/8a3989cc/6.png"><br>在该方法中，首先通过父类的<code>findCandidateAdvisors</code>方法去获取Advisor，我们进入该方法<img src="/posts/8a3989cc/20.png"><br>该方法的作用就是获取实现了<code>Advisor</code>接口的所有bean对象。之后执行(2)处的代码，此处先做了一个判断，是否存在有<code>BeanFactoryAspectJAdvisorsBuilder</code>，如果存在则通过该构造器构造我们的Advisor，我们进入该方法<img src="/posts/8a3989cc/7.png"><br>在该方法中首先是获取了容器中切面的bean name，如果不为空的话就代表Advisor的构建工作已经完成过了，就直接从缓存中获取就行了，此时该值肯定是为null的，因为Advisor还没被加载过。然后下面做了一个double check（为了减少同步开销），接着通过一个工具类来获取容器中的所有bean name。<img src="/posts/8a3989cc/8.png"><br>接着对这些beanNames做了一个循环<img src="/posts/8a3989cc/9.png"><br>首先通过beanName来获取该bean的Class对象，之后再判断该类是否有@Aspect注解。我们在下面这行代码打上断点，并运行到断点处。<img src="/posts/8a3989cc/10.png"><img src="/posts/8a3989cc/11.png"><br>通过debug信息可以知道当前的beanName对应的类确实是我们定义的切面类，之后对该切面类的信息做了一些转换保存到<code>MetadataAwareAspectInstanceFactory</code>类中，之后调用了<code>AspectJAdvisorFactory#getAdvisors()</code>方法，在该方法中完成了Advisor的构建，我们进入此方法。<img src="/posts/8a3989cc/12.png"><br>在该方法中首先是做了一些准备工作，之后调用了<code>getAdvisorMethods</code>方法，该方法的作用就是获取我们定义的切面类中所有没被<code>@PointCut</code>注解的方法。之后对这些Method进行循环处理，在该循环中又去调用了<code>getAdvisor</code>方法，该方法就是判断当前方法是否是一个Advice。我们进入此方法<img src="/posts/8a3989cc/13.png">该方法首先对传入的信息进行了验证，之后调用了<code>getPointcut</code>方法，我们进入此方法<img src="/posts/8a3989cc/14.png"><br>在该方法中又去调用了红框中的方法，通过该方法名可以知道该方法的作用就是去判断方法上面有没有特定的注解。<img src="/posts/8a3989cc/15.png"><br>可以看到该方法的作用就是判断方法有没有被如下几个注解修饰：</p>
<ul>
<li>@Pointcut</li>
<li>@Around</li>
<li>@Before</li>
<li>@After</li>
<li>@AfterReturing</li>
<li>@AfterThrowing</li>
</ul>
<p>之后就是如果该方法被上面及注解注解的话创建了一个<code>AspectJExpressionPointcut</code>实例并为属性赋值。<img src="/posts/8a3989cc/16.png"><br>之后就是判断如果该方法需要创建Advisor，如果需要就创建<code>InstantiationModelAwarePointcutAdvisorImpl</code>实例，赋值特定的值之后返回。当循环执行完之后，就为所有被切面注解的方法创建好Advisor了。<img src="/posts/8a3989cc/17.png"><br>之后做了一个判断：如果寻找的增强器不为空而且有配置了增强延迟初始化那么需要在首位加入同步实例化器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">	Advisor instantiationAdvisor &#x3D; new SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span><br><span class="line">	advisors.add(0, instantiationAdvisor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后有一个循环，用于处理被<code>@DeclareParents</code>注解的属性。引介增强与普通增强方式很类似，只不过使用<code>DeclareParentsAdvisor</code>对功能进行封装。引介是一种特殊的增强器，他为类添加一些属性和方法。这样，即使一个业务类原先没有实现某个接口，通过引介功能，可以动态的为该业务类添加实现逻辑，让业务类称为这个接口的实现类。到此Advisor的创建就已经完成了。<img src="/posts/8a3989cc/18.png"><br>之后判断了当前bean类是否是单例对象，是单例类的话将创建好的该类的Advisor添加到Advisor缓存中，之后在将该切面中的Advisor添加到advisors（保存了所有的Advisor）中。<br>然后将所有的切面名保存，这样下一个bean创建时就不会再进行Advisor的加载工作了。<img src="/posts/8a3989cc/19.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇文章中主要介绍了在aop中所使用的Advisor的加载是何时进行的，Spring在bean创建的时候，会调用<code>InstantiationAwareBeanPostProcessor</code>中的接口方法，Advisor的初始化就是在其接口方法中进行的，Spring初始化Advisor的时候会对其进行缓存，这样的话就不用在每个bean创建的过程中都去执行相同的初始化流程了。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之被切入方法调用过程</title>
    <url>/posts/800ab950/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在本篇文章中将带你搞清楚在使用aop的时候当调用被切入方法的时候，Spring到底做了些什么。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>我们在被切入的方法前打上断点，然后进入dubug<img src="/posts/800ab950/1.png"><br>通过前面的讲解我们已经知道了，aop的动态代理有jdk和cglib两种代理方式，在本篇文章中我们讨论的是jdk动态代理实现的aop的情况。我们知道jdk动态代理中当调用被代理的方法的时候，会去调用<code>InvocationHandler</code>中的<code>invoke</code>方法。我们运行程序，发现确实如此。<img src="/posts/800ab950/2.png"><br>我们可以看下当前类的结构图<img src="/posts/800ab950/3.png"><br>可以看到该类实现了<code>InvocationHandler</code>接口，现在就开始核心代码的分析了。</p>
<h2 id="不需要使用拦截器链的方法"><a href="#不需要使用拦截器链的方法" class="headerlink" title="不需要使用拦截器链的方法"></a>不需要使用拦截器链的方法</h2><p>在aop中如果被调用的方法是equals、hashCode方法或者是继承自Advicsed类的方法，这几个类型的方法不需要使用拦截器链。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;equals方法处理</span><br><span class="line">if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">	&#x2F;&#x2F; The target does not implement the equals(Object) method itself.</span><br><span class="line">	return equals(args[0]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;hash方法的处理</span><br><span class="line">else if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">	&#x2F;&#x2F; The target does not implement the hashCode() method itself.</span><br><span class="line">	return hashCode();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">else if (method.getDeclaringClass() &#x3D;&#x3D; DecoratingProxy.class) &#123;</span><br><span class="line">	&#x2F;&#x2F; There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span><br><span class="line">	return AopProxyUtils.ultimateTargetClass(this.advised);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Advised接口或者其父接口中定义的方法，直接反射调用</span><br><span class="line">else if (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">		method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">	&#x2F;&#x2F; Service invocations on ProxyConfig with the proxy config...</span><br><span class="line">	&#x2F;&#x2F;通过反射调用切入点方法</span><br><span class="line">	return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="获取拦截器链"><a href="#获取拦截器链" class="headerlink" title="获取拦截器链"></a>获取拦截器链</h2><p>如果调用的是被代理的方法，那么就需要先去获取被调用方法的拦截器链。<img src="/posts/800ab950/4.png"><br>我们在该行代码上打上断点，然后进入该方法中。可以看到在Spring中对方法的拦截器链做了缓存，如果缓存中不存在那么则去初始化拦截器链。<img src="/posts/800ab950/5.png"><br>由于这是第一次调用该方法，此时缓存中是没有此方法的拦截器链的。所以此时会去执行<code>getInterceptorsAndDynamicInterceptionAdvice</code>方法。<img src="/posts/800ab950/6.png"><br>在此方法中，首先去获取了Advisor的适配器，Spring对Advisor和MethodIntercepter做了适配。然后获取了被调用方法的bean的所有Advisor，这里的actualClass就是真正定义此方法的类。<img src="/posts/800ab950/7.png"><br>然后循环对所有的Advisor进行处理，获取其拦截器。在我们的示例代码中并没有引介增强器的定义，所以代码走的都是第一个分支。dubug进入第一个分支。<img src="/posts/800ab950/8.png"><br>首先通过Advisor中的Pointcut来判断此方法是否能够应用此Advice，如果能的话通过增强器去获取拦截器。<img src="/posts/800ab950/9.png"><br>在这里通过Advisor适配器去获取Advisor中的方法拦截器，也就是<code>getInterceptors</code>方法，dubug进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException &#123;</span><br><span class="line">	List&lt;MethodInterceptor&gt; interceptors &#x3D; new ArrayList&lt;&gt;(3);</span><br><span class="line">	Advice advice &#x3D; advisor.getAdvice();</span><br><span class="line">	&#x2F;&#x2F;如果通知是MethodInterceptor类型的通知，直接加入interceptor</span><br><span class="line">	if (advice instanceof MethodInterceptor) &#123;</span><br><span class="line">		interceptors.add((MethodInterceptor) advice);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;对通知进行适配，使用已经配置好的Adapter:MethodBeforeAdviceAdapter、</span><br><span class="line">	&#x2F;&#x2F; AfterReturningAdviceAdapter以及ThrowsAdviceAdapter。</span><br><span class="line">	for (AdvisorAdapter adapter : this.adapters) &#123;</span><br><span class="line">		&#x2F;&#x2F;如果适配器支持该类型的Advice则取出封装完成的拦截器</span><br><span class="line">		if (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">			interceptors.add(adapter.getInterceptor(advisor));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if (interceptors.isEmpty()) &#123;</span><br><span class="line">		throw new UnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">	&#125;</span><br><span class="line">	return interceptors.toArray(new MethodInterceptor[0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法内首先做了一个判断，如果此通知是MethodInterceptor类型的话直接加入到拦截器中。之后使用预配置的适配器判断是否支持该Advice。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean supportsAdvice(Advice advice) &#123;</span><br><span class="line">	return (advice instanceof MethodBeforeAdvice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/800ab950/10.png"><br>从debug信息可以得知，有三个适配器。分别是<code>MethodBeforeAdviceAdapter</code>、<code>AfterReturingAdviceAdapter</code>、<code>ThrowingAdviceAdapter</code>，判断用户用户定义的Advice是否被支持其实就是判断Advice是否实现了<code>MethodBeforeAdvice</code>、<code>AfterReturingAdvice</code>、<code>ThrowingAdvice</code>接口。完成以上操作之后取出拦截器返回，至此就完成了Advisor中的方法拦截器的获取了。构建完方法的拦截器链之后，将该拦截器链放入到缓存当中。<img src="/posts/800ab950/11.png"><br>获取完拦截器链之后判断拦截器链是否为空，如果没有拦截器则直接通过反射调用切点方法。<img src="/posts/800ab950/12.png"></p>
<h2 id="拦截器链调用"><a href="#拦截器链调用" class="headerlink" title="拦截器链调用"></a>拦截器链调用</h2><p><img src="/posts/800ab950/13.png"><br>在进行拦截器链调用的时候，Spring先将代理对象、目标对象、目标方法、参数、拦截器链封装到了<code>ReflectiveMethodInvocation</code>中了，然后调用了<code>MethodInvocation#proceed()</code>方法进行调用。Spring在<code>ReflectiveMethodInvocation</code>中对proceed方法进行了重写，我们进入此方法。<img src="/posts/800ab950/14.png"><br>此时拦截和动态匹配方法器链中总共有四个对象，第一个是<code>ExposeInvocationInterceptor</code>，在上篇文章中我们已经讲过了该拦截器的作用就是暴露拦截器链，方便在其它地方使用。第二个是<code>AspectJAroudAdvice</code>，也就是环绕通知。第三个是<code>MethodBeforeAdviceInterceptor</code>，执行方法前的通知。第四个是<code>AspectJAfterAdvice</code>，是方法执行之后的通知。在该方法中首先做了一个判断，当前正在执行的拦截器是否是最后一个拦截器，如果是的话这里需要先去调用切点方法。此时肯定不是的，我们往下debug。<img src="/posts/800ab950/15.png"><br>接着从拦截器链中获取下一个需要执行的拦截器或者拦截通知。<img src="/posts/800ab950/16.png"><br>然后做了一个判断：判断此拦截器是否是<code>InterceptorAndDynamicMethodMatcher</code>类型的拦截器。如果是普通拦截器则直接调用<code>MethodInterceptor#invoke()</code>方法。上面提到的几个拦截器都是普通的拦截器，所以会进入下面的分支，我们进入invoke方法。在上面已经说过了第一个拦截器对象是<code>ExposeInvocationInterceptor</code>，Spring对invoke方法进行了重写。<img src="/posts/800ab950/17.png"><br>在前面我们提到过：<code>ExposeInvocationInterceptor</code>的作用就是暴露拦截器链，方便在其它地方调用，在该类中定义了一个invocation属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final ThreadLocal&lt;MethodInvocation&gt; invocation &#x3D;</span><br><span class="line">			new NamedThreadLocal&lt;&gt;(&quot;Current AOP method invocation&quot;);</span><br></pre></td></tr></table></figure>
<p>可以看到暴露拦截器链所使用的方法就是将MethodInvocation保存到ThreadLocal中。我们接着往下运行发现程序又回到了<code>ReflectiveMethodInvocation</code>的proceed方法中，因为我们刚才调用的时候将对象本身作为参数传入了，当我们调用proceed方法的时候这样就又回到了<code>ReflectiveMethodInvocation</code>的proceed方法中，这样就行成了链式调用。<br>我们接着往下看，此时当前需要执行的拦截器是第二个，也就是<code>AscpectJAroudAdvice</code>。<img src="/posts/800ab950/18.png"><br>接着往下执行，调用的是invoke方法，我们进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">	if (!(mi instanceof ProxyMethodInvocation)) &#123;</span><br><span class="line">		throw new IllegalStateException(&quot;MethodInvocation is not a Spring ProxyMethodInvocation: &quot; + mi);</span><br><span class="line">	&#125;</span><br><span class="line">	ProxyMethodInvocation pmi &#x3D; (ProxyMethodInvocation) mi;</span><br><span class="line">	ProceedingJoinPoint pjp &#x3D; lazyGetProceedingJoinPoint(pmi);</span><br><span class="line">	JoinPointMatch jpm &#x3D; getJoinPointMatch(pmi);</span><br><span class="line">	return invokeAdviceMethod(pjp, jpm, null, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中显示做了一系列的封装、转化操作，然后去调用了通知方法，我么debug进入invokeAdviceMethod方法（该方法是父类AbstractAspectJAdvice中定义的方法）。<img src="/posts/800ab950/19.png"><br>在该方法中又将调用通知方法委派给了<code>invokeAdviceMethodWithGivenArgs</code>方法，我们进入该方法。<img src="/posts/800ab950/20.png"><br>当运行完红框中的代码后你会发现又回到了<code>ReflectiveMethodInvocation</code>的proceed方法中，在这里你可能会有疑惑了，没在代码中看到调用proceed方法啊，怎么跑到proceed方法中的呢？答案是：当前调用的通知方法是切面中定义的around方法，在around的方法中会去调用proceed方法。<img src="/posts/800ab950/21.png"><br>此时的控制台输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br></pre></td></tr></table></figure>
<p>我们接着往下运行，当前应该执行的拦截器的index应该是2了，也就是<code>MethodBeforeAdviceInterceptor</code>。<img src="/posts/800ab950/22.png"><br>我们debug进入<code>MethodBeforeAdviceInterceptor</code>的invoke方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">	this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());</span><br><span class="line">	return mi.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中调用了方法执行前的通知方法，然后又去调用了proceed方法，当执行完此方法后，控制台的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br></pre></td></tr></table></figure>
<p>我们接着运行，进入proceed方法。<img src="/posts/800ab950/23.png"><br>此时的currentInterceptorIndex等于2，所以还不会去调用切点方法。最后一个拦截器的类型为<code>AscpectJAfterAdvice</code>，我们接着运行进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		&#x2F;&#x2F;先调用切点方法</span><br><span class="line">		return mi.proceed();</span><br><span class="line">	&#125;</span><br><span class="line">	finally &#123;</span><br><span class="line">		invokeAdviceMethod(getJoinPointMatch(), null, null);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中，先去调用了<code>MethodInvocation</code>的proceed方法，此时<code>ReflectiveMethodInvocation</code>类中currentInterceptorIndex的值为3，所以当进入procced方法的时候，会去调用切点方法。当调用切点方法之后再去调用方法执行完成之后通知方法的调用。我们debug进入proceed方法。<img src="/posts/800ab950/24.png"><br>可以看到程序确实会去调用invokeJoinpoint，进入该方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object invokeJoinpoint() throws Throwable &#123;</span><br><span class="line">	return AopUtils.invokeJoinpointUsingReflection(this.target, this.method, this.arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是直接通过反射进行了方法的调用，当执行完此方法后，控制台的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br></pre></td></tr></table></figure>
<p>调用完切点方法之后，就是去调用方法执行之后的通知方法。<img src="/posts/800ab950/25.png"><br>在执行该方法之前会去获取之前存入ThreadLocal中的MethodInvocation，也就是调用<code>getJoinPointMatch</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected JoinPointMatch getJoinPointMatch() &#123;</span><br><span class="line">	&#x2F;&#x2F;从ThreadLocal取出MethodInvocation</span><br><span class="line">	MethodInvocation mi &#x3D; ExposeInvocationInterceptor.currentInvocation();</span><br><span class="line">	if (!(mi instanceof ProxyMethodInvocation)) &#123;</span><br><span class="line">		throw new IllegalStateException(&quot;MethodInvocation is not a Spring ProxyMethodInvocation: &quot; + mi);</span><br><span class="line">	&#125;</span><br><span class="line">	return getJoinPointMatch((ProxyMethodInvocation) mi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当调用invokeAdviceMethod的时候流程就是和上面调用方法执行前的通知方法的流程是一样的了，这里就不重复说明了。当执行完该通知方法后控制台的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br><span class="line">after test..</span><br></pre></td></tr></table></figure>
<p>我们一直运行下去，程序会进入到切面中的aroud通知方法中。<img src="/posts/800ab950/26.png"><br>执行完该通知方法，此时控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br><span class="line">after test..</span><br><span class="line">after1</span><br></pre></td></tr></table></figure>
<p>拦截器链执行完成之后就是根据需要返回执行结果了。<img src="/posts/800ab950/27.png"><br>至此为止，被切入方法的调用过程就讲解完成了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇文章中，对被切入方法的调用过程进行了介绍。在aop中，Spring时通过调用拦截器链的方式来实现方法功能的增强的。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之代理类的生成</title>
    <url>/posts/47477f67/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我们已经知道aop的底层是通过动态代理来实现的，本篇文章索要做的事情就是带你搞清楚代理类的生成过程。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>在Spring中，在执行完成自定义的初始化方法之后会执行<code>BeanPostProcessor</code>的<code>postProcessAfterInitialization</code>方法，代理类的生成就是在该方法中进行的。在前面的文章我们知道了<code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了<code>BeanPostProcessor</code>接口，我们翻看源码会发现关于<code>postProcessAfterInitialization</code>方法的实现是在其父类<code>AbstractAutoProxyCreator</code>中实现的，我们在该方法中打上断点，并进入debug。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) &#123;</span><br><span class="line">	&#x2F;*xxx: 某个bean 已经实例化后*&#x2F;</span><br><span class="line">	if (bean !&#x3D; null) &#123;</span><br><span class="line">		Object cacheKey &#x3D; getCacheKey(bean.getClass(), beanName);</span><br><span class="line">		&#x2F;&#x2F;判断该bean是否已经被Spring AOP提前代理过，如果没有被提前代理过则进入AOP代理</span><br><span class="line">		if (this.earlyProxyReferences.remove(cacheKey) !&#x3D; bean) &#123; (1)</span><br><span class="line">			return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在(1)这个位置做了一个判断，判断该bean是否已经被AOP提前代理过了，这里是为了处理循环依赖的情况，因为在发生循环引用的时候，会从三级缓存中去获取bean对象，在此过程中就会提前去生成代理对象，所以在此情况下就不会再去生成AOP代理对象了。<img src="/posts/47477f67/2.png"><br>本例子中并没有循环引用存在，所以earlyProxyReferences中取出的值是null的。我们进入此<code>wrapIfNecessary</code>方法。<img src="/posts/47477f67/3.png"><br>在该方法中首先做了一些验证操作，之后就是创建代理的主要逻辑了。Spring先是获取了该bean的Advice和Advisor，也就是<code>getAdvicesAndAdvisorsForBean</code>，我们进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object[] getAdvicesAndAdvisorsForBean(</span><br><span class="line">			Class&lt;?&gt; beanClass, String beanName, @Nullable TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;寻找符合条件的Advisor</span><br><span class="line">	List&lt;Advisor&gt; advisors &#x3D; findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">	if (advisors.isEmpty()) &#123;</span><br><span class="line">		return DO_NOT_PROXY;</span><br><span class="line">	&#125;</span><br><span class="line">	return advisors.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中又把此操作委托给了<code>findEligibleAdvisors</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">	&#x2F;&#x2F;寻找候选增强器</span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors &#x3D; findCandidateAdvisors();(1)</span><br><span class="line">	&#x2F;&#x2F;寻找该bean能够应用的增强器</span><br><span class="line">	List&lt;Advisor&gt; eligibleAdvisors &#x3D; findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">	extendAdvisors(eligibleAdvisors);</span><br><span class="line">	if (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">		eligibleAdvisors &#x3D; sortAdvisors(eligibleAdvisors);</span><br><span class="line">	&#125;</span><br><span class="line">	return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中首先获取了容器中的所有候选Advisor，也就是<code>findCandidateAdvisors</code>方法。<img src="/posts/47477f67/4.png"><br>这个方法是不是很眼熟，对，在Advisor初始化的过程中Spring就调用过这个方法，只不过现在Spring并不会去初始化Advisor了，会直接从缓存中获取了。<img src="/posts/47477f67/5.png"><br>通过调试消息确实证实了如此，Sring先获取了所有的切面名称，然后通过切面名称从缓存中获取对应的Advisor之后将所有的Advisor返回。获取到所有的Advisor之后就应该筛选该bean所需要使用的Advisor了，也就是调用<code>findAdvisorsThatCanApply</code>方法，在该方法中又将该工作委托给了工具类<code>AopUtils</code>中的<code>findAdvisorsThatCanApply</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static List&lt;Advisor&gt; findAdvisorsThatCanApply(List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; clazz) &#123;</span><br><span class="line">	if (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line">		return candidateAdvisors;</span><br><span class="line">	&#125;</span><br><span class="line">	List&lt;Advisor&gt; eligibleAdvisors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	&#x2F;&#x2F;首先处理引介增强</span><br><span class="line">	for (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">		if (candidate instanceof IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123;</span><br><span class="line">			eligibleAdvisors.add(candidate);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	boolean hasIntroductions &#x3D; !eligibleAdvisors.isEmpty();</span><br><span class="line">	for (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">		if (candidate instanceof IntroductionAdvisor) &#123;</span><br><span class="line">			&#x2F;&#x2F; already processed</span><br><span class="line">			continue;</span><br><span class="line">		&#125;</span><br><span class="line">		if (canApply(candidate, clazz, hasIntroductions)) &#123;</span><br><span class="line">			eligibleAdvisors.add(candidate);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法先是处理了引介增强器，在本例子中我们没有该类型的Advisor。所以我们只关注下面这个循环中的内容，该循环内就比较简单了，显示做了一个判断，如果是上面处理过的Advisor直接跳过，之后就是判断该bean是否能够应用该Advisor，我们进入<code>canApply</code>方法。<img src="/posts/47477f67/6.png"><br>在我们的程序中，肯定是进入下面这个分支的。注意调试信息中的Advisor的类型<code>InstantiationModelAwarePointcutAdvisorImpl</code>就是我们初始化Advisor时创建实例的类型。<img src="/posts/47477f67/7.png"><br>该类实现了<code>PointcutAdvisor</code>接口，我们debug进入下面这个分支的<code>canApply</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">	Assert.notNull(pc, &quot;Pointcut must not be null&quot;);</span><br><span class="line">	&#x2F;&#x2F;首先通过类过滤器过滤</span><br><span class="line">	if (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MethodMatcher methodMatcher &#x3D; pc.getMethodMatcher();</span><br><span class="line">	&#x2F;&#x2F;然后会通过切点的方法匹配策略 进行匹配</span><br><span class="line">	if (methodMatcher &#x3D;&#x3D; MethodMatcher.TRUE) &#123;</span><br><span class="line">		&#x2F;&#x2F; No need to iterate the methods if we&#39;re matching any method anyway...</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	IntroductionAwareMethodMatcher introductionAwareMethodMatcher &#x3D; null;</span><br><span class="line">	if (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">		introductionAwareMethodMatcher &#x3D; (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Set&lt;Class&lt;?&gt;&gt; classes &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">	if (!Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">		&#x2F;&#x2F;目标对象没有采用jdk动态代理，则要么是cglib代理，要么没有代理，获取到没有代理的原始类</span><br><span class="line">		classes.add(ClassUtils.getUserClass(targetClass));</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F; 获取到目标类的所有的超类接口</span><br><span class="line">	classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line"></span><br><span class="line">	for (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">		&#x2F;&#x2F;获取目标类即接口的方法，只要有一个方法满足切点条件，即视为切点可以匹配</span><br><span class="line">		Method[] methods &#x3D; ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">		for (Method method : methods) &#123;</span><br><span class="line">			&#x2F;&#x2F;对目标类和方法进行切点验证</span><br><span class="line">			if (introductionAwareMethodMatcher !&#x3D; null ?</span><br><span class="line">				introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :</span><br><span class="line">				methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">				return true;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Pointcut的作用就是判断类中的方法是否需要应用Advisor，在前面的文章中我们已经讲过了，在该方法中注意要做了如下事情:</p>
<ul>
<li>判断该类是否符合能通过类过滤器。</li>
<li>获取Pointcut中的MethodMatcherr（能够判断方法是否需要应用该Advisor）。</li>
<li>获取该类和父类的Class信息。</li>
<li>循环判断该类和父类Class对象中的方法，如果有一个方法满足切点条件，即是为切点可匹配。</li>
</ul>
<p>获取到该bean该应用的Advisor之后Spring对Advisor做了一些扩展工作。我们进入<code>extendAdvisors</code>方法。在该方法上有如下注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors:</span><br><span class="line">* concretely, &#123;@link ExposeInvocationInterceptor&#125; at the beginning of the list.</span><br><span class="line">* &lt;p&gt;This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut</span><br><span class="line">* matching) and make available the current AspectJ JoinPoint. The call will have no effect</span><br><span class="line">* if there are no AspectJ advisors in the advisor chain.</span><br><span class="line">* @param advisors the advisors available</span><br><span class="line">* @return &#123;@code true&#125; if an &#123;@link ExposeInvocationInterceptor&#125; was added to the list,</span><br><span class="line">* otherwise &#123;@code false&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>
<p>这段话的意思是说：如果有必要在Advisor list的头位置添加<code>ExposeInvocationInterceptor</code>，<code>ExposeInvocationInterceptor</code>就是用来传递MethodInvocation的，在后续的调用链环节中，如果需要获取到当前的<code>MethodInvocation</code>就通过<code>ExposeInvocationInterceptor#currentInvocation()</code>静态方法获得。<img src="/posts/47477f67/8.png"><br>通过debug信息发现此方法执行完后在eligableAdvisor的头位置确实多了一个<code>ExposeInvocationInterceptor</code>对象。之后Spring对Advisor进行了排序，调用了<code>sortAdvisors</code>方法。到此就获取到了bean所需要并排序好的Advisor了。<br>之后调用了<code>createProxy</code>方法进行代理对象的创建流程了，debug进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,</span><br><span class="line">		@Nullable Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line">	if (this.beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">		AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ProxyFactory proxyFactory &#x3D; new ProxyFactory();</span><br><span class="line">	&#x2F;&#x2F;获取当前类中相关属性</span><br><span class="line">	proxyFactory.copyFrom(this);</span><br><span class="line">	&#x2F;&#x2F;如果proxyFactory.proxyTargetClass为false，但是目标beanClass是类</span><br><span class="line">	&#x2F;&#x2F;而不是接口，那么需要设置proxyFactory.proxyTargetClass为true，表示</span><br><span class="line">	&#x2F;&#x2F;使用cglib生成代理</span><br><span class="line">	if (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">	if (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">			proxyFactory.setProxyTargetClass(true);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			&#x2F;&#x2F;检查给定bean类上的接口，如果接口适合的话并将他们应用到proxyFactory中</span><br><span class="line">			evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取增强器</span><br><span class="line">	Advisor[] advisors &#x3D; buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    &#x2F;&#x2F;加入增强器</span><br><span class="line">	proxyFactory.addAdvisors(advisors);</span><br><span class="line">	&#x2F;&#x2F;设置要代理的类</span><br><span class="line">	proxyFactory.setTargetSource(targetSource);</span><br><span class="line">	&#x2F;&#x2F;定制代理</span><br><span class="line">	customizeProxyFactory(proxyFactory);</span><br><span class="line">	&#x2F;&#x2F;用来控制代理工厂被配置后，是否还允许修改通知，</span><br><span class="line">	&#x2F;&#x2F;缺省值为false（即在代理被配置之后，不允许修改代理的配置）</span><br><span class="line">	proxyFactory.setFrozen(this.freezeProxy);</span><br><span class="line">	if (advisorsPreFiltered()) &#123;</span><br><span class="line">		proxyFactory.setPreFiltered(true);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在该方法先是创建了ProxyFactory，然后做了一系列的准备工作，然后调用了<code>ProxyFactory#getProxy()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object getProxy(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">	return createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中首先调用了<code>createAopProxy</code>方法来创建了一个<code>AopProxy</code>对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected final synchronized AopProxy createAopProxy() &#123;</span><br><span class="line">	if (!this.active) &#123;</span><br><span class="line">		activate();</span><br><span class="line">	&#125;</span><br><span class="line">    &#x2F;&#x2F;创建AOP工厂</span><br><span class="line">	return getAopProxyFactory().createAopProxy(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>AopProxy</code>的工作又交给了<code>createAopProxy</code>方法去完成了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException &#123;</span><br><span class="line">	if (!IN_NATIVE_IMAGE &amp;&amp;</span><br><span class="line">			(config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config))) &#123;</span><br><span class="line">		Class&lt;?&gt; targetClass &#x3D; config.getTargetClass();</span><br><span class="line">		if (targetClass &#x3D;&#x3D; null) &#123;</span><br><span class="line">			throw new AopConfigException(&quot;TargetSource cannot determine target class: &quot; +</span><br><span class="line">					&quot;Either an interface or a target is required for proxy creation.&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;*xxx: 接口动态代理采用jdk的动态代理进行编织*&#x2F;</span><br><span class="line">		if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">			return new JdkDynamicAopProxy(config);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;*xxx: 实例类动态代理采用 cglib的动态代理进行编织*&#x2F;</span><br><span class="line">		return new ObjenesisCglibAopProxy(config);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		return new JdkDynamicAopProxy(config);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过该方法我们得知，在Spring中接口动态代理采用jdk动态代理进行编织，实例类动态代理采用cglib的动态代理进行编织。创建好AopProxy之后就是调用<code>getProxy</code>方法去生成代理类了。</p>
<pre><code>public Object getProxy(@Nullable ClassLoader classLoader) &#123;
    if (logger.isTraceEnabled()) &#123;
        logger.trace(&quot;Creating JDK dynamic proxy: &quot; + this.advised.getTargetSource());
    &#125;
     return Proxy.newProxyInstance(classLoader, this.proxiedInterfaces, this);
&#125;
</code></pre>
<p>在这我们终于看到我们熟悉的通过jdk创建代理的代码了，到此位置代理类的创建流程就讲解完成了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本文的探索我们知道了在Spring中，AOP代理类的生成是在bean生命周期的自定义初始化完成方法之后进行的也就是在<code>AnnotationAwareAspectJAutoProxyCreator#postProcessorBeforInitilization()</code>方法中进行的。并且会把bean的需要应用的Advisor进行处理之后放到生成的代理对象中，方便后面调用的时候直接使用。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/posts/91e798bc/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>《Java虚拟机规范》中曾视图定义一种”Java内存模型“来屏蔽各种硬件和操作系统的内存访问差异，以实现Java层序在各种平台下都能达到一致的内存访问效果。</p>
<h1 id="工作内存和主内存"><a href="#工作内存和主内存" class="headerlink" title="工作内存和主内存"></a>工作内存和主内存</h1><p>Java内存模型的主要目的是定义程序中各种变量的访问规则，此处的变量与Java编程中所说的变量有所区别，它包括实例字段、静态字段和构成数组对象的元素，但是不包括局部变量和方法参数（线程私有，不会被共享）。<br>在Java内存模型中，将内存分为了主内存和工作内存。Java内存模型规定了所有变量都存储在主内存中。每个线程有自己的工作内存，工作内存中保存了该线程中所使用到的变量的副本，线程对变量的所有操作都必须在工作内存中进行，不能直接操作主内存中的数据。不同的线程无法直接访问对方工作内存的变量，线程间变量值的传递均需要通过主内存来完成。线程、主内存、工作内存三者的关系如下图所示。<img src="/posts/91e798bc/1.png"></p>
<h1 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h1><p>Java虚拟机规范对于主内存和工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存以及如何从工作内存同步回主内存这一类实现细节，Java内存模型中定义了8种操作来完成。</p>
<ul>
<li>lock：作用于主内存的变量，把一个变量标识为一个线程独占的状态。</li>
<li>unlock：作用于主内存的变量，把一个处于锁定状态的变量释放，释放后的变量才能被其它线程锁定。</li>
<li>read：作用于主内存的变量，把一个变量从主内存传输到线程的工作内存。</li>
<li>load：作用于工作内存中的变量，把read操作读取的变量放入工作内存中。</li>
<li>use：作用于工作内存的变量，把工作内存中的变量值传递给执行引擎。</li>
<li>assign：作用于工作内存的变量，把从执行引擎接收的值赋给工作内存中的变量。</li>
<li>store：作用于工作内存中的变量，把工作内存中的一个变量的值传送到主内存中。</li>
<li>write：作用于主内存的变量，它sotre操作存入的值写入到主内存的变量中。</li>
</ul>
<p>Java内存模型规定了在执行上面的操作时必须要满足如下规则：</p>
<ul>
<li>不允许read和load、sotre和write单独出现，即不允许一个变量从主内存读取了但工作内存不接受或工作内存中发起了回写主内存不接受的情况。</li>
<li>不允许一个线程丢弃它最后一次assign操作，在工作内存中改变了变量值之后要同步会主内存中。</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步会主内存。</li>
<li>一个新的变量只能在主内存中诞生。</li>
<li>一个变量在同一时刻只允许一条线程对其lock操作，lock操作是可重入的。</li>
<li>对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，要重新lock或assign操作初始化变量的值。</li>
<li>线程只能unlock自己lock的变量，且在使用unlock操作时，必须保证已经使用过了lock操作。</li>
<li>对一个变量执行unlock操作前，必须把变量同不会主内存中。</li>
</ul>
]]></content>
      <tags>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群-Cluster</title>
    <url>/posts/2f89bd1c/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="../df693a19">哨兵模式</a>实现了集群的高可用，但是写服务器只有一个，这就会出现单机内存、写并发等瓶颈。在哨兵模式中，Redis每个实例中保存的都是完整的数据，浪费内存且有木桶效应。Redis为了解决这些问题在3.0版本中提供了Cluster模式，本篇文章将带你了解Cluster模式和如何配置该模式。</p>
<h1 id="常见分区方案"><a href="#常见分区方案" class="headerlink" title="常见分区方案"></a>常见分区方案</h1><p>在哨兵模式中每一台实例保存的都是完整的数据，所以当数据大小到达实例的容量时，即使再增加Redis实例也无法完成集群的扩容。为了解决这个问题，Cluster模式采用了无中心节点方式实现，集群通过分片方式保存数据库中的键值对。在进行数据写入和读取时会通过特定的方式确定所要查询的数据存在的节点，然后直接去特定的实例存取数据。数据的分区方案主要有如下几种：</p>
<ul>
<li>客户端分区方案</li>
<li>代理分区方案</li>
<li>请求路由方案</li>
</ul>
<h2 id="客户端分区"><a href="#客户端分区" class="headerlink" title="客户端分区"></a>客户端分区</h2><p>在客户端上决定数据存储和读取的节点，主要的思想就是采用哈希算法将Redis数据散列，通过hash函数，来确定key的保存节点。<img src="/posts/2f89bd1c/1.png"><br>客户端分区的代表为Redis Sharding。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>不适用第三方中间见，分区逻辑可控，配置简单，节点之间无关联，容易线性扩展。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>客户端无法动态增删服务节点，客户端需要自行维护分发逻辑，客户端之间无连接共享会造成连接浪费。</p>
<h2 id="代理分区"><a href="#代理分区" class="headerlink" title="代理分区"></a>代理分区</h2><p>客户端将请求发送到代理组件，代理解析请求然后转发至正确的节点，之后将请求结果返回给客户端。<img src="/posts/2f89bd1c/2.png"></p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>简化了客户段的分布式逻辑，客户端透明接入，切换成本第。</p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>增加了代理层，加重了架构部署复杂度和性能损耗。</p>
<p>代理分区主力实现方案有Twemproxy和Codis。</p>
<h2 id="请求路由"><a href="#请求路由" class="headerlink" title="请求路由"></a>请求路由</h2><p>客户端随机的请求一个Redis实例，然后Redis将请求转发给正确的Redis节点，但并不是直接将请求从一个Redis节点转发到另一个节点，而是在客户端的帮助下直接重定向到正确的实例。</p>
<h1 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h1><h2 id="Redis的数据分区"><a href="#Redis的数据分区" class="headerlink" title="Redis的数据分区"></a>Redis的数据分区</h2><p>Cluster模式采用虚拟槽分区，所有建通过哈希函数映射到0~16383整数槽内，计算公式为：slot = CRC16(key)&amp;16383。每个节点负责维护一部分槽以及槽所管理的键值数据。<img src="/posts/2f89bd1c/3.jpg"></p>
<h2 id="客户端请求重定向"><a href="#客户端请求重定向" class="headerlink" title="客户端请求重定向"></a>客户端请求重定向</h2><h3 id="moved重定向"><a href="#moved重定向" class="headerlink" title="moved重定向"></a>moved重定向</h3><ul>
<li>当客户端发起对键值对的操作指令后，将随机分配给某个节点。</li>
<li>节点算出该key所处的槽。</li>
<li>判断该槽是否由自己管理，如果由自己管理直接返回操作结果，否则返回moved错误，moved错误中含有插槽所位于正确的节点地址和端口，客户端通过返回的节点地址和端口直接执行操作指令。</li>
</ul>
<p><img src="/posts/2f89bd1c/6.png"></p>
<h3 id="ask重定向"><a href="#ask重定向" class="headerlink" title="ask重定向"></a>ask重定向</h3><p>在对集群进行扩容和缩容时，需要对槽及槽中数据进行迁移。当槽及槽中数据正在迁移时，客服端请求目标节点时，目标节点中的槽已经迁移支别的节点上了，此时目标节点会返回ask转向给客户端。</p>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>Redis的每个节点都可以分为主节点与对应的从节点。这节点负责处理插槽以及维护插槽中的数据，从节点负责复制自己的主节点的数据，并在主节点下线时代替主节点。<img src="/posts/2f89bd1c/5.jpg"></p>
<h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><p>Redis每个节点都会定期向其它节点发送ping消息来检测对方是否在线。当一个节点检测到另一个节点下线后，会将其设置为疑似下线，当集群中半数节点都认为某个主节点下线时，该节点才会真正的认为下线，并开始故障转移。故障转移的流程如下：</p>
<ul>
<li>通过raft算法从下线主节点的从节点中选出新的主节点。</li>
<li>被选中的从节点执行SLAVEOF no one命令，称为新的主节点。</li>
<li>新的主节点册小已下线主节点的槽指派，并将这些插槽指派给自己。</li>
<li>新的主节点向集群中广播自己有从节点变为主节点。</li>
<li>新的主节点开始替代已下线主节点的工作。</li>
</ul>
<h1 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h1><h2 id="节点规划"><a href="#节点规划" class="headerlink" title="节点规划"></a>节点规划</h2><p>Redis集群一般至少需要6个节点，才能保证是一个高可用的集群。每个节点需要开启配置cluster-enabled yes，让Redis运行在集群模式下。</p>
<table>
<thead>
<tr>
<th>节点名称</th>
<th>端口号</th>
<th>节点类型</th>
<th>所属主节点</th>
</tr>
</thead>
<tbody><tr>
<td>redis-6380</td>
<td>6380</td>
<td>主节点</td>
<td>/</td>
</tr>
<tr>
<td>redis-6381</td>
<td>6381</td>
<td>主节点</td>
<td>/</td>
</tr>
<tr>
<td>redis-6382</td>
<td>6382</td>
<td>主节点</td>
<td>/</td>
</tr>
<tr>
<td>redis-6390</td>
<td>6390</td>
<td>从节点</td>
<td>redis-6380</td>
</tr>
<tr>
<td>redis-6391</td>
<td>6391</td>
<td>从节点</td>
<td>redis-6381</td>
</tr>
<tr>
<td>redis-6392</td>
<td>6392</td>
<td>从节点</td>
<td>redis-6382</td>
</tr>
</tbody></table>
<p>为了方便管理我们将集群内的所有节点放在统一路径下面。</p>
<h3 id="创建各个节点目录"><a href="#创建各个节点目录" class="headerlink" title="创建各个节点目录"></a>创建各个节点目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster</span><br><span class="line">$ cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster</span><br><span class="line">$ sudo mkdir conf data log</span><br><span class="line">$ sudo mkdir -p data&#x2F;redis-6380 data&#x2F;redis-6381 data&#x2F;redis-6382 data&#x2F;redis-6390 data&#x2F;redis-6391 data&#x2F;redis-6392</span><br></pre></td></tr></table></figure>
<h3 id="各实例配置文件"><a href="#各实例配置文件" class="headerlink" title="各实例配置文件"></a>各实例配置文件</h3><ul>
<li>redis-6380.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;data&#x2F;redis-6380</span><br><span class="line">pidfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis-6380.pid</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;log&#x2F;redis-6380.log</span><br><span class="line">port 6380</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;conf&#x2F;node-6380.conf</span><br><span class="line">cluster-node-timeout 10000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<ul>
<li>redis-6381.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;data&#x2F;redis-6381</span><br><span class="line">pidfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis-6381.pid</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;log&#x2F;redis-6381.log</span><br><span class="line">port 6381</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;conf&#x2F;node-6381.conf</span><br><span class="line">cluster-node-timeout 10000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<ul>
<li>redis-6382.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;data&#x2F;redis-6382</span><br><span class="line">pidfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis-6382.pid</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;log&#x2F;redis-6382.log</span><br><span class="line">port 6382</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;conf&#x2F;node-6382.conf</span><br><span class="line">cluster-node-timeout 10000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<ul>
<li>redis-6390.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;data&#x2F;redis-6390</span><br><span class="line">pidfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis-6390.pid</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;log&#x2F;redis-6390.log</span><br><span class="line">port 6390</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;conf&#x2F;node-6390.conf</span><br><span class="line">cluster-node-timeout 10000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<ul>
<li>redis-6391.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;data&#x2F;redis-6391</span><br><span class="line">pidfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis-6391.pid</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;log&#x2F;redis-6391.log</span><br><span class="line">port 6391</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;conf&#x2F;node-6391.conf</span><br><span class="line">cluster-node-timeout 10000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<ul>
<li>redis-6392.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;data&#x2F;redis-6392</span><br><span class="line">pidfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;redis-6392.pid</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;log&#x2F;redis-6392.log</span><br><span class="line">port 6392</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &#x2F;usr&#x2F;local&#x2F;redis&#x2F;cluster&#x2F;conf&#x2F;node-6392.conf</span><br><span class="line">cluster-node-timeout 10000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<h3 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h3><p>Redis提供了管理集群的工具redis-trib.rb，在redis源码src目录下面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp &#x2F;usr&#x2F;local&#x2F;redis-4.0.11&#x2F;src&#x2F;redis-trib.rb &#x2F;usr&#x2F;local&#x2F;cluster</span><br></pre></td></tr></table></figure>
<p>该工具是由ruby实现的，所以要使用该工具要先安装ruby，ruby安装完成后可以通过以下命令来检查环境是否正确。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;redis-trib.rb </span><br><span class="line">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</span><br><span class="line"></span><br><span class="line">  create          host1:port1 ... hostN:portN</span><br><span class="line">                  --replicas &lt;arg&gt;</span><br><span class="line">  check           host:port</span><br><span class="line">  info            host:port</span><br><span class="line">  fix             host:port</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">  reshard         host:port</span><br><span class="line">                  --from &lt;arg&gt;</span><br><span class="line">                  --to &lt;arg&gt;</span><br><span class="line">                  --slots &lt;arg&gt;</span><br><span class="line">                  --yes</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">                  --pipeline &lt;arg&gt;</span><br><span class="line">  rebalance       host:port</span><br><span class="line">                  --weight &lt;arg&gt;</span><br><span class="line">                  --auto-weights</span><br><span class="line">                  --use-empty-masters</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">                  --simulate</span><br><span class="line">                  --pipeline &lt;arg&gt;</span><br><span class="line">                  --threshold &lt;arg&gt;</span><br><span class="line">  add-node        new_host:new_port existing_host:existing_port</span><br><span class="line">                  --slave</span><br><span class="line">                  --master-id &lt;arg&gt;</span><br><span class="line">  del-node        host:port node_id</span><br><span class="line">  set-timeout     host:port milliseconds</span><br><span class="line">  call            host:port command arg arg .. arg</span><br><span class="line">  import          host:port</span><br><span class="line">                  --from &lt;arg&gt;</span><br><span class="line">                  --copy</span><br><span class="line">                  --replace</span><br><span class="line">  help            (show this help)</span><br><span class="line"></span><br><span class="line">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</span><br></pre></td></tr></table></figure>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><h4 id="启动Redis实例"><a href="#启动Redis实例" class="headerlink" title="启动Redis实例"></a>启动Redis实例</h4><p>先启动6台Redis实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo redis-server conf&#x2F;redis-6380.conf</span><br><span class="line">sudo redis-server conf&#x2F;redis-6381.conf</span><br><span class="line">sudo redis-server conf&#x2F;redis-6382.conf</span><br><span class="line">sudo redis-server conf&#x2F;redis-6390.conf</span><br><span class="line">sudo redis-server conf&#x2F;redis-6391.conf</span><br><span class="line">sudo redis-server conf&#x2F;redis-6392.conf</span><br></pre></td></tr></table></figure>
<p>执行上诉命令后可以通过ps命令查看各个节点是否启动成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost cluster]# ps -ef | grep redis-server</span><br><span class="line">root       30195       1  0 01:44 ?        00:00:00 redis-server 127.0.0.1:6380 [cluster]</span><br><span class="line">root       30201       1  0 01:45 ?        00:00:00 redis-server 127.0.0.1:6381 [cluster]</span><br><span class="line">root       30206       1  0 01:45 ?        00:00:00 redis-server 127.0.0.1:6382 [cluster]</span><br><span class="line">root       30211       1  0 01:45 ?        00:00:00 redis-server 127.0.0.1:6390 [cluster]</span><br><span class="line">root       30216       1  0 01:46 ?        00:00:00 redis-server 127.0.0.1:6391 [cluster]</span><br><span class="line">root       30221       1  0 01:46 ?        00:00:00 redis-server 127.0.0.1:6392 [cluster]</span><br><span class="line">root       30237    2266  0 01:46 pts&#x2F;3    00:00:00 grep --color&#x3D;auto redis-server</span><br></pre></td></tr></table></figure>
<h4 id="通过redis-trib创建集群"><a href="#通过redis-trib创建集群" class="headerlink" title="通过redis-trib创建集群"></a>通过redis-trib创建集群</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo .&#x2F;redis-trib.rb create --replicas 1 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6390 127.0.0.1:6391 127.0.0.1:6392</span><br></pre></td></tr></table></figure>
<p>在此过程中会让你同意自动配置的操作，直接输入yes，正常的话在结尾会输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h1><h2 id="数据分区测试"><a href="#数据分区测试" class="headerlink" title="数据分区测试"></a>数据分区测试</h2><p>我们通过redis-cli连接上6380这台实例，然后上设置一个值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost cluster]# redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; set name yuege</span><br><span class="line">(error) MOVED 5798 127.0.0.1:6381</span><br></pre></td></tr></table></figure>
<p>返回了错误，此错误代表该key存储在6381实例中，我们连接上6381，执行相同的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost cluster]# redis-cli -p 6381</span><br><span class="line">127.0.0.1:6381&gt; set name yuege</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; get name</span><br><span class="line">&quot;yuege&quot;</span><br></pre></td></tr></table></figure>
<p>可以看到写入和读取值都能成功。</p>
<h2 id="故障转移测试"><a href="#故障转移测试" class="headerlink" title="故障转移测试"></a>故障转移测试</h2><p>接着关闭掉6380这台实例，然后查看6390的日志。<img src="/posts/2f89bd1c/3.png"><br>或通过如下命令查看实例信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6390&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:3fa5bdeb81181f6d9c298ac61b8eff71386c7857</span><br><span class="line">master_replid2:449030fbbe660a6f053b1a8ceb3ee688793d8da5</span><br><span class="line">master_repl_offset:3892</span><br><span class="line">second_repl_offset:3893</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:3892</span><br></pre></td></tr></table></figure>
<p>可以看到当Master宕机之后，集群自动将Slave实例切换为了Master。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Redis Cluster模式为了解决哨兵模式容量有限的问题，将数据按照一定规则分配到多台机器，内存/OPS不首先于单机。Redis Cluster分区方案所采用的是服务器Sharding技术（分片和路由都在Redis实例上完成），不受限于中间件，采用多主多从，实例和实例直接通信，完全去中心化。<br>Redis Cluster主要是针对海量数据+高并发+高可用场景，如果你的数据量很大，推荐使用Cluster模式，当数据量不是很大时，使用哨兵模式就足够了。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Redis集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群-主从模式</title>
    <url>/posts/b0e0aa/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在使用Redis的时候，为了保证其可用性一般会使用集群方式来部署Redis。Redis集群可分为三种模式：</p>
<ul>
<li>主从模式。</li>
<li>哨兵模式。</li>
<li>集群模式。</li>
</ul>
<p>本篇文章将带你了解主从模式以及如何配置。</p>
<h1 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h1><p>Redis通过持久化功能会将内存中的数据保存到硬盘上，在Redis重启之后会将硬盘中的数据加载到内存中。但是如果将数据存储在一台服务器上，当服务其出现硬盘故障等问题时会导致数据丢失。为了避免单点故障，通常的做法是将数据以副本的方式保存到堕胎服务器上。这即使一台服务器出现故障其它服务器依然可以继续提供服务。为此，Redis提供了复制功能，当某台服务器上的数据更新之后可以同步到其它服务器上。在Redis的主从模式中，将服务器分为主数据库（Master）和从数据库（Slave），主数据库提供写操作，从数据库设置为只读，并接受主数据库同步更新过来的数据。从数据库也可以提供同步功能，以此来减小主数据库的同步压力。<img src="/posts/b0e0aa/1.png" alt="主从模式"><br>在从数据库掉线重连或启动时会向主数据库发送同步命令，之后进入主从复制流程。<img src="/posts/b0e0aa/2.jpg" alt="主从复制流程"></p>
<h2 id="SYNC和PSYNC的区别"><a href="#SYNC和PSYNC的区别" class="headerlink" title="SYNC和PSYNC的区别"></a>SYNC和PSYNC的区别</h2><p>当完成主从同步之后，如果此时从服务器由于某些原因掉线了，当重新上线之后肯定需要在重新同步数据。这两个命令的区别就是在于复制阶段处理方式不同。</p>
<h3 id="SYNC"><a href="#SYNC" class="headerlink" title="SYNC"></a>SYNC</h3><p>全量同步，主服务器将所有数据重新生成RDB快照发给从服务器完成同步。</p>
<h3 id="PSYNC"><a href="#PSYNC" class="headerlink" title="PSYNC"></a>PSYNC</h3><p>部分同步，主服务器根据双方数据的偏差量来判断是否需要完整同步还是只需要将断线这段时间写入的数据同步给从服务器。部分同步相比于全量同步来说效率更好，如果只是因为网络原因而导致从服务器同步失败而去使用全量同步是非常不划算的，因此在2.8版本之后就使用PSYNC来进行同步了。Redis实现PSYNC主要是通过以下三部分实现的：</p>
<ul>
<li>服务器ID</li>
<li>复制积压缓存区。</li>
<li>复制偏移量。</li>
</ul>
<h4 id="服务器ID"><a href="#服务器ID" class="headerlink" title="服务器ID"></a>服务器ID</h4><p>每个Redis都会有一个表明自己身份的ID，如果当前没有保存Master的ID，PSYNC会使用<code>PSYNC ? -1</code>这种形式发送给Master服务器，代表本次同步使用全量复制。</p>
<h4 id="复制积压缓存区"><a href="#复制积压缓存区" class="headerlink" title="复制积压缓存区"></a>复制积压缓存区</h4><p>是由主服务器维护的一个FIFO的字节队列，默认大小1mb。当向从服务器发送写命令时会将这些数据存入队列中，如果在同步时复制偏移量以及之后的数据在队列中，则仅需将队列中的数据发送给从服务器即可。</p>
<h4 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h4><p>主服务器和从服务器都会维护一个复制偏移量。当主服务器向从武器发送N个字节的数据后，会将自己的复制偏移量加N。当从服务器接收到主服务器N个字节大小的数据后，也会将自己的复制偏移量加N。当最开始时，主从服务器的复制偏移量是相等的，但是当从服务器断线之后而导致少接收了部分数据，此时这两个值是不相同的。但是只要主从服务器复制偏移量的差值没有超过缓存去的大小时，此时就可以避免使用全量同步。<br><img src="/posts/b0e0aa/3.png"></p>
<h1 id="主从模式配置"><a href="#主从模式配置" class="headerlink" title="主从模式配置"></a>主从模式配置</h1><p>配置方式有两种：通过slaveof命令方式和修改配置文件方式。</p>
<h2 id="salveof命令"><a href="#salveof命令" class="headerlink" title="salveof命令"></a>salveof命令</h2><p>通过redis-cli连接到从节点服务器，执行下面的命令即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slavaof 127.0.0.1 6380</span><br></pre></td></tr></table></figure>
<h2 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h2><p>修改配置文件中的salveof属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slavaof 127.0.0.1 6380</span><br></pre></td></tr></table></figure>
<p>配置好后启动主从数据库。<img src="/posts/b0e0aa/4.png"><br>可以看到同步的流程和上面流程图中的流程是一致。你可以通过如下命令来查看从服务器的Master信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -c -h 127.0.0.1 -p 6381 info</span><br></pre></td></tr></table></figure>
<p><img src="/posts/b0e0aa/5.png"><br>当往主数据库中执行写操作之后，在从数据库中是能够查询到添加的数据的。<img src="/posts/b0e0aa/6.png"><br>当往从数据库中写入数据时会报如下错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; set ppp aaa</span><br><span class="line">(error) READONLY You can&#39;t write against a read only slave.</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主从复制主要解决了单点故障导致的数据丢失问题，通过读写分离减小Master的读压力，Slave可以接受其它Slave的连接和同步请求，这样可以有效分载Master的同步压力。主从复制的缺点主要是不具备自动容错和恢复功能，主从服务器宕机都会导致前端部分读写请求失败，需要等待机器重启或手动切换IP之后才能恢复。并且在宕机前如果有数据未能即使同步到从机，当将从机切换为主服务器时还有数据不一致的问题，降低了系统的可用性。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Redis集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群-哨兵模式</title>
    <url>/posts/df693a19/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<a href="../b0e0aa">Redis集群-主从模式</a>文章中，我们介绍了主从复制模式。主从复制模式主要有下面两个缺点：</p>
<ul>
<li>当主数据库(Master)宕机之后，无法自动实现从主服务器切换，需要人工进行切换，会造成一定时间内不可用。</li>
<li>当Redis集群中节点数量到达上限之后，扩容比较困难。</li>
</ul>
<p>为了解决上面从主服务器自动切换问题，Redis提供了哨兵模式。你可以将哨兵模式当成主从复制的一个plus版本，能够在主服务器宕机之后通过一定的方式选出新的主服务器并重新提供服务。</p>
<h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>所谓的哨兵其实就是一个进程，该进程主要有两个作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回其运行状态。</li>
<li>当Master宕机时，会自动将slave切换成Master，然后通过发布订阅模式通知其它服务器修改配置文件，切换Master服务器。</li>
</ul>
<p>通过哨兵进程的数量可以分为单哨兵模式和多哨兵模式。</p>
<h2 id="单哨兵模式"><a href="#单哨兵模式" class="headerlink" title="单哨兵模式"></a>单哨兵模式</h2><p><img src="/posts/df693a19/1.png" alt="单哨兵模式"></p>
<h2 id="多哨兵模式"><a href="#多哨兵模式" class="headerlink" title="多哨兵模式"></a>多哨兵模式</h2><p>为了避免单点故障，我们通常不会使用单哨兵模式。在多哨兵模式中，哨兵除了会去监控服务器外还会对哨兵进行监控。<img src="/posts/df693a19/2.png" alt="多哨兵模式"><br>在此模式下，当哨兵检测到Master宕机时不会马上去进行重新选举和故障转移，当只有一个哨兵认为Master下线，这种现象被称为主观下线。有可能是由于网络原因导致的假下线，只有当大多数哨兵都检测到Master下线之后，才会对剩余的Slave服务器进行选举投票，推选出新的Master，投票的过程由某一个哨兵完成。当选举处新的主机之后，就会该服务器切换为Master，并通知其它Slave服务器修改配置文件，切换Master服务器。</p>
<h1 id="哨兵模式配置"><a href="#哨兵模式配置" class="headerlink" title="哨兵模式配置"></a>哨兵模式配置</h1><p>在我们的例子中使用三个哨兵和一台Master两台Salve Redis服务器来实现。</p>
<table>
<thead>
<tr>
<th>进程类型</th>
<th>是否为主服务器</th>
<th>ip</th>
<th>端口</th>
</tr>
</thead>
<tbody><tr>
<td>Redis</td>
<td>是</td>
<td>127.0.0.1</td>
<td>6380</td>
</tr>
<tr>
<td>Redis</td>
<td>否</td>
<td>127.0.0.1</td>
<td>6381</td>
</tr>
<tr>
<td>Redis</td>
<td>否</td>
<td>127.0.0.1</td>
<td>6382</td>
</tr>
<tr>
<td>Sentinel</td>
<td>/</td>
<td>127.0.0.1</td>
<td>26380</td>
</tr>
<tr>
<td>Sentinel</td>
<td>/</td>
<td>127.0.0.1</td>
<td>26381</td>
</tr>
<tr>
<td>Sentinel</td>
<td>/</td>
<td>127.0.0.1</td>
<td>26382</td>
</tr>
</tbody></table>
<p>由于哨兵模式是基于主从复制模式实现的，所以我们只需要在主从模式的基础上增加配置文件sentinel.conf就可以了。</p>
<h2 id="哨兵1"><a href="#哨兵1" class="headerlink" title="哨兵1"></a>哨兵1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 26380</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6380 2</span><br></pre></td></tr></table></figure>
<h2 id="哨兵2"><a href="#哨兵2" class="headerlink" title="哨兵2"></a>哨兵2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 26381</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6380 2</span><br></pre></td></tr></table></figure>
<h2 id="哨兵3"><a href="#哨兵3" class="headerlink" title="哨兵3"></a>哨兵3</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">port 26382</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6380 2</span><br></pre></td></tr></table></figure>
<p>sentinel命令中的2代表当超过两个哨兵认为主机下线之后才会进行故障转移(failover)。<br>启动的顺序为：先启动Master进程，再启动Slave服务进程，最后启动三个哨兵进程。当按上面的顺序启动服务，如果配置正确的话，每个哨兵进程都会打印红框中的内容。<img src="/posts/df693a19/3.png"><br>我们再看下6381这台Salve服务器的信息。<img src="/posts/df693a19/4.png"><br>可以看到此时Master服务器为6380。之后我们关闭掉6380所对应的Redis服务，模拟Master宕机的情况。<img src="/posts/df693a19/5.png"><br>通过日志我们可以看到，当哨兵检测到Master宕机之后会先竞选一个新的leader，然后切换Master服务器为6381所对应的Redis服务器。我们此时再看下6381服务器的info。<img src="/posts/df693a19/6.png"><br>可以看到此时确实变成了Master服务器，如果你去查看6382Redis服务器的redis.conf文件，会发现此时slaveof已经变成了6381了。<img src="/posts/df693a19/7.png"><br>当再次启动上6380所对应的Redis，此时哨兵会打印如下信息，将6380转换为slave。<img src="/posts/df693a19/8.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="哨兵模式的优点"><a href="#哨兵模式的优点" class="headerlink" title="哨兵模式的优点"></a>哨兵模式的优点</h2><p>哨兵模式主要有以下优点：</p>
<ul>
<li>哨兵集群，基于主从复制模式，拥有主从配置的所有优点。</li>
<li>主从可以切换，故障可以转移，高可用性的系统。</li>
</ul>
<h2 id="哨兵模式的缺点"><a href="#哨兵模式的缺点" class="headerlink" title="哨兵模式的缺点"></a>哨兵模式的缺点</h2><p>哨兵模式主要有以下缺点：</p>
<ul>
<li>Redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦。</li>
<li>哨兵模式的配置繁琐。</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Redis集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务源码解析上</title>
    <url>/posts/2eb81046/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在Spring中，事务是基于aop来实现的。在本篇文章中将带你搞清楚以下几个问题：</p>
<ul>
<li>解析事务标签时到底干了些什么工作</li>
<li>事务相关的Advisor是在哪里初始化的？</li>
<li>事务Advice</li>
</ul>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="事务标签的解析"><a href="#事务标签的解析" class="headerlink" title="事务标签的解析"></a>事务标签的解析</h2><p>在Spring中，对于不同命名空间的标签Spring使用了不同的<code>NamespaceHandler</code>类进行处理。对于事务的命名空间<code>tx</code>Spring使用的是<code>TxNamespaceHandler</code>来进行处理的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TxNamespaceHandler extends NamespaceHandlerSupport &#123;</span><br><span class="line"></span><br><span class="line">	static final String TRANSACTION_MANAGER_ATTRIBUTE &#x3D; &quot;transaction-manager&quot;;</span><br><span class="line"></span><br><span class="line">	static final String DEFAULT_TRANSACTION_MANAGER_BEAN_NAME &#x3D; &quot;transactionManager&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	static String getTransactionManagerName(Element element) &#123;</span><br><span class="line">		return (element.hasAttribute(TRANSACTION_MANAGER_ATTRIBUTE) ?</span><br><span class="line">				element.getAttribute(TRANSACTION_MANAGER_ATTRIBUTE) : DEFAULT_TRANSACTION_MANAGER_BEAN_NAME);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void init() &#123;</span><br><span class="line">		registerBeanDefinitionParser(&quot;advice&quot;, new TxAdviceBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(&quot;annotation-driven&quot;, new AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(&quot;jta-transaction-manager&quot;, new JtaTransactionManagerBeanDefinitionParser());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当Spring解析到事务命名空间时会初始化三个标签解析器：</p>
<ul>
<li><code>TxAdviceBeanDefinitionParser</code>：用来解析<code>advice</code>标签。</li>
<li><code>AnnotationDrivenBeanDefinitionParser</code>：用来解析<code>annotation-driven</code>标签。</li>
<li><code>JtaTransactionManagerBeanDefinitionParser</code>：用来解析<code>jta-transaction-manager</code>标签。</li>
</ul>
<p>一般使用事务功能时时只需要在配置文件中使用第二个标签就能使用事务了，Spring在解析标签时会去调用<code>BeanDefinitionParser</code>的parse方法，所以我们看下<code>AnnotationDrivenBeanDefinitionParser</code>中parse方法的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">	registerTransactionalEventListenerFactory(parserContext);</span><br><span class="line">	String mode &#x3D; element.getAttribute(&quot;mode&quot;);</span><br><span class="line">	if (&quot;aspectj&quot;.equals(mode)) &#123;</span><br><span class="line">		&#x2F;&#x2F; mode&#x3D;&quot;aspectj&quot;</span><br><span class="line">		&#x2F;&#x2F;注册事务切面</span><br><span class="line">		registerTransactionAspect(element, parserContext);</span><br><span class="line">		if (ClassUtils.isPresent(&quot;javax.transaction.Transactional&quot;, getClass().getClassLoader())) &#123;</span><br><span class="line">			registerJtaTransactionAspect(element, parserContext);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;默认使用的是动态代理</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; mode&#x3D;&quot;proxy&quot;</span><br><span class="line">		AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext);</span><br><span class="line">	&#125;</span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中首先将注册<code>TransactionalEventListenerFactory</code>注册到容器中（后面初始化bean的时候会加载这个bean）。然后根据代理模式来判断是使用aspectj静态代理还是动态代理，可以看到如果没有设置代理模式的话，Spring默认使用的是动态代理。如果使用的是静态代理的话这里会去注册事务切面，如果使用的是动态代理会去配置自动的代理创建器。我们看下<code>AopAutoProxyConfigurer#configureAutoProxyCreator()</code>方法的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void configureAutoProxyCreator(Element element, ParserContext parserContext) &#123;</span><br><span class="line">	&#x2F;&#x2F;注册InfrastructureAdvisorAutoProxyCreator的bean定义信息</span><br><span class="line">	AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(parserContext, element);(1)</span><br><span class="line"></span><br><span class="line">	String txAdvisorBeanName &#x3D; TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME;</span><br><span class="line">	&#x2F;&#x2F;还没有注册过事务的增强器</span><br><span class="line">	if (!parserContext.getRegistry().containsBeanDefinition(txAdvisorBeanName)) &#123;</span><br><span class="line">		Object eleSource &#x3D; parserContext.extractSource(element);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Create the TransactionAttributeSource definition.</span><br><span class="line">		&#x2F;&#x2F;创建TransactionAttributeSource的bean</span><br><span class="line">		RootBeanDefinition sourceDef &#x3D; new RootBeanDefinition(</span><br><span class="line">				&quot;org.springframework.transaction.annotation.AnnotationTransactionAttributeSource&quot;);</span><br><span class="line">		sourceDef.setSource(eleSource);</span><br><span class="line">		sourceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">		String sourceName &#x3D; parserContext.getReaderContext().registerWithGeneratedName(sourceDef);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Create the TransactionInterceptor definition.</span><br><span class="line">		&#x2F;&#x2F;创建TransactionInterceptor的定义信息</span><br><span class="line">		RootBeanDefinition interceptorDef &#x3D; new RootBeanDefinition(TransactionInterceptor.class);(2)</span><br><span class="line">		interceptorDef.setSource(eleSource);</span><br><span class="line">		interceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">		registerTransactionManager(element, interceptorDef);</span><br><span class="line">		interceptorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">		String interceptorName &#x3D; parserContext.getReaderContext().registerWithGeneratedName(interceptorDef);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Create the TransactionAttributeSourceAdvisor definition.</span><br><span class="line">		&#x2F;&#x2F;添加事务的增强器bean定义信息</span><br><span class="line">		RootBeanDefinition advisorDef &#x3D; new RootBeanDefinition(BeanFactoryTransactionAttributeSourceAdvisor.class);(3)</span><br><span class="line">		advisorDef.setSource(eleSource);</span><br><span class="line">		advisorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">		advisorDef.getPropertyValues().add(&quot;transactionAttributeSource&quot;, new RuntimeBeanReference(sourceName));</span><br><span class="line">		advisorDef.getPropertyValues().add(&quot;adviceBeanName&quot;, interceptorName);(4)</span><br><span class="line">		if (element.hasAttribute(&quot;order&quot;)) &#123;</span><br><span class="line">			advisorDef.getPropertyValues().add(&quot;order&quot;, element.getAttribute(&quot;order&quot;));</span><br><span class="line">		&#125;</span><br><span class="line">		parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef);</span><br><span class="line"></span><br><span class="line">		CompositeComponentDefinition compositeDef &#x3D; new CompositeComponentDefinition(element.getTagName(), eleSource);</span><br><span class="line">		compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));</span><br><span class="line">		compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));</span><br><span class="line">		compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, txAdvisorBeanName));</span><br><span class="line">		parserContext.registerComponent(compositeDef);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下工作：</p>
<ul>
<li>注册<code>AnnotationTransactionAttributeSource</code>的BeanDifinition到容器中。</li>
<li>注册<code>InfrastructureAdvisorAutoProxyCreator</code>的BeanDefinition到容器中。</li>
<li>注册<code>TransactionInterceptor</code>事务拦截器的BeanDefinition到容器中。</li>
<li>注册<code>BeanFactoryTransactionAttributeSourceAdvisor</code>增强器的BeanDefinition到容器中并设置对应Property信息。</li>
</ul>
<p>Spring在进行事务标签解析工作中，注册了上面四个类的BeanDefinition到容器中，方便后面bean初始化时初始化这四个类的bean。</p>
<h2 id="事务相关的Advisor的初始化"><a href="#事务相关的Advisor的初始化" class="headerlink" title="事务相关的Advisor的初始化"></a>事务相关的Advisor的初始化</h2><p>在事务标签解析的时候，会注册<code>InfrastructureAdvisorAutoProxyCreator</code>的BeanDefinition到容器中，在容器调用finishBeanFactoryInitialization方法(非懒加载的单例bean)时会去初始化该增强器。</p>
<h2 id="事务方法调用"><a href="#事务方法调用" class="headerlink" title="事务方法调用"></a>事务方法调用</h2><p>通过前面对于aop的学习我们已经知道了，当调用被切方法时，会去调用<code>InvocationHandler</code>的invoke方法。我们在<code>JdkDynamicAopProxy</code>的invoke方法内打上断点，然后进入debug。在aop中有一个很重要的环节就是获取方法的拦截器链，通过前面的学习我们知道获取拦截器链真正处理的方法时在<code>DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice()</code>方法中。所以我们在该方法内打上断点，然后运行到断点处。在该方法中会先去获取该bean能够应用的所有增强器，我们通过debug信息看下获取到的advisors。<img src="/posts/2eb81046/2.png"><br>可以看到就一个增强器，增强器的类型就是我们在解析事务标签时所注册的<code>BeanFactoryTransactionAttributeSourceAdvisor</code>类。获取完增强器后会去判断该增强器能否apply到目标方法上，通过debug发现程序会运行到下面此处。<img src="/posts/2eb81046/3.png"><br>这里会去判断目标方法能否应用该增强器，单步执行发现程序运行到了<code>BeanFactoryTransactionAttributeSourceAdvisor</code>父类<code>TransactionAttributeSourcePointcut</code>的mathes方法。因为在<code>BeanFactoryTransactionAttributeSourceAdvisor</code>中定义的pointcut的类型为<code>TransactionAttributeSourcePointcut</code>。<img src="/posts/2eb81046/8.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean matches(Method method, Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">	TransactionAttributeSource tas &#x3D; getTransactionAttributeSource();</span><br><span class="line">	return (tas &#x3D;&#x3D; null || tas.getTransactionAttribute(method, targetClass) !&#x3D; null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里会去获取<code>TransactionAttributeSource</code>，在这里获取到的类型为<code>AnnotationTransactionAttributeSource</code>。<img src="/posts/2eb81046/4.png"><br>这其实就是我们在解析事务标签时注册的，然后会去调用<code>TransactionAttributeSource</code>的getTransactionAttribute方法，我们进入该方法。<img src="/posts/2eb81046/5.png"><br>在该方法中，首先从缓存中获取该方法的事务信息，如果不为空则又判断了是否为NULL_TRANSACTION_ATTRIBUTE。此时是第一次加载所以缓存中没有该方法的TransactionAttribute信息，继续执行。<img src="/posts/2eb81046/6.png"><br>然后程序会去调用computeTransactionAttribute方法，该方法就是去判断目标方法或者目标类中有没有@Transactional注解，有的话则对注解中的相关事务信息进行提取并创建<code>TransactionAttribute</code>来保存该方法对应的事务信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">		&#x2F;&#x2F; Don&#39;t allow no-public methods as required.</span><br><span class="line">	if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; The method may be on an interface, but we need attributes from the target class.</span><br><span class="line">	&#x2F;&#x2F; If the target class is null, the method will be unchanged.</span><br><span class="line">	Method specificMethod &#x3D; AopUtils.getMostSpecificMethod(method, targetClass);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; First try is the method in the target class.</span><br><span class="line">	&#x2F;&#x2F;在目标方法上获取TransactionAttribute</span><br><span class="line">	TransactionAttribute txAttr &#x3D; findTransactionAttribute(specificMethod);</span><br><span class="line">	if (txAttr !&#x3D; null) &#123;</span><br><span class="line">		&#x2F;&#x2F;如果获取回来的TransactionAttribute不为空，则说明方法被@Transactional注解了</span><br><span class="line">		return txAttr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Second try is the transaction attribute on the target class.</span><br><span class="line">	&#x2F;&#x2F;如果目标方法上没有，看看目标方法的类上获取TransactionAttribute</span><br><span class="line">	txAttr &#x3D; findTransactionAttribute(specificMethod.getDeclaringClass());</span><br><span class="line">	if (txAttr !&#x3D; null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">		return txAttr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (specificMethod !&#x3D; method) &#123;</span><br><span class="line">		&#x2F;&#x2F; Fallback is to look at the original method.</span><br><span class="line">		txAttr &#x3D; findTransactionAttribute(method);</span><br><span class="line">		if (txAttr !&#x3D; null) &#123;</span><br><span class="line">			return txAttr;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F; Last fallback is the class of the original method.</span><br><span class="line">		txAttr &#x3D; findTransactionAttribute(method.getDeclaringClass());</span><br><span class="line">		if (txAttr !&#x3D; null &amp;&amp; ClassUtils.isUserLevelMethod(method)) &#123;</span><br><span class="line">			return txAttr;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法的开头就判断了目标方法是不是public修饰的，如果不是直接返回null，这样就不会为此方法应用事务通知，所以在<strong>使用@Transactional注解的时候要保证目标方法是public的才能对该方法开启事务</strong>。findTransactionAttribute方法的作用就是去判断方法或者类上有没有事务相关的注解，如果有则吧注解中的内容封装到<code>TransactionAttribute</code>中。可以看到在该方法中首先去判断了目标方法上有没有相关的注解，如果有则直接返回。如果没有再去判断目标类上有没有相关注解，如果有则返回事务信息，如果没有的话返回null。当执行完成获取拦截器链的方法之后，获取的拦截器链中只有一个对象，类型为<code>TransactionInterceptor</code>，也就是我们解析事务标签时注册的一个BeanDefinition。<img src="/posts/2eb81046/7.png"><br>通过前面对aop的讲解我们知道执行拦截器链的时候，最终会去调用<code>MethodInterceptor</code>的invoke方法，所以我们直接看下<code>TransactionInterceptor</code>的invoke方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">	&#x2F;&#x2F; Work out the target class: may be &#123;@code null&#125;.</span><br><span class="line">	&#x2F;&#x2F; The TransactionAttributeSource should be passed the target class</span><br><span class="line">	&#x2F;&#x2F; as well as the method, which may be from an interface.</span><br><span class="line">	Class&lt;?&gt; targetClass &#x3D; (invocation.getThis() !&#x3D; null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Adapt to TransactionAspectSupport&#39;s invokeWithinTransaction...</span><br><span class="line">	return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中又去调用了父类的invokeWithinTransaction方法，在这里终于看到了Spring事务处理的逻辑了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object invokeWithinTransaction(Method method, @Nullable Class&lt;?&gt; targetClass,</span><br><span class="line">			final InvocationCallback invocation) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; If the transaction attribute is null, the method is non-transactional.</span><br><span class="line">	TransactionAttributeSource tas &#x3D; getTransactionAttributeSource();</span><br><span class="line">	final TransactionAttribute txAttr &#x3D; (tas !&#x3D; null ? tas.getTransactionAttribute(method, targetClass) : null);</span><br><span class="line">	final TransactionManager tm &#x3D; determineTransactionManager(txAttr);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;如果使用的是ReactiveTransactionManager</span><br><span class="line">	if (this.reactiveAdapterRegistry !&#x3D; null &amp;&amp; tm instanceof ReactiveTransactionManager) &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	PlatformTransactionManager ptm &#x3D; asPlatformTransactionManager(tm);</span><br><span class="line">	&#x2F;&#x2F;目标方法唯一标识</span><br><span class="line">	final String joinpointIdentification &#x3D; methodIdentification(method, targetClass, txAttr);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;如果txAttr为空或者tm 属于非CallbackPreferringPlatformTransactionManager，执行目标增强</span><br><span class="line">	if (txAttr &#x3D;&#x3D; null || !(ptm instanceof CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">	    &#x2F;&#x2F; Standard transaction demarcation with getTransaction and commit&#x2F;rollback calls.</span><br><span class="line">		&#x2F;&#x2F;根据需要来创建一个事务</span><br><span class="line">		TransactionInfo txInfo &#x3D; createTransactionIfNecessary(ptm, txAttr, joinpointIdentification);</span><br><span class="line"></span><br><span class="line">		Object retVal;</span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F; This is an around advice: Invoke the next interceptor in the chain.</span><br><span class="line">			&#x2F;&#x2F; This will normally result in a target object being invoked.</span><br><span class="line">			&#x2F;&#x2F;回调方法执行，执行目标方法(原有的业务逻辑)</span><br><span class="line">			retVal &#x3D; invocation.proceedWithInvocation();</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Throwable ex) &#123;</span><br><span class="line">			&#x2F;&#x2F; target invocation exception</span><br><span class="line">			&#x2F;&#x2F;异常回滚</span><br><span class="line">			completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line">		finally &#123;</span><br><span class="line">			&#x2F;&#x2F;清除事务信息</span><br><span class="line">			cleanupTransactionInfo(txInfo);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;提交事务</span><br><span class="line">		commitTransactionAfterReturning(txInfo);</span><br><span class="line">		return retVal;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;编程式事务处理(CallbackPreferringPlatformTransactionManager)</span><br><span class="line">	else &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法中对于事务实现的大体逻辑就是先根据需要创建一个事务，然后执行目标方法（原有业务逻辑），如果产生了异常之后，则对事务回滚，之后清除事务信息，最后根据事务状态来提交事务。在<a href="../fcb307c5">Spring事务源码解析下</a>将对这个方法中的内容进行详细讲解。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Spring中，事务是基于aop来实现的。在aop中你必须要搞清楚的几个东西：Advisor（增强器）、Advice（通知）、Pointcut（切点声明），这几个概念在aop中是非常重要的。在执行切点方法的时候，会根据这几个东西来获取拦截器链，然后执行拦截器链。在Spring中如果一个功能是基于aop来实现的话，你一定要搞清楚这个功能在进行实现的时候会往容器中注册哪些Advisor、Advice、以及用于判断方法是否该应用通知的Pointcut。Spring在实现事务这个功能时，Spring在解析到事务标签时，会往容器中注册四个类：</p>
<ul>
<li>AnnotationTransactionAttributeSource：用于获取注解中定义的事务的相关属性。</li>
<li>InfrastructureAdvisorAutoProxyCreator（BeanPostProcessor）：用于代理类的生成。</li>
<li>TransactionInterceptor（Advice）：事务拦截器。</li>
<li>BeanFactoryTransactionAttributeSourceAdvisor（Advisor）：事务增强器。</li>
</ul>
<p>事务增强器中所使用的Pointcut的类型为<code>TransactionAttributeSourcePointcut</code>，该Pointcut判断一个方法和一个类是否该应用<code>TransactionInterceptor</code>的时候就是通过判断目标方法或者目标类上是否有<code>@Transactional</code>注解来判断是否应用事务通知。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之finishBeanFactoryInitialization</title>
    <url>/posts/b9542103/</url>
    <content><![CDATA[<p>在refresh方法中在finishBeanFactoryInitialization这行代码之前有这样一行注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Instantiate all remaining (non-lazy-init) singletons.</span><br></pre></td></tr></table></figure>
<p>注释的意思就是：实例化剩余所有非懒加载的单例对象。<br>首先我们进入<strong>finishBeanFactoryInitialization</strong>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">	&#x2F;&#x2F; Initialize conversion service for this context.</span><br><span class="line">	&#x2F;&#x2F;(1)初始化此上下文的转换服务</span><br><span class="line">	if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">		beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">		beanFactory.setConversionService(</span><br><span class="line">		beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register a default embedded value resolver if no bean post-processor</span><br><span class="line">	&#x2F;&#x2F; (such as a PropertyPlaceholderConfigurer bean) registered any before:</span><br><span class="line">	&#x2F;&#x2F; at this point, primarily for resolution in annotation attribute values.</span><br><span class="line">	&#x2F;&#x2F;(2)如果beanFactory之前没有注册嵌入值解析器，则注册默认的嵌入值解析器：主要用于注解属性值的解析</span><br><span class="line">	if (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">		beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F; Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br><span class="line">	&#x2F;&#x2F;(3)初始化LoadTimeWeaverAware Bean实例对象</span><br><span class="line">	String[] weaverAwareNames &#x3D; beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);</span><br><span class="line">	for (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">		getBean(weaverAwareName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Stop using the temporary ClassLoader for type matching.</span><br><span class="line">	beanFactory.setTempClassLoader(null);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; (4)Allow for caching all bean definition metadata, not expecting further changes.</span><br><span class="line">	&#x2F;&#x2F;冻结所有的bean定义，说明注册的bean定义将不在被修改或者进一步处理</span><br><span class="line">	beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; (5)Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">	&#x2F;&#x2F;实例化所有剩余（非懒加载）的单例对象</span><br><span class="line">	beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中主要做了如下事情：</p>
<ul>
<li>初始化此上下文的转换服务。</li>
<li>如果beanFactory之前没有注册嵌入值解析器，则注册默认的嵌入值解析器：主要用于注解属性值的解析（也就是负责解析被@Value注解的属性值）。</li>
<li>初始化LoadTimeWeaverAware Bean实例对象</li>
<li>冻结所有的bean定义，说明注册的bean定义将不在被修改或者进一步处理。所以，你在BeanPostProcessor中就不能再修改配置元数据（BeanDefinitiion），要修改配置元数据可以再<code>BeanFactoryPostProcessor#postProcessBeanFactory()</code>方法中去修改。</li>
<li>实例化所有剩余（非懒加载）的单例对象</li>
</ul>
<p>下篇文章将专门来介绍bean的加载。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之initMessageSource</title>
    <url>/posts/2704654a/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void initMessageSource() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory &#x3D; getBeanFactory();</span><br><span class="line">    if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        &#x2F;&#x2F;从容器中获取name为 &quot;messageSource&quot;，类型为MessageSource的bean</span><br><span class="line">        this.messageSource &#x3D; beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</span><br><span class="line">        if (this.parent !&#x3D; null &amp;&amp; this.messageSource instanceof HierarchicalMessageSource) &#123;</span><br><span class="line">            HierarchicalMessageSource hms &#x3D; (HierarchicalMessageSource) this.messageSource;</span><br><span class="line">            if (hms.getParentMessageSource() &#x3D;&#x3D; null) &#123;</span><br><span class="line">                hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Using MessageSource [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        DelegatingMessageSource dms &#x3D; new DelegatingMessageSource();</span><br><span class="line">        dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">        this.messageSource &#x3D; dms;</span><br><span class="line">        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;No &#39;&quot; + MESSAGE_SOURCE_BEAN_NAME + &quot;&#39; bean, using [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>上面这段代码逻辑很清晰，先判断当前是否有该bean的BeanDefinition，若存在，则对MessageSource进行初始化并赋值给成员变量messageSource。如果不存在，则赋值一个空的MessageSource，也就是<code>DelegatingMessageSource</code>，以便能够正常的进行==getMessage==方法调用。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之initApplicationEventMulticaster</title>
    <url>/posts/eba13e6c/</url>
    <content><![CDATA[<h1 id="多播器简介"><a href="#多播器简介" class="headerlink" title="多播器简介"></a>多播器简介</h1><p>学过编程语言的应该对事件不陌生，当一些事件发生时，你需要通知其事件的监听器做相应的处理。这其实是设计模式中的观察者模式的典型应用。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在Spring中你只需要继承<code>ApplicationEvent</code>即可以完成一个自定义的事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestEvent extends ApplicationEvent &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Create a new &#123;@code ApplicationEvent&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param source the object on which the event initially occurred or with</span><br><span class="line">     *               which the event is associated (never &#123;@code null&#125;)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public TestEvent(Object source) &#123;</span><br><span class="line">        super(source);</span><br><span class="line">    &#125;</span><br><span class="line">    public String msg;</span><br><span class="line"></span><br><span class="line">    public TestEvent(Object source, String msg) &#123;</span><br><span class="line">        super(source);</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">    public void print()&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>可以通过实现<code>ApplicationListener</code>或者使用<code>@EventListener</code>注解来创建一个监听器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestListener implements ApplicationListener &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ApplicationEvent event) &#123;</span><br><span class="line">        if (event instanceof TestEvent)&#123;</span><br><span class="line">            TestEvent event1 &#x3D; (TestEvent) event;</span><br><span class="line">            event1.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件发布"><a href="#事件发布" class="headerlink" title="事件发布"></a>事件发布</h2><p>Spring中发布事件的接口是ApplicationEventPublisher，我们可以自定义自己的类，当然也可以使用spring现成的类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Bean.xml&quot;);</span><br><span class="line">        TestEvent event &#x3D; new TestEvent(&quot;hello&quot;,&quot;msg&quot;);</span><br><span class="line">        context.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="事件发布-1"><a href="#事件发布-1" class="headerlink" title="事件发布"></a>事件发布</h2><p>当调用<code>publishEvent()</code>方法时最后发布事件的方法为<code>SimpleApplicationEvenMulticaster#multicastEvent()</code>，进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) &#123;</span><br><span class="line">	ResolvableType type &#x3D; (eventType !&#x3D; null ? eventType : resolveDefaultEventType(event));</span><br><span class="line">	Executor executor &#x3D; getTaskExecutor();</span><br><span class="line">	&#x2F;*xxx: 从这里可以看出，对监听器的执行是通过遍历执行的*&#x2F;</span><br><span class="line">	for (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">		if (executor !&#x3D; null) &#123;</span><br><span class="line">			executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">		&#125;</span><br><span class="line">		else if (this.applicationStartup !&#x3D; null) &#123;</span><br><span class="line">			StartupStep invocationStep &#x3D; this.applicationStartup.start(&quot;spring.event.invoke-listener&quot;);</span><br><span class="line">			invokeListener(listener, event);</span><br><span class="line">			invocationStep.tag(&quot;event&quot;, event::toString);</span><br><span class="line">			if (eventType !&#x3D; null) &#123;</span><br><span class="line">				invocationStep.tag(&quot;eventType&quot;, eventType::toString);</span><br><span class="line">			&#125;</span><br><span class="line">			invocationStep.tag(&quot;listener&quot;, listener::toString);</span><br><span class="line">			invocationStep.end();</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			invokeListener(listener, event);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出这里其实就是遍历了所有的监听器，然后调用<code>onApplicationEvent()</code>方法。</p>
<h2 id="初始化多播器"><a href="#初始化多播器" class="headerlink" title="初始化多播器"></a>初始化多播器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void initApplicationEventMulticaster() &#123;</span><br><span class="line">	ConfigurableListableBeanFactory beanFactory &#x3D; getBeanFactory();</span><br><span class="line">	&#x2F;&#x2F;判断是否存在beanname为applicationEventMulticaster的BeanDefinition</span><br><span class="line">	if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">		this.applicationEventMulticaster &#x3D;</span><br><span class="line">				beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Using ApplicationEventMulticaster [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F;当产生Spring事件的时候会默认使用SimpleApplicationEventMulticaster</span><br><span class="line">		&#x2F;&#x2F;的multicastEvent来广播事件</span><br><span class="line">		SimpleApplicationEventMulticaster simpleApplicationEventMulticaster &#x3D; new SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">		simpleApplicationEventMulticaster.setApplicationStartup(getApplicationStartup());</span><br><span class="line">		this.applicationEventMulticaster &#x3D; simpleApplicationEventMulticaster;</span><br><span class="line">		beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;No &#39;&quot; + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + &quot;&#39; bean, using &quot; +</span><br><span class="line">					&quot;[&quot; + this.applicationEventMulticaster.getClass().getSimpleName() + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多播器初始化的流程也是比较简单的就是先判断用户是否自定义了applicationEventMulticaster的bean，如果没有则创建<code>SimpleApplicationEventMulticaster</code>的多播器，并添加到beanFactory中。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之invokeBeanFactoryPostProcessors</title>
    <url>/posts/4f99d2fa/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>见名知意，我们可以知道<code>invokeBeanFactoryPostProcessors</code>方法的作用就是调用BeanFactoryPostProcessors接口的实现类，BeanFactoryPostProcessor接口与BeanPostProcessor接口类似，可以对bean信息（配置元数据）进行处理。</p>
<h1 id="BeanFactoryPostProcessor使用"><a href="#BeanFactoryPostProcessor使用" class="headerlink" title="BeanFactoryPostProcessor使用"></a>BeanFactoryPostProcessor使用</h1><h2 id="Beans-xml"><a href="#Beans-xml" class="headerlink" title="Beans.xml"></a>Beans.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">    http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;a&quot; class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.A&quot; init-method&#x3D;&quot;initMethod&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;悦哥哥&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;bean class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyInstantiationAwareBeanPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;pcy.beanFactoryPostProcessor.CustomBeanFactoryPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="CustomBeanFactoryPostProcessor-java"><a href="#CustomBeanFactoryPostProcessor-java" class="headerlink" title="CustomBeanFactoryPostProcessor,java"></a>CustomBeanFactoryPostProcessor,java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBeanFactoryPostProcessor implements BeanFactoryPostProcessor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;enter into postProcessBeanFactory&quot;);</span><br><span class="line">        BeanDefinition be &#x3D; beanFactory.getBeanDefinition(&quot;a&quot;);</span><br><span class="line">        &#x2F;&#x2F;获取到beanDefinition之后你可以对其进行修改等操作，例如你可以在配置文件中对数据库连接密码进行加密，</span><br><span class="line">        &#x2F;&#x2F;在此进行解密。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);</span><br><span class="line">		A a &#x3D; (A) context.getBean(&quot;a&quot;);</span><br><span class="line">		System.out.println(a.getName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enter into postProcessBeanFactory</span><br><span class="line">A被实例化</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们进入<code>invokeBeanFactoryPostProcessors()</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">	PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());(1)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span><br><span class="line">	&#x2F;&#x2F; (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span><br><span class="line">	if (!IN_NATIVE_IMAGE &amp;&amp; beanFactory.getTempClassLoader() &#x3D;&#x3D; null &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">		beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从(1)我们可以知道BeanFactoryPostProcessor是在这里被调用的那么，那么这些BeanFactoryProcessor在哪里被加载进去的呢？通过debug得知，当执行<code>getBeanFactoryPostProcessor()</code>方法时，返回的其实是一个空数组，那么代表CustomBeanFactoryPostProcessor此时还并未加载到到容器当中。所以说我们自定义的CustomBeanFactoryPostProcessor并不是在此方法之前创建的，通过进入<code>PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors()</code>方法（省略了一些不重要的过程）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void invokeBeanFactoryPostProcessors(</span><br><span class="line">		ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br><span class="line">	Set&lt;String&gt; processedBeans &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">	&#x2F;*xxx: 首先处理 所有的BeanDefinitionRegistryPostProcessors工厂后置处理器接口*&#x2F;</span><br><span class="line">	.....</span><br><span class="line">	String[] postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);(1)</span><br><span class="line"></span><br><span class="line">	.....</span><br><span class="line">	List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">	for (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">		&#x2F;&#x2F;在这会根据bean name去获取BeanFactoryPostProcessor bean对象，此时容器中肯定是还没有此bean对象的，</span><br><span class="line">		&#x2F;&#x2F;所以说这里其实是先去创建BeanFactoryPostProcessor的bean对象</span><br><span class="line">		nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));(2)</span><br><span class="line">	&#125;</span><br><span class="line">	invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);(3)</span><br><span class="line">	&#x2F;&#x2F; Clear cached merged bean definitions since the post-processors might have</span><br><span class="line">	&#x2F;&#x2F; modified the original metadata, e.g. replacing placeholders in values...</span><br><span class="line">	beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中有三行非常重要的代码，也就是(1)-(3)这三行代码。执行代码(1)后，会从bean工厂找到所有实现<code>BeanFactoryPostProcessor</code>接口的实现类的beanname，在此例子中返回的是：pcy.beanFactoryPostProcessor.CustomBeanFactoryPostProcessor#0，然后看代码(2)，在这里会从beanFactory中获取我们实现类的bean对象，此时beanFactory是没有此bean对象的，此时回去创建我们的bean对象。所以，自定义的BeanFactoryPostProcessor是在这里被加载到context中的。然后就是调用代码(3)，也就执行了我们实现类的方法了。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之obtainFreshBeanFactory</title>
    <url>/posts/f07110d1/</url>
    <content><![CDATA[<p><code>AbstractApplicationContext#obtainFreshBeanFactory()</code>,进入此方法，该方法中调用了两个抽象方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class="line">	&#x2F;&#x2F;抽象方法，交给子类实现</span><br><span class="line">	refreshBeanFactory();</span><br><span class="line">	&#x2F;&#x2F;抽象方法，获得实际的 bean工厂，由子类实现</span><br><span class="line">	return getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>refreshBeanFactory()</code>方法在<code>AbstractRefreshableConfigApplicationContext</code>类中进行了实现，进入该实现方法，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">	&#x2F;&#x2F;如果之前有bean工厂，就销毁bean工厂的所有bean，并且关闭bean工厂</span><br><span class="line">	if (hasBeanFactory()) &#123;</span><br><span class="line">		&#x2F;&#x2F;父类实现</span><br><span class="line">		destroyBeans();</span><br><span class="line">		&#x2F;&#x2F;本类实现</span><br><span class="line">		closeBeanFactory();</span><br><span class="line">	&#125;</span><br><span class="line">	try &#123;</span><br><span class="line">		&#x2F;&#x2F;创建bean工厂</span><br><span class="line">		DefaultListableBeanFactory beanFactory &#x3D; createBeanFactory();</span><br><span class="line">		beanFactory.setSerializationId(getId());</span><br><span class="line">		&#x2F;&#x2F;本地化bean工厂，主要设置是否允许bean覆盖以及bean的循环引用</span><br><span class="line">		customizeBeanFactory(beanFactory);</span><br><span class="line">		&#x2F;&#x2F;加载bean信息并封装为BeanDefinition，抽象方法，交给子类实现</span><br><span class="line">		loadBeanDefinitions(beanFactory);</span><br><span class="line">		this.beanFactory &#x3D; beanFactory;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (IOException ex) &#123;</span><br><span class="line">		throw new ApplicationContextException(&quot;I&#x2F;O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法做了如下操作：</p>
<ul>
<li>首先判断当前是否已经存在了bean工厂，若存在则销毁所有bean并且关闭bean工厂。</li>
<li>创建bean工厂。</li>
<li>本地化bean工厂，如果this.allowBeanDefinitionOverriding不为空，则将<code>DefaultListableBeanFactory.allowBeanDefinitionOverriding</code>设置为该值；如果this.allowCircularReferences不为空，则将<code>DefaultListableBeanFactory.allowCircularReferences</code>设置为该值。</li>
<li>加载bean信息，并封装到BeanDefinition中。</li>
<li>将创建的bean工厂关联到容器中</li>
</ul>
<p>配置加载完成之后，执行<code>getBeanFactory()</code>方法，进入该抽象方法的实现方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final ConfigurableListableBeanFactory getBeanFactory() &#123;</span><br><span class="line">	DefaultListableBeanFactory beanFactory &#x3D; this.beanFactory;</span><br><span class="line">	if (beanFactory &#x3D;&#x3D; null) &#123;</span><br><span class="line">		throw new IllegalStateException(&quot;BeanFactory not initialized or already closed - &quot; +</span><br><span class="line">				&quot;call &#39;refresh&#39; before accessing beans via the ApplicationContext&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接将之前创建的bean工厂返回，<code>obtainFreshBeanFactory()</code>也执行结束，此时bean信息也加载到beanFactory中了。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之prepareBeanFactory</title>
    <url>/posts/de434b88/</url>
    <content><![CDATA[<p><code>prepareBeanFactory(ConfigurableListableBeanFactory)</code>方法的作用是配置工厂的标准上下文特征，例如上下文的类加载器和后置处理器，下面我们进入源码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">	&#x2F;&#x2F; Tell the internal bean factory to use the context&#39;s class loader etc.</span><br><span class="line">	&#x2F;&#x2F;通知内部bean工厂使用当前上下文的类加载器</span><br><span class="line">	beanFactory.setBeanClassLoader(getClassLoader());(1)</span><br><span class="line">	if (!shouldIgnoreSpel) &#123;</span><br><span class="line">		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));(2)</span><br><span class="line">	&#125;</span><br><span class="line">	beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Configure the bean factory with context callbacks.</span><br><span class="line">	&#x2F;*xxx:添加上下文感知的 bean后置处理器*&#x2F;</span><br><span class="line">	beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));(3)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注入时忽略下面的类(4)</span><br><span class="line">	beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationStartup.class);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="line">	&#x2F;&#x2F; MessageSource registered (and found for autowiring) as a bean.</span><br><span class="line">	&#x2F;&#x2F;添加可解析的依赖关系(5)</span><br><span class="line">	beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">	beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class="line">	beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class="line">	beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register early post-processor for detecting inner beans as ApplicationListeners.</span><br><span class="line">	&#x2F;&#x2F;添加监听器感知的bean后置处理器</span><br><span class="line">	beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));(6)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Detect a LoadTimeWeaver and prepare for weaving, if found.(7)</span><br><span class="line">	if (!IN_NATIVE_IMAGE &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">		&#x2F;&#x2F; Set a temporary ClassLoader for type matching.</span><br><span class="line">		beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register default environment beans.</span><br><span class="line">	&#x2F;&#x2F;注册默认应用级别的bean(8)</span><br><span class="line">	if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">	&#125;</span><br><span class="line">	if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">	&#125;</span><br><span class="line">	if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">	&#125;</span><br><span class="line">	if (!beanFactory.containsLocalBean(APPLICATION_STARTUP_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(APPLICATION_STARTUP_BEAN_NAME, getApplicationStartup());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>(1)将bean工厂的类加载器设置为当前上下文的类加载器</li>
<li>(2)设置bean工厂是否支持SpEL表达式</li>
<li>(3)添加ApplicationContextAwareProcessor</li>
<li>(4)忽略一些自动装配的接口</li>
<li>(5)添加可解析的自动装配，这些自动装配到bean工厂中的实例我们可以直接通过@Autowired注解获取实例，其它组件可以直接使用</li>
<li>(6)添加BeanPostProcessor（ApplicationListenerDetector）</li>
<li>(7)添加AspectJ相关的组件</li>
<li>(8)给beanFactory添加一些默认组件：environment[ConfigurableEnvironment]，systemProperties[Map&lt;String, Object&gt;]，systemEnvironment[Map&lt;String, Object&gt;]，applicationStartup[ApplicationStartup]</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>bean 工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之prepareRefresh</title>
    <url>/posts/8a8ec8a/</url>
    <content><![CDATA[<p>在上一篇文章中介绍到了<code>AbstractApplication#refresh()</code>方法，下面将一一介绍每个方法所起的功能。</p>
<h1 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh"></a>prepareRefresh</h1><p>此方法的作用为在刷新前做一些准备工作，进入此方法.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareRefresh() &#123;</span><br><span class="line">	&#x2F;&#x2F; Switch to active.</span><br><span class="line">	this.startupDate &#x3D; System.currentTimeMillis();</span><br><span class="line">	this.closed.set(false);</span><br><span class="line">	this.active.set(true);</span><br><span class="line"></span><br><span class="line">	if (logger.isDebugEnabled()) &#123;</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Refreshing &quot; + this);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			logger.debug(&quot;Refreshing &quot; + getDisplayName());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Initialize any placeholder property sources in the context environment.</span><br><span class="line">	&#x2F;&#x2F;留给子类覆盖，初始化属性资源</span><br><span class="line">	initPropertySources();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Validate that all properties marked as required are resolvable:</span><br><span class="line">	&#x2F;&#x2F; see ConfigurablePropertyResolver#setRequiredProperties</span><br><span class="line">	&#x2F;&#x2F;校验必要的属性</span><br><span class="line">	getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Store pre-refresh ApplicationListeners...</span><br><span class="line">	&#x2F;&#x2F;初始化applicationListeners</span><br><span class="line">	if (this.earlyApplicationListeners &#x3D;&#x3D; null) &#123;</span><br><span class="line">		this.earlyApplicationListeners &#x3D; new LinkedHashSet&lt;&gt;(this.applicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; Reset local application listeners to pre-refresh state.</span><br><span class="line">		this.applicationListeners.clear();</span><br><span class="line">		this.applicationListeners.addAll(this.earlyApplicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Allow for the collection of early ApplicationEvents,</span><br><span class="line">	&#x2F;&#x2F; to be published once the multicaster is available...</span><br><span class="line">       &#x2F;&#x2F; 创建刷新前的监听事件集合</span><br><span class="line">	this.earlyApplicationEvents &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中做了如下事情：</p>
<ul>
<li>将容器的状态设置为active状态</li>
<li>初始化属性资源</li>
<li>校验必要的属性，如果必要的属性不存在则抛出<code>MissingRequiredPropertiesException</code>异常</li>
<li>初始化applicationListeners</li>
<li>创建刷新前的监听事件集合</li>
</ul>
<p><code>initPropertySources</code>方法是留给子类扩展的，所以我们可以继承此类通过子类来重写<code>initPropertySources</code>方法来实现一些我们想要的扩展。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyClassPathXmlApplicationContext extends ClassPathXmlApplicationContext &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public MyClassPathXmlApplicationContext(String... configLocations)&#123;</span><br><span class="line">        super(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void initPropertySources() &#123;</span><br><span class="line">        System.out.println(&quot;扩展initPropertySource&quot;);</span><br><span class="line">        &#x2F;&#x2F;这里添加了一个name属性到Environment里面，以方便我们在后面用到</span><br><span class="line">        getEnvironment().getSystemProperties().put(&quot;name&quot;,&quot;bobo&quot;);</span><br><span class="line">        &#x2F;&#x2F;这里要求Environment中必须包含username属性，如果不包含，则抛出异常</span><br><span class="line">        getEnvironment().setRequiredProperties(&quot;username&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的类中我们做了两个扩展，第一，向Enviroment中添加了一个属性值。第二，我们设置了一个必要的系统属性username，当该属性不存在时会抛出异常。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之registerListeners</title>
    <url>/posts/2bc3b25f/</url>
    <content><![CDATA[<p>我们根据名字就可知道该该方法的作用就是注册事件监听器，进入该方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void registerListeners() &#123;</span><br><span class="line">	&#x2F;&#x2F; Register statically specified listeners first.</span><br><span class="line">	&#x2F;&#x2F;硬编码方式注册的监听器处理</span><br><span class="line">	for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">		getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">	&#x2F;&#x2F; uninitialized to let post-processors apply to them!</span><br><span class="line">	&#x2F;&#x2F;配置文件注册的监听器处理</span><br><span class="line">	String[] listenerBeanNames &#x3D; getBeanNamesForType(ApplicationListener.class, true, false);</span><br><span class="line">	for (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">		getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Publish early application events now that we finally have a multicaster...</span><br><span class="line">	Set&lt;ApplicationEvent&gt; earlyEventsToProcess &#x3D; this.earlyApplicationEvents;</span><br><span class="line">	this.earlyApplicationEvents &#x3D; null;</span><br><span class="line">	if (!CollectionUtils.isEmpty(earlyEventsToProcess)) &#123;</span><br><span class="line">		for (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class="line">			getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>将手动注册的监听器绑定到广播器</li>
<li>获取beanFactory中的监听器名称，并设置到广播器中</li>
<li>如果有早期事件需要发布，发布这些早期事件</li>
</ul>
<p>对于spring配置的监听器，spring在这里并没有做太多的处理。在==refresh==方法的==registerBeanPostProcessors==方法中，注册了一个<code>ApplicationListenerDetector</code>BeanPostProcessor，在bean初始化的时候会将该监听器bean绑定到广播器中。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Listener</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之registerBeanPostProcessors</title>
    <url>/posts/b9e6c2cb/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void registerBeanPostProcessors(</span><br><span class="line">			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;*xxx: 注册 bean后置处理器*&#x2F;</span><br><span class="line">	String[] postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register BeanPostProcessorChecker that logs an info message when</span><br><span class="line">	&#x2F;&#x2F; a bean is created during BeanPostProcessor instantiation, i.e. when</span><br><span class="line">	&#x2F;&#x2F; a bean is not eligible for getting processed by all BeanPostProcessors.</span><br><span class="line">	int beanProcessorTargetCount &#x3D; beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;</span><br><span class="line">	beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line">	&#x2F;&#x2F; Separate between BeanPostProcessors that implement PriorityOrdered,</span><br><span class="line">	&#x2F;&#x2F; Ordered, and the rest.</span><br><span class="line">	List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;BeanPostProcessor&gt; internalPostProcessors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;String&gt; orderedPostProcessorNames &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;String&gt; nonOrderedPostProcessorNames &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	for (String ppName : postProcessorNames) &#123;</span><br><span class="line">		if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">			BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">			priorityOrderedPostProcessors.add(pp);</span><br><span class="line">			if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">				internalPostProcessors.add(pp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">			orderedPostProcessorNames.add(ppName);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; First, register the BeanPostProcessors that implement PriorityOrdered.</span><br><span class="line">	&#x2F;&#x2F;第一步，注册所有实现PriorityOrdered的BeanPostProcessor</span><br><span class="line">	sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">	registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Next, register the BeanPostProcessors that implement Ordered.</span><br><span class="line">	&#x2F;&#x2F;第二步，注册所有实现Ordered的BeanPostProcessor</span><br><span class="line">	List&lt;BeanPostProcessor&gt; orderedPostProcessors &#x3D; new ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">	for (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">		BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">		orderedPostProcessors.add(pp);</span><br><span class="line">		if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">			internalPostProcessors.add(pp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">	registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Now, register all regular BeanPostProcessors.</span><br><span class="line">	&#x2F;&#x2F;第三步，注册所有无序的BeanPostProcessor</span><br><span class="line">	List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">	for (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">		BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">		nonOrderedPostProcessors.add(pp);</span><br><span class="line">		if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">			internalPostProcessors.add(pp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Finally, re-register all internal BeanPostProcessors.</span><br><span class="line">	sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">	registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Re-register post-processor for detecting inner beans as ApplicationListeners,</span><br><span class="line">	&#x2F;&#x2F; moving it to the end of the processor chain (for picking up proxies etc).</span><br><span class="line">	&#x2F;&#x2F;添加ApplicationListener探测器</span><br><span class="line">	beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中主要做了如下事情：</p>
<ul>
<li>获取所有的<code>BeanPostProcessor</code>bean的beanname</li>
<li>根据BeanPostProcessor不同的优先级进行分类</li>
<li>把分类过后的BeanPostProcessors注册到beanFactory中</li>
<li>添加ApplicationListener探测器</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-Spring容器</title>
    <url>/posts/e036e212/</url>
    <content><![CDATA[<h1 id="容器概述"><a href="#容器概述" class="headerlink" title="容器概述"></a>容器概述</h1><hr>
<p>在Spring官网上有这样一段话：ApplicationContext接口代表Spring IoC容器以及负责实例化、配置以及装配bean。容器通过读取配置元数据获取哪些对象要实例化、配置和组装的指示。<br>下面这副图从一个高级别上展示了Spring是如何工作的。<br><img src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/container-magic.png" alt="Alt Text" title="Spring工作原理"></p>
<hr>
<h2 id="Configuration-Metadata-配置元数据"><a href="#Configuration-Metadata-配置元数据" class="headerlink" title="Configuration Metadata(配置元数据)"></a>Configuration Metadata(配置元数据)</h2><p>根据之前的图我们可以知道Spring IoC容器使用一种形式的配置元数据。通过配置元数据Spring容器可以知道如何去实例化、配置和组装应用程序中的对象。传统的配置元数据以简单直观的XML格式提供，但这并不是配置元数据唯一允许的形式（常见的还有基于注解和Java代码）。在容器本身内，这些bean定义信息通过BeanDefinition来承载。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>下面通过一个例子来介绍Spring容器。</p>
<h2 id="bean对象"><a href="#bean对象" class="headerlink" title="bean对象"></a>bean对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">	public A() &#123;</span><br><span class="line">		System.out.println(&quot;A被实例化&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">    	this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bean-xml"><a href="#Bean-xml" class="headerlink" title="Bean.xml"></a>Bean.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">    http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;a&quot; class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.A&quot; init-method&#x3D;&quot;initMethod&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;悦哥哥&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;bean class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyInstantiationAwareBeanPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);（1）</span><br><span class="line">A a &#x3D; (A) context.getBean(&quot;a&quot;);</span><br><span class="line">System.out.println(a.getName());</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yuegege</span><br></pre></td></tr></table></figure>
<hr>
<p>通过结果输出的值可以看出该对象确实是已经加载到容器中了。我们从第一行代码开始分析，进入入<code>ClassPathXmlApplicationContext</code>类的构造函数，发现最终执行的构造方法是如下的构造方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(</span><br><span class="line">	String[] configLocations, boolean refresh, @Nullable ApplicationContext parent) throws BeansException &#123;</span><br><span class="line">	super(parent);&#x2F;&#x2F;执行父类的构造方法 (1)</span><br><span class="line">	setConfigLocations(configLocations);(2)</span><br><span class="line">	if (refresh) &#123;</span><br><span class="line">		refresh();(3)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码(2)的作用为当传入的configLocations（此例子中为”Bean.xml”）设置到this.configLocations中，后面要解析xml的时候好直接使用。代码(2)的功能为：加载或刷新配置的持久表示，这些表示可能来自基于java的配置、XML文件、属性文件、关系数据库模式或其他格式。在当前情况下为从XML中加载或刷新配置的持久表示。我们进入<code>refresh()</code>方法中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">	&#x2F;*xxx: 同步锁*&#x2F;</span><br><span class="line">	synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">		StartupStep contextRefresh &#x3D; this.applicationStartup.start(&quot;spring.context.refresh&quot;);</span><br><span class="line">		&#x2F;&#x2F; Prepare this context for refreshing.</span><br><span class="line">		&#x2F;&#x2F;准备上下文的刷新</span><br><span class="line">		prepareRefresh();(1)</span><br><span class="line">		&#x2F;&#x2F; Tell the subclass to refresh the internal bean factory.</span><br><span class="line">		&#x2F;&#x2F;通知子类，刷新内部实际的bean工厂,将配置元信息转化为BeanDefinition在此方法中进行</span><br><span class="line">		ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();(2)</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Prepare the bean factory for use in this context.</span><br><span class="line">		&#x2F;&#x2F;准备这个上下文即将使用的bean工厂</span><br><span class="line">		prepareBeanFactory(beanFactory);(3)</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F; Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">			&#x2F;&#x2F;标准bean工厂准备完后，为相应的子类提供bean工厂后置的处理,比如与web环境相关的上下文，会添加 ServletContextAwareProcessor</span><br><span class="line">			postProcessBeanFactory(beanFactory);(4)</span><br><span class="line"></span><br><span class="line">			StartupStep beanPostProcess &#x3D; this.applicationStartup.start(&quot;spring.context.beans.post-process&quot;);</span><br><span class="line">			&#x2F;&#x2F; Invoke factory processors registered as beans in the context.</span><br><span class="line">			&#x2F;&#x2F;处理工厂后置处理器，代理给PostProcessorRegistrationDelegate 进行处理</span><br><span class="line">			invokeBeanFactoryPostProcessors(beanFactory);(5)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Register bean processors that intercept bean creation.</span><br><span class="line">			&#x2F;&#x2F;注册bean后置处理器</span><br><span class="line">			registerBeanPostProcessors(beanFactory);(6)</span><br><span class="line">			beanPostProcess.end();</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Initialize message source for this context.</span><br><span class="line">			&#x2F;&#x2F;初始化这个上下文的数据源</span><br><span class="line">			initMessageSource();(7)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Initialize event multicaster for this context.</span><br><span class="line">			&#x2F;&#x2F;初始化这个上下文的应用事件广播器</span><br><span class="line">			initApplicationEventMulticaster();(8)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Initialize other special beans in specific context subclasses.</span><br><span class="line">			&#x2F;&#x2F;初始化其它在子上下文中的特定bean</span><br><span class="line">			onRefresh();(9)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Check for listener beans and register them.</span><br><span class="line">			&#x2F;&#x2F;注册监听器</span><br><span class="line">			registerListeners();(10)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">			&#x2F;&#x2F;实例化所有 lazy-init的bean，以及所有的SmartInitializingSingleton</span><br><span class="line">			finishBeanFactoryInitialization(beanFactory);(11)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Last step: publish corresponding event.</span><br><span class="line">			&#x2F;&#x2F;执行生命周期处理器处理</span><br><span class="line">			finishRefresh();(12)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		catch (BeansException ex) &#123;</span><br><span class="line">			if (logger.isWarnEnabled()) &#123;</span><br><span class="line">				logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">						&quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.</span><br><span class="line">			destroyBeans();</span><br><span class="line">			&#x2F;&#x2F; Reset &#39;active&#39; flag.</span><br><span class="line">			cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Propagate exception to caller.</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		finally &#123;</span><br><span class="line">			&#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we</span><br><span class="line">			&#x2F;&#x2F; might not ever need metadata for singleton beans anymore...</span><br><span class="line">			resetCommonCaches();</span><br><span class="line">			contextRefresh.end();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上<code>refresh()</code>中的方法(1)到方法(12)就是容器初始化的大致流程，下一篇文章将介绍这些方法具体所起的功能。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-循环依赖是如何解决的</title>
    <url>/posts/11f03654/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文将搞清楚三个问题：</p>
<ul>
<li>什么是循环依赖（循环引用）？</li>
<li>是如何解决的？</li>
<li>为什么要使用三级缓存？</li>
</ul>
<h1 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h1><p>循环依赖也被称作循环引用。首先，在了解循环引用之前你应该先清楚Spring加载bean的大体流程。Spring在加载一个bean 时，当从单例池（也就是保存已经实例化且初始化完成的bean Map）中获取引用的bean对象时当该引用的对象不存在时会去加载被引用的bean。举个例子，假设现在有A、B两个类，A中包含属性类型为B的成员对象且B中包含属性类型为A的成员对象。当开始加载A类的bean对象时，会从单例池中获取B类的bean，此时获取出来肯定是null。此时就会去加载A类的bean，此时就形成了一个闭环，A类的bean和B类的bean加载都不能完成，将形成死循环。流程图如下<img src="/posts/11f03654/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="加载时的流程图"></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在Spring中循环引用的解决本质是通过提前暴露bean对象（在堆中已经存在但还未初始化完成）来解决的，Spring在bean的加载中将bean的实例化和bean初始化分开了（属性的赋值放在了初始化中），这样在其它bean创建过程中能提前拿到bean的引用。在这里你可能也就明白了为什么当使用构造器注入时发生循环引用是无法解决的了吧。在Spring中使用了三级缓存来解决循环引用，说明一下，在Spring中并没有三级缓存这个概念，用这个名词是为了好表述以及和网络上的叫法一致不引起歧义，那么三级缓存到底是什么东西呢？</p>
<h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><p>我们在<code>DefaultSingletonBeanRegistry</code>中可以找到三级缓存的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** Cache of singleton objects: bean name to bean instance. *&#x2F;</span><br><span class="line">&#x2F;&#x2F;一级缓存</span><br><span class="line">private final Map&lt;String, Object&gt; singletonObjects &#x3D; new ConcurrentHashMap&lt;&gt;(256);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三级缓存</span><br><span class="line">&#x2F;** Cache of singleton factories: bean name to ObjectFactory. *&#x2F;</span><br><span class="line">private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories &#x3D; new HashMap&lt;&gt;(16);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;二级缓存</span><br><span class="line">&#x2F;** Cache of early singleton objects: bean name to bean instance. *&#x2F;</span><br><span class="line">private final Map&lt;String, Object&gt; earlySingletonObjects &#x3D; new ConcurrentHashMap&lt;&gt;(16);</span><br></pre></td></tr></table></figure>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>单例池，单例对象的缓存，在此map中存放的是已经实例化和初始化完成的bean对象。</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>早期曝光的单例对象，在此map中存放的是已经实例化完成但未初始化完成的bean对象。</p>
<h3 id="三级缓存-1"><a href="#三级缓存-1" class="headerlink" title="三级缓存"></a>三级缓存</h3><p>单例工厂缓存，存放的是bean的工厂对象。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="bean类"><a href="#bean类" class="headerlink" title="bean类"></a>bean类</h3><h4 id="A-java"><a href="#A-java" class="headerlink" title="A.java"></a>A.java</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    private B b;</span><br><span class="line"></span><br><span class="line">    public A() &#123;</span><br><span class="line">        System.out.println(&quot;Class1实例化了一个对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;Class1的对象执行了初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public B getB() &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setB(B b) &#123;</span><br><span class="line">        System.out.println(&quot;设置了属性b&quot;);</span><br><span class="line">        this.b &#x3D; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="B-java"><a href="#B-java" class="headerlink" title="B.java"></a>B.java</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class B &#123;</span><br><span class="line">    private A a;</span><br><span class="line"></span><br><span class="line">    public B() &#123;</span><br><span class="line">        System.out.println(&quot;Class2实例化了一个对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;Class2的实例执行了初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public A getA() &#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setA(A a) &#123;</span><br><span class="line">        System.out.println(&quot;设置了属性a&quot;);</span><br><span class="line">        this.a &#x3D; a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean name&#x3D;&quot;a&quot; class&#x3D;&quot;com.pcy.circular.A&quot; init-method&#x3D;&quot;init&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;b&quot; ref&#x3D;&quot;b&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean name&#x3D;&quot;b&quot; class&#x3D;&quot;com.pcy.circular.B&quot; init-method&#x3D;&quot;init&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;a&quot; ref&#x3D;&quot;a&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><h4 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;Circular.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码讲解"><a href="#源码讲解" class="headerlink" title="源码讲解"></a>源码讲解</h2><p>接下来将从源码的层面来讲Sring是如何解决循环依赖的，通过前面的文章我们知道了加载bean的开始方法是<code>DefaultListableBeanFactory#preInstantiateSingletons()</code>方法，我们在该方法内打上断点，之后进入debug。<img src="/posts/11f03654/1.PNG"><br>跟据调试信息我们可以得知此时需要加载的bean有两个：a和b。之后我们继续debug，进入<code>doGetBean</code>方法，通过调试信息我们可以得知，此时加载的bean的bean名称<img src="/posts/11f03654/2.PNG"><br>我们继续单步执行，进入的下一个方法为<code>getSingleton</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">	&#x2F;&#x2F; Quick check for existing instance without full singleton lock</span><br><span class="line">	&#x2F;&#x2F;从一级缓存中获取单例对象</span><br><span class="line">	Object singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">	&#x2F;&#x2F;单例对象为空且当前对象正在创建中</span><br><span class="line">	if (singletonObject &#x3D;&#x3D; null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">		singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">		if (singletonObject &#x3D;&#x3D; null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">			synchronized (this.singletonObjects) &#123;</span><br><span class="line">				&#x2F;&#x2F; Consistent creation of early reference within full singleton lock</span><br><span class="line">				singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">				if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">					singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">					if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">						ObjectFactory&lt;?&gt; singletonFactory &#x3D; this.singletonFactories.get(beanName);</span><br><span class="line">						if (singletonFactory !&#x3D; null) &#123;</span><br><span class="line">							singletonObject &#x3D; singletonFactory.getObject();</span><br><span class="line">							this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">							this.singletonFactories.remove(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法内，首先从一级缓存中获取加载的单例对象，此时singletonObject是为空且当前对象还没开始创建，所以此时是不会进入第一个if语句的，我们通过debug也确实可以验证我们的推断。<img src="/posts/11f03654/3.PNG"><br>所以该方法的返回值为null，之后我们跳出此方法。之后我们继续debug会发现程序会运行到如下代码处<img src="/posts/11f03654/4.PNG"><br>该方法传入的是一个匿名内部类，我们进入<code>getSingleton</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">	synchronized (this.singletonObjects) &#123;</span><br><span class="line">		Object singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">		if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">			&#x2F;&#x2F;将此bean标记为创建中</span><br><span class="line">			beforeSingletonCreation(beanName);(1)</span><br><span class="line">			boolean newSingleton &#x3D; false;</span><br><span class="line">			boolean recordSuppressedExceptions &#x3D; (this.suppressedExceptions &#x3D;&#x3D; null);</span><br><span class="line">			if (recordSuppressedExceptions) &#123;</span><br><span class="line">				this.suppressedExceptions &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">			&#125;</span><br><span class="line">			try &#123;</span><br><span class="line">				&#x2F;&#x2F;这里调用的是匿名内部类中的方法</span><br><span class="line">				singletonObject &#x3D; singletonFactory.getObject();(2)</span><br><span class="line">				newSingleton &#x3D; true;</span><br><span class="line">			&#125;</span><br><span class="line">			....</span><br><span class="line">			return singletonObject;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中，(1)首先将该bean a标记为正在创建中也就是<code>beforeSingletonCreation</code>方法，(2)之后通过对象工厂获取bean对象，我们在（2）处打上断点进入该方法之后发现会进入传入的匿名内部类中。接着我们进入<code>createBean</code>方法，通过之前的文章我们知道了创建bean的逻辑处理是在<code>doCreateBean</code>方法中，我们在该方法中打上断点并执行。<img src="/posts/11f03654/5.png"><br>通过前面的文章我们知道了的<code>createBeanInstance</code>方法的作用就是通过反射创建该对象（实例化）。该方法执行完成之后我们确实发现A已经实例化完成了，A对象在内存中的地址为2894。bean a实例化完成之后，会创建该bean的对象工厂，并加入到三级缓存当中。<img src="/posts/11f03654/7.png"><br>之后会去填充bean a中的属性值，我们进入<code>populateBean</code>方法。在该方法中主要做了一些准备工作，填充属性值的工作又调用了<code>applyPropertyValues</code>方法，我们再进入该方法。我们通过调试信息可以得知，该bean中现在就一个属性值需要填充就是b<br><img src="/posts/11f03654/9.png"><br>通过debug可以知道程序最终进入了如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object resolvedValue &#x3D; valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br></pre></td></tr></table></figure>
<p>我们打上断点，并进入此方法<img src="/posts/11f03654/10.png"><br>最终该方法又会调用<code>resolveReference</code>方法，我们进入此方法，在此方法中我们看到了一个熟悉的方法<code>getBean</code><img src="/posts/11f03654/11.png"><br>还记得刚才加载bean a时也调用了这个方法了吗？那么此时应该去创建bean b了，流程和前面创建bean a的流程是一致的。所以我们直接在doCreateBean方法中打上断点，并进入此方法。<img src="/posts/11f03654/12.png"><br>当实例化完b之后（b的地址为3029）也会创建b的对象工厂加入三级缓存，之后去填充bean b中的属性a。根据前面的讲解我们可以知道当调用<code>polulateBean</code>方法时最后会调用<code>doGetBean</code>方法，所以我们直接在<code>doGetBean</code>方法中打上断点。<br><img src="/posts/11f03654/13.png"><br>之后会调用<code>getSingleton</code>方法，我们进入此方法。<img src="/posts/11f03654/14.png"><br>还记得之前我们调用<code>doCreateBean</code>方法时已经把a标记为创建中了吗？所以此时程序是能进入到第一个if语句的。我们往下执行。<br><img src="/posts/11f03654/15.png"><br>程序运行的结果也确实如此，singletonObject为null说明此时二级缓存中也没有a的实例。之后的逻辑就比较简单了，先从三级缓存中取出a的对象工厂，之后从工厂中取出bean a，之后再把该对象放到二级缓存当中并把三级缓存中的对象工厂移除。你可以把从工厂中取出的a和前面创建的a的地址比较一下，会发现就是前面创建的a对象<img src="/posts/11f03654/16.png"><br>之后我们一直执行，执行完<code>populateBean</code>方法之后再去看b对象中的a属性。这时候b中的a就已经被赋值了。<img src="/posts/11f03654/17.png"><br>属性值填充完成之后就是对b进行初始化，之后我们在一直执行到<code>getSingleton</code>方法，此时b已经实例化并且初始化完成了，之后所需要的就是将该对象放入到单例池中就ok了。<img src="/posts/11f03654/18.png"><br>至此，b的加载就已经完成了，当a的populateBean完成之后，我们可以debug看下，此时a中的b已经被成功填充了。<img src="/posts/11f03654/19.png"><br>之后就是将a加入到一级缓存中完成a的加载。<img src="/posts/11f03654/20.png"><br>以上a和b的加载就算完成了。</p>
<h1 id="为什么要使用三级缓存"><a href="#为什么要使用三级缓存" class="headerlink" title="为什么要使用三级缓存"></a>为什么要使用三级缓存</h1><p>为什么要使用三级缓存，一级缓存行不行？二级缓存呢？</p>
<h2 id="一级缓存能解决循环依赖吗？"><a href="#一级缓存能解决循环依赖吗？" class="headerlink" title="一级缓存能解决循环依赖吗？"></a>一级缓存能解决循环依赖吗？</h2><p>答案是否定的，首先你得搞清楚一级缓存中放的是啥？一级缓存中存放的是成品对象，如果成品对象和半成品对象同时方法单例池中。那么整个流程假设如下进行<img src="/posts/11f03654/21.png"><br>该流程是没问题的，但这只能满足满足单线程的IOC情况，当在多线程情况下，那么可能拿到半成品A这样的bean是不能被使用的。</p>
<h2 id="二级缓存能解决循环依赖吗？"><a href="#二级缓存能解决循环依赖吗？" class="headerlink" title="二级缓存能解决循环依赖吗？"></a>二级缓存能解决循环依赖吗？</h2><p>答案是在不考虑AOP的情况下，二级缓存是可以解决循环依赖的。如果成品放在一级缓存中，半成品放在二级缓存中。假设整个流程如下进行<img src="/posts/11f03654/22.png"><br>从上面的流程来看确实是没问题的，并且解决了多线程情况下可能取到半成品的问题。这点我们可以看下源码，在实例化完成bean之后会将创建bean的工厂对象并加入三级缓存<img src="/posts/11f03654/23.png"><br>我们进入<code>getEarlyBeanReference</code>方法并在此方法内打上断点<br><img src="/posts/11f03654/24.png"><br>我们可以看到当没有aop时，该方法直接返回了传入的bean。这操作就相当于将bean存入三级缓存，又从三级缓存中取出放入二级缓存，此时三级缓存是没有起任何作用的。在Spring中三级缓存的主要作用就是生成代理对象，所以在不考虑aop的情况下二级缓存是可以解决循环依赖的。那你可能会说：从二级缓存中取bean对象时生成代理对象不就行了吗？这样确实是可行的，但是这样会导致一个问题：在实例化完成之后就必须执行后置处理器（BeanPostProcessor），判断是否有AnnotationAwareAspectJAutoProxyCreator并创建代理对象。那么这样就违背了bean的生命周期的设计初衷了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>循环依赖的解决是通过三级缓存来解决的，一级缓存为单例池(singletonObjects)，二级缓存为提前曝光的对象(earlySingletonObjects)，三级缓存为对象工厂(singletonFactories)。使用三级缓存是为了满足AOP功能的，当有AOP时通过三级缓存获取到的就是生成的代理对象，当不存在AOP时，通过三级缓存获取到的就是实例化后的对象。</p>
]]></content>
      <tags>
        <tag>bean加载</tag>
        <tag>循环依赖</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring异步（@Async）源码解析</title>
    <url>/posts/c2c8cd86/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>用过Spring的应该都知道，在Spring中你只需要使用@Async和@EnableAsyc这两个注解就能完成方法的异步调用。那当使用这两个注解的时候，Spring到底做了些什么可以让我们的方法调用编程异步方法调用呢？本篇文章将带你探索其中的奥秘。</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="MyService-java"><a href="#MyService-java" class="headerlink" title="MyService.java"></a>MyService.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Async</span><br><span class="line">public interface MyService &#123;</span><br><span class="line">    void hello(String name);</span><br><span class="line">    ListenableFuture&lt;String&gt; hello1(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyServiceImpl-java"><a href="#MyServiceImpl-java" class="headerlink" title="MyServiceImpl.java"></a>MyServiceImpl.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MyServiceImpl implements MyService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void hello(String name) &#123;</span><br><span class="line">        if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;name cannot be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;hello &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ListenableFuture&lt;String&gt; hello1(String name) &#123;</span><br><span class="line">        if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;name cannot be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return new AsyncResult&lt;&gt;(&quot;hello &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AppConfig-java"><a href="#AppConfig-java" class="headerlink" title="AppConfig.java"></a>AppConfig.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAsync</span><br><span class="line">@ComponentScan(value &#x3D; &quot;threadpool&quot;)</span><br><span class="line">public class AppConfig implements AsyncConfigurer &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public Executor getAsyncExecutor() &#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor &#x3D; new ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(7);</span><br><span class="line">        executor.setMaxPoolSize(42);</span><br><span class="line">        executor.setQueueCapacity(11);</span><br><span class="line">        executor.setThreadNamePrefix(&quot;MyExecutor-&quot;);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        return executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123;</span><br><span class="line">        return new MyAsyncUncaughtExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyAsyncUncaughtExceptionHandler-java"><a href="#MyAsyncUncaughtExceptionHandler-java" class="headerlink" title="MyAsyncUncaughtExceptionHandler.java"></a>MyAsyncUncaughtExceptionHandler.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyAsyncUncaughtExceptionHandler implements AsyncUncaughtExceptionHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleUncaughtException(Throwable ex, Method method, Object... params) &#123;</span><br><span class="line">        System.out.println(&quot;Exception occurs in async method ： &quot;+ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        MyService bean &#x3D; context.getBean(MyService.class);</span><br><span class="line">        bean.hello(&quot;yuege&quot;);</span><br><span class="line">        bean.hello(null);</span><br><span class="line">        Future future &#x3D; bean.hello1(&quot;悦哥&quot;);</span><br><span class="line">        Future future1 &#x3D; bean.hello1(null);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        System.out.println(future1.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="EnableAsync"><a href="#EnableAsync" class="headerlink" title="@EnableAsync"></a>@EnableAsync</h2><p>当我们使用了<code>@EnableAsync</code>的时候，Spring到底做了一些什么工作呢？我们打开该注解类。<img src="/posts/c2c8cd86/1.png"><br>可以看到使用该注解的时候会去引入另一个类<code>AsyncConfigurationSelector</code>，在该类中有一个selectImports方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">	switch (adviceMode) &#123;</span><br><span class="line">		case PROXY:</span><br><span class="line">			return new String[] &#123;ProxyAsyncConfiguration.class.getName()&#125;;</span><br><span class="line">		case ASPECTJ:</span><br><span class="line">			return new String[] &#123;ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class="line">		default:</span><br><span class="line">			return null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到Spring会根据通知的模式来选择代理的方式，主要分为动态代理和静态代理。看到这你可能也就知道了，Spring异步功能的实现就是通过aop来实现的。我们打开<code>ProxyAsyncConfiguration</code>类的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods &#x3D; false)</span><br><span class="line">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">public class ProxyAsyncConfiguration extends AbstractAsyncConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 注入AsyncAnnotationBeanPostProcessor到容器中</span><br><span class="line">	 * @return</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@Bean(name &#x3D; TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class="line">	@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">	public AsyncAnnotationBeanPostProcessor asyncAdvisor() &#123;</span><br><span class="line">		Assert.notNull(this.enableAsync, &quot;@EnableAsync annotation metadata was not injected&quot;);</span><br><span class="line">		AsyncAnnotationBeanPostProcessor bpp &#x3D; new AsyncAnnotationBeanPostProcessor();</span><br><span class="line">		bpp.configure(this.executor, this.exceptionHandler);</span><br><span class="line">		Class&lt;? extends Annotation&gt; customAsyncAnnotation &#x3D; this.enableAsync.getClass(&quot;annotation&quot;);</span><br><span class="line">		if (customAsyncAnnotation !&#x3D; AnnotationUtils.getDefaultValue(EnableAsync.class, &quot;annotation&quot;)) &#123;</span><br><span class="line">			bpp.setAsyncAnnotationType(customAsyncAnnotation);</span><br><span class="line">		&#125;</span><br><span class="line">		bpp.setProxyTargetClass(this.enableAsync.getBoolean(&quot;proxyTargetClass&quot;));</span><br><span class="line">		bpp.setOrder(this.enableAsync.&lt;Integer&gt;getNumber(&quot;order&quot;));</span><br><span class="line">		return bpp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该配置类中向容器中注入了一个<code>AsyncAnnotationBeanPostProcessor</code>，看下该类的结构图。<img src="/posts/c2c8cd86/2.png"><br>我在该类结构图中标注了两个比较重要的接口，<code>BeanFactoryAware</code>和<code>BeanPostProcessor</code>。在bean的生命周期中会对这两个接口中的方法进行调用，如果对这流程不清楚的话可以看下我这片文章<a href="../9483b875">Spring学习-bean的生命周期</a>。在<code>AsyncAnnotationBeanPostProcessor</code>中对<code>BeanFactoryAware#setBeanFactory()</code>方法进行了实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void setBeanFactory(BeanFactory beanFactory) &#123;</span><br><span class="line">	super.setBeanFactory(beanFactory);</span><br><span class="line">	AsyncAnnotationAdvisor advisor &#x3D; new AsyncAnnotationAdvisor(this.executor, this.exceptionHandler);</span><br><span class="line">	if (this.asyncAnnotationType !&#x3D; null) &#123;</span><br><span class="line">		advisor.setAsyncAnnotationType(this.asyncAnnotationType);</span><br><span class="line">	&#125;</span><br><span class="line">	advisor.setBeanFactory(beanFactory);</span><br><span class="line">	this.advisor &#x3D; advisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法中注册了一个<code>AsyncAnnotationAdvisor</code>，在调用被代理的方法时获取拦截器链的时候会用到该Advisor。<br>通过以上分析我们大概了解了当使用了<code>@EnableAsync</code>之后Spring主要做了两件事情：</p>
<ul>
<li>注册了<code>AsyncAnnotationBeanPostProcessor</code></li>
<li>注册了<code>AsyncAnnotationAdvisor</code></li>
</ul>
<h2 id="代理类的生成"><a href="#代理类的生成" class="headerlink" title="代理类的生成"></a>代理类的生成</h2><p>通过前面的文章你可能已经知道了，代理类的生成是在<code>BeanPostProcessor#postProcessorBeforeInitialization（）</code>中，所以我们直接在<code>AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization()</code>方法中打上断点，然后进入debug模式。<img src="/posts/c2c8cd86/3.png"><br><code>AsyncAnnotationBeanPostProcessor</code>的父类<code>AbstractAdvisingBeanPostProcessor</code>对<code>postProcessAfterInitialization</code>方法进行了实现，我们在该方法内打上断点，然后运行至断点处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(Object bean, String beanName) &#123;</span><br><span class="line">	&#x2F;&#x2F;如果不存在Advisor或者该bean是AopInfrastructureBean类型那么不生成代理类</span><br><span class="line">	if (this.advisor &#x3D;&#x3D; null || bean instanceof AopInfrastructureBean) &#123;</span><br><span class="line">		&#x2F;&#x2F; Ignore AOP infrastructure such as scoped proxies.</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;如果该bean是Advised类型的也不生成代理类</span><br><span class="line">	if (bean instanceof Advised) &#123;</span><br><span class="line">		Advised advised &#x3D; (Advised) bean;</span><br><span class="line">			if (!advised.isFrozen() &amp;&amp; isEligible(AopUtils.getTargetClass(bean))) &#123;</span><br><span class="line">			&#x2F;&#x2F; Add our local Advisor to the existing proxy&#39;s Advisor chain...</span><br><span class="line">			if (this.beforeExistingAdvisors) &#123;</span><br><span class="line">				advised.addAdvisor(0, this.advisor);</span><br><span class="line">			&#125;</span><br><span class="line">		else &#123;	</span><br><span class="line">			advised.addAdvisor(this.advisor);</span><br><span class="line">			&#125;</span><br><span class="line">			return bean;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	if (isEligible(bean, beanName)) &#123;</span><br><span class="line">		ProxyFactory proxyFactory &#x3D; prepareProxyFactory(bean, beanName);</span><br><span class="line">		if (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">			evaluateProxyInterfaces(bean.getClass(), proxyFactory);</span><br><span class="line">		&#125;</span><br><span class="line">		proxyFactory.addAdvisor(this.advisor);</span><br><span class="line">		customizeProxyFactory(proxyFactory);</span><br><span class="line">		return proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; No proxy needed.</span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中先是做了一下校验，如果advisor为空或者该bean是AopInfrastructureBean类型的类那么则不去生成代理类。然后又判断了该bean是否是Advised类型，如果是那么也不去生成代理类。然后又判断了当前bean是否合适，在当前情况下其实就是去判断bean中是否有@Async注解。<img src="/posts/c2c8cd86/4.png"><br>之后就是创建代理工厂，将当前的Advisor添加到工厂中，然后通过工厂创建代理对象。这样Spring就完成了代理类的生成了。</p>
<h2 id="异步方法的调用"><a href="#异步方法的调用" class="headerlink" title="异步方法的调用"></a>异步方法的调用</h2><p>我们在下面这行代码上打上断点。<img src="/posts/c2c8cd86/6.png"><br>然后F7进入此方法中。在前面的文章中我们已经讲过了，在执行代理方法的时候会去获取拦截器链。在前面已经对此过程讲解过了，所以这里我们只关注拦截器链中的内容。<img src="/posts/c2c8cd86/7.png"><br>可以看到当前拦截器链中就一个拦截器，拦截器的类型为<code>AnnotationAsyncExecutionInterceptor</code>。我们看下该类的结构图<img src="/posts/c2c8cd86/8.png"><br>通过前面的文章我们知道了，在调用拦截器链的时候，会去调用<code>MethodInterceptor#invoke()</code>方法，<code>AnnotationAsyncExecutionInterceptor</code>在其父类<code>AsyncExecutinInterceptor</code>中对invoke方法进行了实现。我们看下该方法内容的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(final MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">	Class&lt;?&gt; targetClass &#x3D; (invocation.getThis() !&#x3D; null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line">	Method specificMethod &#x3D; ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass);</span><br><span class="line">	final Method userDeclaredMethod &#x3D; BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class="line"></span><br><span class="line">	AsyncTaskExecutor executor &#x3D; determineAsyncExecutor(userDeclaredMethod);(1)</span><br><span class="line">	if (executor &#x3D;&#x3D; null) &#123;</span><br><span class="line">		throw new IllegalStateException(</span><br><span class="line">				&quot;No executor specified and no default executor set on AsyncExecutionInterceptor either&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Callable&lt;Object&gt; task &#x3D; () -&gt; &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			Object result &#x3D; invocation.proceed();</span><br><span class="line">			if (result instanceof Future) &#123;</span><br><span class="line">				return ((Future&lt;?&gt;) result).get();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		catch (ExecutionException ex) &#123;</span><br><span class="line">			handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Throwable ex) &#123;</span><br><span class="line">			handleError(ex, userDeclaredMethod, invocation.getArguments());</span><br><span class="line">		&#125;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;;(2)</span><br><span class="line">	return doSubmit(task, executor, invocation.getMethod().getReturnType());(2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>获取异步任务执行器</li>
<li>创建任务</li>
<li>提交任务</li>
</ul>
<h3 id="获取异步执行器"><a href="#获取异步执行器" class="headerlink" title="获取异步执行器"></a>获取异步执行器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected AsyncTaskExecutor determineAsyncExecutor(Method method) &#123;</span><br><span class="line">	AsyncTaskExecutor executor &#x3D; this.executors.get(method);</span><br><span class="line">	if (executor &#x3D;&#x3D; null) &#123;</span><br><span class="line">		Executor targetExecutor;</span><br><span class="line">		String qualifier &#x3D; getExecutorQualifier(method);</span><br><span class="line">		&#x2F;&#x2F;如果用户定义了Executor则使用用户自定义的，用户没有定义则使用默认的Executor</span><br><span class="line">		if (StringUtils.hasLength(qualifier)) &#123;</span><br><span class="line">			targetExecutor &#x3D; findQualifiedExecutor(this.beanFactory, qualifier);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			targetExecutor &#x3D; this.defaultExecutor.get();</span><br><span class="line">		&#125;</span><br><span class="line">		if (targetExecutor &#x3D;&#x3D; null) &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">		executor &#x3D; (targetExecutor instanceof AsyncListenableTaskExecutor ?</span><br><span class="line">				(AsyncListenableTaskExecutor) targetExecutor : new TaskExecutorAdapter(targetExecutor));</span><br><span class="line">		this.executors.put(method, executor);</span><br><span class="line">	&#125;</span><br><span class="line">	return executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里其实就是去判断了用户是否定义的异步执行器，如果用户定义了就使用用户定义的异步执行器去，没有定义则使用默认的。</p>
<h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Callable&lt;Object&gt; task &#x3D; () -&gt; &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		Object result &#x3D; invocation.proceed();</span><br><span class="line">		if (result instanceof Future) &#123;</span><br><span class="line">			return ((Future&lt;?&gt;) result).get();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (ExecutionException ex) &#123;</span><br><span class="line">		handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Throwable ex) &#123;</span><br><span class="line">		handleError(ex, userDeclaredMethod, invocation.getArguments());</span><br><span class="line">	&#125;</span><br><span class="line">	return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object doSubmit(Callable&lt;Object&gt; task, AsyncTaskExecutor executor, Class&lt;?&gt; returnType) &#123;</span><br><span class="line">	if (CompletableFuture.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">		return CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				return task.call();</span><br><span class="line">			&#125;</span><br><span class="line">			catch (Throwable ex) &#123;</span><br><span class="line">				throw new CompletionException(ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, executor);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (ListenableFuture.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">		return ((AsyncListenableTaskExecutor) executor).submitListenable(task);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (Future.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">		return executor.submit(task);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		executor.submit(task);</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提交任务的时候主要是根据返回值的类型来提交任务到线程池中。</p>
<h2 id="异步方法的异常处理"><a href="#异步方法的异常处理" class="headerlink" title="异步方法的异常处理"></a>异步方法的异常处理</h2><p>从上面的方法中可以看到当产生了异常之后，会调用handleError方法来处理异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void handleError(Throwable ex, Method method, Object... params) throws Exception &#123;</span><br><span class="line">	&#x2F;&#x2F;返回值类型为Future</span><br><span class="line">	if (Future.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">		ReflectionUtils.rethrowException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;返回值类型为非Future</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; Could not transmit the exception to the caller with default executor</span><br><span class="line">		try &#123;</span><br><span class="line">			this.exceptionHandler.obtain().handleUncaughtException(ex, method, params);</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Throwable ex2) &#123;</span><br><span class="line">			logger.warn(&quot;Exception handler for async method &#39;&quot; + method.toGenericString() +</span><br><span class="line">					&quot;&#39; threw unexpected exception itself&quot;, ex2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法内首先对方法进行判断，判断方法的返回值是否是Future类型，如果是Future类型的话，则重新抛出异常。如果是非Future类型，会先去获取异步异常处理器。<img src="/posts/c2c8cd86/9.png"><br>可以看到该异常处理器的类型为<code>AsyncUncaughtExceptionHandler</code>，也就是如果我们需要去处理这些异常的话只需要定义一个bean并去实现该接口就行了。然后当异常产生之后，Spirng就会去调用handleUncaughtException方法来通知程序通知产生了异常。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Spring中方法的异步调用是基于aop实现的，在使用<code>@EnableAsync</code>注解之后，会注册<code>AsyncAnnotationBeanPostProcessor</code>到容器中，当加载该BeanPostProcessor时会初始化对应的Advisor（执行BeanFactoryAware）。在调用被代理方法（异步方法）时会创建一个Callable对象并将MethodInvocation传入，然后提交该异步任务。在发生异常时会根据返回值的类型是否为Future来处理，如果是Future类型则重新抛出异常。如果不是Future类型，则通过<code>AsyncUncaughtExceptionHandler</code>来通知程序。</p>
]]></content>
      <tags>
        <tag>Spring、动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>java代理-JDK动态代理</title>
    <url>/posts/8eeb963a/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在本篇文章中将带你搞明白如下几个问题：</p>
<ul>
<li>什么是代理模式？</li>
<li>代理模式的应用场景有哪些？</li>
<li>java为什么支持动态代理？</li>
<li>JDK动态代理是如何实现？</li>
</ul>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>定义：代理模式给某一个对象提供一个代理对象，并由代理对象控制着对原对象的引用。通俗的来说代理起着中介的作用，通常代理模式的结构图如下图所示。<img src="/posts/8eeb963a/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84.png"></p>
<h2 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h2><p>接口：也就是抽象角色，通过接口或抽象类声明真实角色实现的业务方法。<br>代理类：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑来实现抽象方法，并可以附加自己的操作。<br>委托类：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</p>
<h2 id="为什么要使用代理模式？"><a href="#为什么要使用代理模式？" class="headerlink" title="为什么要使用代理模式？"></a>为什么要使用代理模式？</h2><ul>
<li>职责清晰，真实的角色就只是实现实际的业务逻辑，不用关心其它非本职责的事情，通过后期代理完成其它事情。</li>
<li>代理对象可以在客户端和目标对象之间起到中介的作用，起到保护目标对象的作用。</li>
<li>高扩展性。</li>
</ul>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><strong>代理对象和真正的对象实现同一个接口</strong>，先访问代理类再访问真正要访问的对象。</p>
<h2 id="代理模式类别"><a href="#代理模式类别" class="headerlink" title="代理模式类别"></a>代理模式类别</h2><p>代理模式按照代理创建的时期的话分为静态代理和动态代理。</p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是由程序员创建或工具生成代理类源码，再编译代理类。在程序运行之前就已经存在代理类的字节码文件了，代理类和委托类的关系在运行前就确定了。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是在实现阶段不用关心代理类，而在运行阶段才指定真正的代理对象。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>Java注解对象获取、日志、用户鉴权、Spring AOP、事务处理等等。</p>
<h1 id="java为什么支持动态代理"><a href="#java为什么支持动态代理" class="headerlink" title="java为什么支持动态代理"></a>java为什么支持动态代理</h1><p>Java虚拟机加载类可分为五个阶段：加载、验证、准备、解析、初始化，其中加载阶段主要完成一下三件事情：</p>
<ul>
<li>通过一个类的全限定名类获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区运行时数据结构。</li>
<li>在内存中生成一个代表此类的Class对象。</li>
</ul>
<p>在虚拟机规范中并没有以上三点的具体实现要求，可以由虚拟机灵活实现，关于加载此类的二进制字节流就有很多途径：</p>
<ul>
<li>从ZIP包获取。</li>
<li>从网络中获取。</li>
<li>运行时生成，这种场景的代表就有动态代理技术。</li>
</ul>
<h1 id="JDK的动态代理是如何实现的"><a href="#JDK的动态代理是如何实现的" class="headerlink" title="JDK的动态代理是如何实现的"></a>JDK的动态代理是如何实现的</h1><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    void sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="委托类"><a href="#委托类" class="headerlink" title="委托类"></a>委托类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public MyInvocationHandler(Object target) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.target &#x3D; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;-----before invoke-----&quot;);</span><br><span class="line">        Object result &#x3D; method.invoke(target, args);</span><br><span class="line">        System.out.println(&quot;-----after invoke-----&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取代理对象</span><br><span class="line">    public Object getProxy()&#123;</span><br><span class="line">        return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;保存生成的代理类</span><br><span class="line">        System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br><span class="line">        UserService userService &#x3D; new UserServiceImpl();</span><br><span class="line">        MyInvocationHandler invocationHandler &#x3D; new MyInvocationHandler(userService);</span><br><span class="line">        UserService proxy &#x3D; (UserService) invocationHandler.getProxy();</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InvocationHandler和Proxy"><a href="#InvocationHandler和Proxy" class="headerlink" title="InvocationHandler和Proxy"></a>InvocationHandler和Proxy</h2><p>JDK动态代理中有一个非常重要的接口是InvocationHandler以及用于创建代理对象的Proxy类。</p>
<h3 id="InvocationHandler-1"><a href="#InvocationHandler-1" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h3><p>从源码中该类的描述我们可以知道，每一个代理示例都有一个相关联的调用处理器（handler）。当在一个方法在代理实例中被调用时，该方法调用被编码并分配给与该代理实例相关联的这个调用处理器方法。<br><img src="/posts/8eeb963a/1.png"><br>简单来说就是当调用代理类中的方法时，该方法调用会被分派给InvocationHandler中的invoke方法中去。</p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>在该类中有几个比较重要的方法：</p>
<ul>
<li>getInvocationHandler：用于获取指定代理对象所关联的调用处理器。</li>
<li>getProxyClass：返回指定接口的代理类。</li>
<li>newProxyInstance：构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的invoke方法。</li>
<li>isProxyClass：判断该Class对应的类是否时一个代理类。<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="代理类生成"><a href="#代理类生成" class="headerlink" title="代理类生成"></a>代理类生成</h3>我们进入<code>newProxyInstance</code>方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static Object newProxyInstance(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                          InvocationHandler h)</span><br><span class="line">        throws IllegalArgumentException</span><br><span class="line">    &#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;克隆委托类的所有接口</span><br><span class="line">    final Class&lt;?&gt;[] intfs &#x3D; interfaces.clone();</span><br><span class="line">    final SecurityManager sm &#x3D; System.getSecurityManager();</span><br><span class="line">    if (sm !&#x3D; null) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * Look up or generate the designated proxy class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">	&#x2F;&#x2F;查找或生成指定的代理类</span><br><span class="line">    Class&lt;?&gt; cl &#x3D; getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * Invoke its constructor with the designated invocation handler.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (sm !&#x3D; null) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取代理类的构造器</span><br><span class="line">        final Constructor&lt;?&gt; cons &#x3D; cl.getConstructor(constructorParams);</span><br><span class="line">        final InvocationHandler ih &#x3D; h;</span><br><span class="line">        if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                public Void run() &#123;</span><br><span class="line">                    cons.setAccessible(true);</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">		&#x2F;&#x2F;通过反射创建实例</span><br><span class="line">        return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class="line">    &#125; catch (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        throw new InternalError(e.toString(), e);</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t &#x3D; e.getCause();</span><br><span class="line">        if (t instanceof RuntimeException) &#123;</span><br><span class="line">            throw (RuntimeException) t;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        throw new InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在该方法中主要做了以下事情：</li>
<li>克隆委托类的所有接口，前面提到过：代理类和委托类实现同一个接口。</li>
<li>生成代理类的Class对象，也就是类加载的加载过程。</li>
<li>根据Class对象获取代理类的构造器，构造器的参数类型为InvocationHandler。</li>
<li>通过反射创建代理对象。</li>
</ul>
<p>那么生成的代理对象到底是什么样的呢？在main方法中添加如下代码保存生成的代理对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>
<p>生成的代理对象如下（省略了toString等方法）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class $Proxy0 extends Proxy implements UserService &#123;</span><br><span class="line">    private static Method m1;</span><br><span class="line">    private static Method m3;</span><br><span class="line">    private static Method m2;</span><br><span class="line">    private static Method m0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将代理类和InvocationHandler关联起来</span><br><span class="line">    public $Proxy0(InvocationHandler var1) throws  &#123;</span><br><span class="line">        super(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public final void sayHello() throws  &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            super.h.invoke(this, m3, (Object[])null);</span><br><span class="line">        &#125; catch (RuntimeException | Error var2) &#123;</span><br><span class="line">            throw var2;</span><br><span class="line">        &#125; catch (Throwable var3) &#123;</span><br><span class="line">            throw new UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            m1 &#x3D; Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, Class.forName(&quot;java.lang.Object&quot;));</span><br><span class="line">            m3 &#x3D; Class.forName(&quot;com.pcy.proxytest.UserService&quot;).getMethod(&quot;sayHello&quot;);</span><br><span class="line">            m2 &#x3D; Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;);</span><br><span class="line">            m0 &#x3D; Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;);</span><br><span class="line">        &#125; catch (NoSuchMethodException var2) &#123;</span><br><span class="line">            throw new NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; catch (ClassNotFoundException var3) &#123;</span><br><span class="line">            throw new NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的代理类继承自Proxy类以及实现了UserService接口，这里也验证了代理类和委托类实现相同的接口。通过源码可以知道当调用<code>cons.newInstance(new Object[]&#123;h&#125;)</code>时会执行上面生成的代理类的构造函数，在该方法中又去调用了父类的构造函数，跳转到父类的构造方法中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Proxy(InvocationHandler h) &#123;</span><br><span class="line">     Objects.requireNonNull(h);</span><br><span class="line">     this.h &#x3D; h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中就做了一件事：将将代理类与传入的InvocationHandler关联起来。</p>
<h3 id="调用代理方法"><a href="#调用代理方法" class="headerlink" title="调用代理方法"></a>调用代理方法</h3><p>调用的过程就比较简单了，当调用代理方法<code>sayHello</code>时，会去调用父类方法中的<code>InvocationHandler#invoke()</code>方法即参数传入的InvocationHandler。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
        <tag>proxy</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>java程序CPU飙升原因排查</title>
    <url>/posts/1f7f11ae/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>如果你发现你的程序部署到服务器之后，服务器CPU使用率奇高，这种情况该怎么解决呢？要解决这个问题必须要能定位到程序中的目标代码，在jdk中jvm开发团队为我们提供了jstack工具，通过该工具我们能得到java程序的java调用栈信息和native调用栈信息。所以我们要解决的问题就是定位到CPU使用率高的线程就能定位到问题代码了。</p>
<h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><p>首先需要做的就是通过top命令查找出cpu使用率高的进程。<img src="/posts/1f7f11ae/2.png"><br>通过该命令我们确定问题线程为29673，我们确定一下到底是哪个线程的CPU使用率高，该目的是为了后面筛选打印的日志，只通过进程号也能解决该问题。</p>
<h1 id="确定问题线程"><a href="#确定问题线程" class="headerlink" title="确定问题线程"></a>确定问题线程</h1><p>找到CPU使用率高的进程可以使用如下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -mp 进程号 -o THREAD,tid,time | sort -rn</span><br></pre></td></tr></table></figure>
<p><img src="/posts/1f7f11ae/3.png"><br>可以得知是线程ID为29683的线程导致的CPU使用率高，在jstack中线程ID是用的16进制形式，可以通过如下命令将十进制转为十六进制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf &quot;%x\n&quot; 线程ID</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost home]# printf &quot;%x\n&quot; 29683</span><br><span class="line">73f3</span><br></pre></td></tr></table></figure>
<h1 id="jstack确定目标代码"><a href="#jstack确定目标代码" class="headerlink" title="jstack确定目标代码"></a>jstack确定目标代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstack 进程ID|grep 线程ID -A 30</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost home]# jstack 29673|grep 73f3 -A 30</span><br><span class="line">&quot;Thread-1&quot; #10 prio&#x3D;5 os_prio&#x3D;0 tid&#x3D;0x00007f1964873000 nid&#x3D;0x73f3 runnable [0x00007f1951479000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at com.pcy.demo.component.MyService.run(MyService.java:18)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">&quot;Service Thread&quot; #7 daemon prio&#x3D;9 os_prio&#x3D;0 tid&#x3D;0x00007f1964141800 nid&#x3D;0x73f1 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br></pre></td></tr></table></figure>
<p>可以看到这定位到了我们的目标代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyService implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            int a &#x3D; 1;</span><br><span class="line">            int b&#x3D; 2;</span><br><span class="line">            int c &#x3D; a+b*a*b+a+b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到确实是我们在这里的代码产生的死循环导致的CPU使用率高。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>解决CPU使用率高最终就是要确定导致CPU使用率高的目标代码，然后分析目标代码来解决问题。解决该问题的思路是：</p>
<ul>
<li>先确定是哪个进程CPU使用率高。</li>
<li>再确定进程中的哪个线程CPU使用率高。</li>
<li>最后通过jstack来确定目标代码。</li>
</ul>
]]></content>
      <tags>
        <tag>jstack</tag>
      </tags>
  </entry>
  <entry>
    <title>java线程池异常处理机制</title>
    <url>/posts/e9f911f5/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java线程池的使用是非常简单的，我们在使用线程池的时候往往只会去关注我们提交到线程池的任务代码，对于异常处理我们往往不会去关注，提交到线程池的任务产生异常之后会对线程池产生什么样的影响。这些问题只有在你阅读过相关源码之后我想才能搞清楚了吧。本篇文章将带你搞清楚使用线程池时对于异常应该怎样处理以及为什么要这样处理。</p>
<h1 id="Thread异常处理"><a href="#Thread异常处理" class="headerlink" title="Thread异常处理"></a>Thread异常处理</h1><p>在Thread类中定义了下面两个变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; null unless explicitly set</span><br><span class="line">private volatile UncaughtExceptionHandler uncaughtExceptionHandler;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; null unless explicitly set</span><br><span class="line">private static volatile UncaughtExceptionHandler defaultUncaughtExceptionHandler;</span><br></pre></td></tr></table></figure>
<p>UncaughtExceptionHandler是一个接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Interface for handlers invoked when a &lt;tt&gt;Thread&lt;&#x2F;tt&gt; abruptly</span><br><span class="line"> * terminates due to an uncaught exception.</span><br><span class="line"> * &lt;p&gt;When a thread is about to terminate due to an uncaught exception</span><br><span class="line"> * the Java Virtual Machine will query the thread for its</span><br><span class="line"> * &lt;tt&gt;UncaughtExceptionHandler&lt;&#x2F;tt&gt; using</span><br><span class="line"> * &#123;@link #getUncaughtExceptionHandler&#125; and will invoke the handler&#39;s</span><br><span class="line"> * &lt;tt&gt;uncaughtException&lt;&#x2F;tt&gt; method, passing the thread and the</span><br><span class="line"> * exception as arguments.</span><br><span class="line"> * If a thread has not had its &lt;tt&gt;UncaughtExceptionHandler&lt;&#x2F;tt&gt;</span><br><span class="line"> * explicitly set, then its &lt;tt&gt;ThreadGroup&lt;&#x2F;tt&gt; object acts as its</span><br><span class="line"> * &lt;tt&gt;UncaughtExceptionHandler&lt;&#x2F;tt&gt;. If the &lt;tt&gt;ThreadGroup&lt;&#x2F;tt&gt; object</span><br><span class="line"> * has no</span><br><span class="line"> * special requirements for dealing with the exception, it can forward</span><br><span class="line"> * the invocation to the &#123;@linkplain #getDefaultUncaughtExceptionHandler</span><br><span class="line"> * default uncaught exception handler&#125;.</span><br><span class="line"> *</span><br><span class="line"> * @see #setDefaultUncaughtExceptionHandler</span><br><span class="line"> * @see #setUncaughtExceptionHandler</span><br><span class="line"> * @see ThreadGroup#uncaughtException</span><br><span class="line"> * @since 1.5</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<p>这是该接口的注释信息，通过该注释信息我们可以知道该接口用于处理调用线程过程中由于某种不能捕获的异常而导致线程突然停止，在线程发生异常之后，Java虚拟机会去调用Thread.getUncaughtExceptionHandler方法来获取无法捕获异常处理器，然后去调用<code>UncaughtExceptionHandler#uncaughtException</code>方法。如果当前线程没有自己的UncaughtExceptionHandler，则使用自己线程组对象的UncaughtExceptionHandler。如果线程组对象也没有UncaughtExceptionHandler，那么则去调用<code>Thread#getDefaultUncaughtExceptionHandler</code>方法来处理此异常。<br>所以想要在线程产生之后得到一个通知，可以使用如下方法来完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread thread &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">    Object object &#x3D; null;</span><br><span class="line">    System.out.println(object.toString());</span><br><span class="line">&#125;);</span><br><span class="line">thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class="line">        System.out.println(&quot;产生异常了，异常原因：&quot; + e.getCause());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>
<p>当然你也可以使用ThreadGroup或设置默认的UncaughtExceptionHandler来实现相同的目的。</p>
<h1 id="Java线程池的异常处理"><a href="#Java线程池的异常处理" class="headerlink" title="Java线程池的异常处理"></a>Java线程池的异常处理</h1><p>在使用线程池的时候我们有两种提交任务的方式:execute和submit两种方式。在线程池中对于这两种提交的任务的处理是不相同的。</p>
<h2 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void execute(Runnable command) &#123;</span><br><span class="line">    if (command &#x3D;&#x3D; null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    int c &#x3D; ctl.get();</span><br><span class="line">    &#x2F;&#x2F;当前线程池中的线程数小于corePoolSize</span><br><span class="line">    if (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        if (addWorker(command, true))</span><br><span class="line">            return;</span><br><span class="line">        c &#x3D; ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;线程池的状态为运行中且将任务加入阻塞队列成功</span><br><span class="line">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        &#x2F;&#x2F;进行double check</span><br><span class="line">        int recheck &#x3D; ctl.get();</span><br><span class="line">        &#x2F;&#x2F;如果线程池的运行状态不为运行中则将该任务从阻塞队列中移除</span><br><span class="line">        if (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        &#x2F;&#x2F;如果线程池中没有线程则运行则添加一个Worker来执行此任务</span><br><span class="line">        else if (workerCountOf(recheck) &#x3D;&#x3D; 0)</span><br><span class="line">            addWorker(null, false);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;线程池停止运行或者阻塞队列已满则拒绝此任务</span><br><span class="line">    else if (!addWorker(command, false))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Java线程池中将运行任务的线程封装成了Worker，在该方法中逻辑还是很清晰的。首先判断正在工作的Worker数量是否小于核心线程数，是的话直接创建一个Worker来运行此任务。大于核心线程数且阻塞队列还没满的情况下将该任务添加到阻塞队列中等待Worker来执行，如果线程池已经被关闭或者阻塞队列已满的情况下直接拒绝此任务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private boolean addWorker(Runnable firstTask, boolean core) &#123;</span><br><span class="line">    retry:</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int c &#x3D; ctl.get();</span><br><span class="line">        int rs &#x3D; runStateOf(c);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Check if queue empty only if necessary.</span><br><span class="line">        &#x2F;&#x2F;对线程池进行检查如果不能添加任务直接返回false</span><br><span class="line">        if (rs &gt;&#x3D; SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs &#x3D;&#x3D; SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask &#x3D;&#x3D; null &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            return false;</span><br><span class="line">        &#x2F;&#x2F;尝试CAS更新Worker数量，直到成功</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            int wc &#x3D; workerCountOf(c);</span><br><span class="line">            if (wc &gt;&#x3D; CAPACITY ||</span><br><span class="line">                wc &gt;&#x3D; (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                return false;</span><br><span class="line">            if (compareAndIncrementWorkerCount(c))</span><br><span class="line">                break retry;</span><br><span class="line">            c &#x3D; ctl.get();  &#x2F;&#x2F; Re-read ctl</span><br><span class="line">            if (runStateOf(c) !&#x3D; rs)</span><br><span class="line">                continue retry;</span><br><span class="line">            &#x2F;&#x2F; else CAS failed due to workerCount change; retry inner loop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean workerStarted &#x3D; false;</span><br><span class="line">    boolean workerAdded &#x3D; false;</span><br><span class="line">    Worker w &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        w &#x3D; new Worker(firstTask);</span><br><span class="line">        final Thread t &#x3D; w.thread;</span><br><span class="line">        if (t !&#x3D; null) &#123;</span><br><span class="line">            final ReentrantLock mainLock &#x3D; this.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; Recheck while holding lock.</span><br><span class="line">                &#x2F;&#x2F; Back out on ThreadFactory failure or if</span><br><span class="line">                &#x2F;&#x2F; shut down before lock acquired.</span><br><span class="line">                int rs &#x3D; runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                if (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs &#x3D;&#x3D; SHUTDOWN &amp;&amp; firstTask &#x3D;&#x3D; null)) &#123;</span><br><span class="line">                    if (t.isAlive()) &#x2F;&#x2F; precheck that t is startable</span><br><span class="line">                        throw new IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    int s &#x3D; workers.size();</span><br><span class="line">                    if (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize &#x3D; s;</span><br><span class="line">                    workerAdded &#x3D; true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            if (workerAdded) &#123;</span><br><span class="line">                &#x2F;&#x2F;启动Worker来执行任务</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    return workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在启动Worker来执行任务是可以看到会先去判断线程池的状态是否适合添加Worker，不适合直接返回false。然后就是将任务封装为Worker并启动该Worker。Worker实现了Runnable接口，所以当执行t.start()时会去调用Worker的run方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    runWorker(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法又去调用了<code>ThreadPoolExecutor#runWorker</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final void runWorker(Worker w) &#123;</span><br><span class="line">    Thread wt &#x3D; Thread.currentThread();</span><br><span class="line">    Runnable task &#x3D; w.firstTask;</span><br><span class="line">    w.firstTask &#x3D; null;</span><br><span class="line">    w.unlock(); &#x2F;&#x2F; allow interrupts</span><br><span class="line">    boolean completedAbruptly &#x3D; true;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;如果有任务需要执行则一直执行任务</span><br><span class="line">        while (task !&#x3D; null || (task &#x3D; getTask()) !&#x3D; null) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            &#x2F;&#x2F; If pool is stopping, ensure thread is interrupted;</span><br><span class="line">            &#x2F;&#x2F; if not, ensure thread is not interrupted.  This</span><br><span class="line">            &#x2F;&#x2F; requires a recheck in second case to deal with</span><br><span class="line">            &#x2F;&#x2F; shutdownNow race while clearing interrupt</span><br><span class="line">            if ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            try &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown &#x3D; null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    &#x2F;&#x2F;执行提交的任务</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; catch (RuntimeException x) &#123;</span><br><span class="line">                    thrown &#x3D; x; throw x;</span><br><span class="line">                &#125; catch (Error x) &#123;</span><br><span class="line">                    thrown &#x3D; x; throw x;</span><br><span class="line">                &#125; catch (Throwable x) &#123;</span><br><span class="line">                    thrown &#x3D; x; throw new Error(x);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                task &#x3D; null;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly &#x3D; false;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从该方法中我们可以看到当执行我们提交的任务发生异常时，线程池会将该异常重新抛出，然后会去调用<code>processWorkerExit</code>方法。如果产生异常的话completedAbruptly是为true的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void processWorkerExit(Worker w, boolean completedAbruptly) &#123;</span><br><span class="line">    if (completedAbruptly) &#x2F;&#x2F; If abrupt, then workerCount wasn&#39;t adjusted</span><br><span class="line">        decrementWorkerCount();</span><br><span class="line"></span><br><span class="line">    final ReentrantLock mainLock &#x3D; this.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        completedTaskCount +&#x3D; w.completedTasks;</span><br><span class="line">        workers.remove(w);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tryTerminate();</span><br><span class="line"></span><br><span class="line">    int c &#x3D; ctl.get();</span><br><span class="line">    if (runStateLessThan(c, STOP)) &#123;</span><br><span class="line">        if (!completedAbruptly) &#123;</span><br><span class="line">            int min &#x3D; allowCoreThreadTimeOut ? 0 : corePoolSize;</span><br><span class="line">            if (min &#x3D;&#x3D; 0 &amp;&amp; ! workQueue.isEmpty())</span><br><span class="line">                min &#x3D; 1;</span><br><span class="line">            if (workerCountOf(c) &gt;&#x3D; min)</span><br><span class="line">                return; &#x2F;&#x2F; replacement not needed</span><br><span class="line">        &#125;</span><br><span class="line">        addWorker(null, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中会销毁Worker，所以如果我们提交的任务代码没有放在try…catch中的话，当异常产生时，执行任务的线程就会因为异常而退出。虽然线程池后面面创建一个新的Worker来继续运行任务，如果异常频繁产生这样效率就会下降非常多。<br>如果你想对execute方式提交的任务发生异常时进行记录，你可以使用如下方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService threadPool &#x3D; Executors.newFixedThreadPool(1, new ThreadFactory() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Thread newThread(Runnable r) &#123;</span><br><span class="line">        Thread thread &#x3D; new Thread(r);</span><br><span class="line">        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class="line">                System.out.println(&quot;产生异常了&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">threadPool.execute(() -&gt; &#123;</span><br><span class="line">    System.out.println(&quot;execute&quot;);</span><br><span class="line">    Object obj &#x3D; null;</span><br><span class="line">    System.out.println(obj.toString());</span><br><span class="line">&#125;);</span><br><span class="line">threadPool.shutdown();</span><br><span class="line">System.out.println(&quot;**********&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h2><p>对于sbumit方法线程池在<code>AbstractExecutorService</code>中进行了实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    if (task &#x3D;&#x3D; null) throw new NullPointerException();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask &#x3D; newTaskFor(task, null);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    return ftask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法中先将任务封装成了<code>RunnableFuture</code>类型然后调用execute来提交任务，通过前面我们知道执行任务时就是去调用run方法，所以我们直接看FutureTask的run方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    if (state !&#x3D; NEW ||</span><br><span class="line">        !UNSAFE.compareAndSwapObject(this, runnerOffset,</span><br><span class="line">                                     null, Thread.currentThread()))</span><br><span class="line">        return;</span><br><span class="line">    try &#123;</span><br><span class="line">        Callable&lt;V&gt; c &#x3D; callable;</span><br><span class="line">        if (c !&#x3D; null &amp;&amp; state &#x3D;&#x3D; NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            boolean ran;</span><br><span class="line">            try &#123;</span><br><span class="line">                result &#x3D; c.call();</span><br><span class="line">                ran &#x3D; true;</span><br><span class="line">            &#125; catch (Throwable ex) &#123;</span><br><span class="line">                result &#x3D; null;</span><br><span class="line">                ran &#x3D; false;</span><br><span class="line">                &#x2F;&#x2F;设置异常</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            if (ran)</span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        &#x2F;&#x2F; runner must be non-null until state is settled to</span><br><span class="line">        &#x2F;&#x2F; prevent concurrent calls to run()</span><br><span class="line">        runner &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; state must be re-read after nulling runner to prevent</span><br><span class="line">        &#x2F;&#x2F; leaked interrupts</span><br><span class="line">        int s &#x3D; state;</span><br><span class="line">        if (s &gt;&#x3D; INTERRUPTING)</span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在异常产生之后会去调用<code>setException</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void setException(Throwable t) &#123;</span><br><span class="line">    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class="line">        outcome &#x3D; t;</span><br><span class="line">        UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL); &#x2F;&#x2F; final state</span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后直接将该异常赋值给了outcome，后面通过get获取结果时会重新抛出此异常。对于submit提交的任务是无法通过UncaughtExceptionHandler来处理的。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于execute方式提交的任务，在任务执行时当异常产生后会直接抛出异常，要获取到异常通知可以通过设置UncaughtExceptionHandler的方式来实现，也可以通过try…catch直接捕获任务中的异常。对于submit方式提交的任务，要获取异常必须要在调用get方法时才能获取到。在使用execute方式提交任务时建议将业务代码用try…catch包裹起来，不使用try…catch在异常产生后会导致Worker退出，频繁出现这种情况会导致线程的频繁建立和销毁。虽然这并不会对业务造成影响，但会时线程池的性能降低。</p>
]]></content>
      <tags>
        <tag>线程池</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>java虚拟机运行时数据区域</title>
    <url>/posts/48291f2c/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java虚拟机再执行Java程序的过程中会将所管理的内存区域划分为不同的数据区域。这些区域有各自的用途，以及创建和销毁的时间。根据《Java虚拟机规范》的规定，Java虚拟机会将所管理的内存区域划分为如下几个运行时数据区域。<img src="/posts/48291f2c/1.png"></p>
<h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>程序计数器是一块比较小的内存区域，它可以看作是当前线程所执行的字节码的行号指示器，他是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成。<br>程序计数器是线程私有的，因为Java虚拟机对多线程的执行是轮流切换、分配处理器执行时间的方式实现的。再任何时刻一个处理器只会执行一条线程中的指令，为了线程切换后能恢复到正确位置，所以每条线程都需要一个独立的程序计数器。<br>该区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。</p>
<h1 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h1><p>Java虚拟机在调用方法时会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至完毕的过程对应一个栈帧在虚拟机从入栈到出栈的过程。虚拟机栈的结构如下。<img src="/posts/48291f2c/2.png"><br>在该区域中规定了两类异常：如果线程请求的栈深度超出了虚拟机所允许的深度将抛出StackOverflowError异常；如果Java虚拟机栈容量可以扩展，当扩展后还无法申请到足够的内存会抛出OutOfMemoryError异常。</p>
<h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><p>局部变量表时一组变量值的存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序编译时就能确定该方法所需要分配的局部变量表的最大容量。局部变量表的容量以变量槽有最小单位，每个变量槽都应该能存放一个boolean、 byte、char、short、int、float、reference或returnAddress类型的数据。</p>
<h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p>当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈和入栈操作。譬如在做算术运算的时候是通过 将运算涉及的操作数栈压入栈顶后调用运算指令来进行的，又譬如在调用其他方法的时候是通过操作 数栈来进行方法参数的传递。举个例子，例如整数加法的字节码指令iadd，这条指令在运行的时候要 求操作数栈中最接近栈顶的两个元素已经存入了两个int型的数值，当执行这个指令时，会把这两个int 值出栈并相加，然后将相加的结果重新入栈。</p>
<h2 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h2><p>每个栈帧都包含一个指向常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。</p>
<h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p>当执行引擎遇到任意一个方法返回的字节码指令或在执行过程中遇到了异常，这时候可能会有返回值传递给方法调用者。</p>
<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>本地方法栈和虚拟机栈是类似的，它们的区别就是：本地方法栈执行的是native方法，Java虚拟机栈执行的是Java方法。<br>在该区域所规定的异常和Java虚拟机栈的异常一致。</p>
<h1 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h1><p>Java堆是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，该区域的唯一目的就是存放对象实例。在Java中几乎所有的对象实例都是在这里分配内存，当一个对象通过逃逸分析出来该对象的调用仅仅只是在该方法中调用的话，可能虚拟机就会直接在虚拟机栈上为该对象分配内存，该方法执行完成之后该对象也就直接被回收了。<br>《Java虚拟机规范》在该区域中定义了一种异常：如果在Java队中没有内存完成实例分配，且堆无法再扩展时会抛出OutOfMemoryError异常。</p>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区存放的是被虚拟机加载的类型信息、常量、静态变量、即时编译后的代码缓存等数据。该区域也是线程共享的区域。<br>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <tags>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized原理和锁膨胀过程</title>
    <url>/posts/fbfc5d2a/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>了解java多线程的都知道，如果需要对一个方法或代码块进行同步的话我们只需要使用syncchronized去修饰待同步的方法和代码块即可。那JVM底层到底是怎样实现此功能的呢？以及对加锁过程做了什么优化呢？本篇文章将带你搞清楚以上问题。</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><h2 id="关键字使用"><a href="#关键字使用" class="headerlink" title="关键字使用"></a>关键字使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Synchronized &#123;</span><br><span class="line">    Object object &#x3D; new Object();</span><br><span class="line">    public synchronized void sayHello()&#123;</span><br><span class="line">        synchronized (object)&#123;</span><br><span class="line">            int a &#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sysHelloWithoutSync()&#123;</span><br><span class="line">        int a &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们通常要对方法和代码块进行同步的话只需要像上面代码的方式来使用即可，我们通过反编译命令<code>javap -v Synchronized.class</code>查看jvm编译生成的字节码信息(省略了部分信息)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized void sayHello();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">  Code:</span><br><span class="line">    stack&#x3D;2, locals&#x3D;4, args_size&#x3D;1</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: getfield      #3                  &#x2F;&#x2F; Field object:Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">       4: dup</span><br><span class="line">       5: astore_1</span><br><span class="line">       6: monitorenter</span><br><span class="line">       7: iconst_1</span><br><span class="line">       8: istore_2</span><br><span class="line">       9: aload_1</span><br><span class="line">      10: monitorexit</span><br><span class="line">      11: goto          19</span><br><span class="line">      14: astore_3</span><br><span class="line">      15: aload_1</span><br><span class="line">      16: monitorexit</span><br><span class="line">      17: aload_3</span><br><span class="line">      18: athrow</span><br><span class="line">      19: return</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           7    11    14   any</span><br><span class="line">          14    17    14   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 11: 0</span><br><span class="line">      line 12: 7</span><br><span class="line">      line 13: 9</span><br><span class="line">      line 14: 19</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      20     0  this   Lthread&#x2F;Synchronized;</span><br><span class="line">    StackMapTable: number_of_entries &#x3D; 2</span><br><span class="line">      frame_type &#x3D; 255 &#x2F;* full_frame *&#x2F;</span><br><span class="line">        offset_delta &#x3D; 14</span><br><span class="line">        locals &#x3D; [ class thread&#x2F;Synchronized, class java&#x2F;lang&#x2F;Object ]</span><br><span class="line">        stack &#x3D; [ class java&#x2F;lang&#x2F;Throwable ]</span><br><span class="line">      frame_type &#x3D; 250 &#x2F;* chop *&#x2F;</span><br><span class="line">        offset_delta &#x3D; 4</span><br><span class="line"></span><br><span class="line">public void sysHelloWithoutSync();</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack&#x3D;1, locals&#x3D;2, args_size&#x3D;1</span><br><span class="line">       0: iconst_1</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 17: 0</span><br><span class="line">      line 18: 2</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       3     0  this   Lthread&#x2F;Synchronized;</span><br><span class="line">          2       1     1     a   I</span><br></pre></td></tr></table></figure>
<p>通过对比使用了synchronized关键字的方法和未使用该关键字的方法，使用了该关键字的方法有<code>ACC_SYNCHRONIZED</code>标记以及多了<code>monitorenter</code>和<code>monitorexit</code>两条指令。<code>ACC_SYNCHRONIZED</code>标记代表该方法是一个同步方法，当调用该方法时会去隐式的调用<code>monitorenter</code>和<code>monitorexit</code>两条指令。可以看到如果使用了synchronized，jvm会自动为同步代码块生成异常表，在产生异常之后，会去调用monitorexit指令来释放锁。</p>
<h2 id="monitorenter和monitorexit"><a href="#monitorenter和monitorexit" class="headerlink" title="monitorenter和monitorexit"></a>monitorenter和monitorexit</h2><p>JVM对于这两个字节码的实现，主要是基于Mark Word和monitor来实现的。</p>
<h3 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h3><p>在JVM中一个对象的构成如下如所示。<img src="/posts/fbfc5d2a/1.png" alt="对象构成"><br>Hotspot虚拟机的对象头主要包含两部分数据：Mark word（标记字段）、Klass Pointer（类型指针）。其中类型指针是对象只想它的类元数据的指针，虚拟机通过该对象来确定实例属于哪个类，Mark word用于存储对象自身运行时数据，他是synchronized实现偏向锁和轻量级锁的关键。<br>Mark word结构如下图所示。<img src="/posts/fbfc5d2a/2.png"></p>
<h3 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h3><p>你可以将monitor理解为一个同步工具，也可以理解为一种同步机制，这其实是一个对象，minitor源码是c++实现的，在虚拟机的ObjectMonitor.hpp文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ObjectMonitor() &#123;</span><br><span class="line">    _header       &#x3D; NULL;</span><br><span class="line">    _count        &#x3D; 0;</span><br><span class="line">    _waiters      &#x3D; 0,</span><br><span class="line">    _recursions   &#x3D; 0;  &#x2F;&#x2F; 线程重入次数</span><br><span class="line">    _object       &#x3D; NULL;  &#x2F;&#x2F; 存储Monitor对象</span><br><span class="line">    _owner        &#x3D; NULL;  &#x2F;&#x2F; 持有当前线程的owner</span><br><span class="line">    _WaitSet      &#x3D; NULL;  &#x2F;&#x2F; wait状态的线程列表</span><br><span class="line">    _WaitSetLock  &#x3D; 0 ;</span><br><span class="line">    _Responsible  &#x3D; NULL ;</span><br><span class="line">    _succ         &#x3D; NULL ;</span><br><span class="line">    _cxq          &#x3D; NULL ;  &#x2F;&#x2F; 单向列表</span><br><span class="line">    FreeNext      &#x3D; NULL ;</span><br><span class="line">    _EntryList    &#x3D; NULL ;  &#x2F;&#x2F; 处于等待锁状态block状态的线程列表</span><br><span class="line">    _SpinFreq     &#x3D; 0 ;</span><br><span class="line">    _SpinClock    &#x3D; 0 ;</span><br><span class="line">    OwnerIsThread &#x3D; 0 ;</span><br><span class="line">    _previous_owner_tid &#x3D; 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>monitor对象是实现重量级锁的关键。</p>
<h1 id="为什么不直接使用重量级锁"><a href="#为什么不直接使用重量级锁" class="headerlink" title="为什么不直接使用重量级锁"></a>为什么不直接使用重量级锁</h1><p>在使用重量级锁的时候会引起用户态和内核台的转换，这种切换对于性能的消耗非常大。在1.6之前都是重量级锁，重量级的本质是monitor对象调用的过程以及Linux内核复杂的机制决定的。所以才引出了偏向锁和轻量级锁来提高同步的性能。</p>
<h1 id="锁膨胀过程"><a href="#锁膨胀过程" class="headerlink" title="锁膨胀过程"></a>锁膨胀过程</h1><p>锁主要存在四种状态，级别从低到高分别是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，这几个状态会随着竞争状态而升级，这个升级过程就是锁膨胀的过程，只有重量级锁是需要使用操作系统底层mutex互斥原语来实现，其它锁都是通过对象头来实现的。需要注意锁可以升级但不能降级。<img src="/posts/fbfc5d2a/3.png"></p>
<h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>偏向锁的目的是消除无竞争情况下的同步原语，进一步提高程序运行性能。偏向锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其它线程获取，则持有偏向锁的线程将永远不需要再进行同步。偏向锁默认开启。</p>
<h3 id="获取锁过程"><a href="#获取锁过程" class="headerlink" title="获取锁过程"></a>获取锁过程</h3><p><img src="/posts/fbfc5d2a/4.png"><br>偏向锁加锁的过程如下：</p>
<ul>
<li>检查Mark Word中的线程ID是否是当前线程ID，如果是直接执行同步块。</li>
<li>如果Mark Word中存储的线程ID不是本线程的ID，则通过CAS操作去修改线程ID为本线程ID，修改成功则执行同步代码块。</li>
<li>如果CAS修改线程ID失败，则当拥有该偏向锁的线程到达安全点之后，挂起这个线程，然后将偏向锁升级为轻量级锁。</li>
</ul>
<h3 id="锁释放过程"><a href="#锁释放过程" class="headerlink" title="锁释放过程"></a>锁释放过程</h3><p><img src="/posts/fbfc5d2a/5.png"><br>偏向锁释放锁过程如下：</p>
<ul>
<li>线程不会主动去释放偏向锁，需要等到其它线程来竞争时才会去释放偏向锁。</li>
<li>等待全局安全点（在此时间点没有字节码正在执行）。</li>
<li>挂起持有偏向锁的线程。</li>
<li>判断偏向锁线程是否处于同步块，如果处于同步块则将锁升级为轻量级锁并唤醒原持有偏向锁的线程。如果已经退出了同步块，则将锁设置为无锁状态，并将偏向锁位置为0代表后面使用轻量级锁。</li>
</ul>
<h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>轻量级锁时相对于使用底层mutex互斥原语实现同步的重量级锁而言的，轻量级锁同步时通过对象头的Mark Word实现的。在获取锁时，如果对象是无锁的，jvm就会在当前线程的栈帧中建立一个叫锁记录（Lock Record）的空间，用来存储对象的Mark Word拷贝，然后将对象的Mark Word更新位执行Lock Record的指针。</p>
<h3 id="获取锁过程-1"><a href="#获取锁过程-1" class="headerlink" title="获取锁过程"></a>获取锁过程</h3><ol>
<li>在线程进入同步方法、同步块的时候，如果同步对象锁状态为无锁状态(锁标志位为”01”状态，是否为偏向锁为”0”)，虚拟机首先将在当前线程的栈帧中建立一个名为锁记录(Lock Recored)的空间，用于储存锁对象目前的Mark Word的拷贝(官方把这份拷贝加了个Displaced前缀，即Displaced Mark Word)。</li>
<li>将对象头的Mark Word拷贝到线程的锁记录(Lock Recored)中。</li>
<li>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针。如果这个更新成功了，则执行步骤4，否则执行步骤5。</li>
<li>更新成功，这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位将转变为”00”，即表示此对象处于轻量级锁的状态。</li>
<li>更新失败，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，可以直接进入同步块继续执行，否则说明这个锁对象已经被其其它线程抢占了。进行自旋执行步骤3，如果自旋结束仍然没有获得锁，轻量级锁就需要膨胀为重量级锁，锁标志位状态值变为”10”，Mark Word中储存就是指向monitor对象的指针，当前线程以及后面等待锁的线程也要进入阻塞状态。</li>
</ol>
<h3 id="锁释放过程-1"><a href="#锁释放过程-1" class="headerlink" title="锁释放过程"></a>锁释放过程</h3><ol>
<li>使用CAS操作将对象当前的Mark Word和线程中复制的Displaced Mark Word替换回来(依据Mark Word中锁记录指针是否还指向本线程的锁记录)，如果替换成功，则执行步骤2，否则执行步骤3。</li>
<li>如果替换成功，整个同步过程就完成了，恢复到无锁的状态(01)。</li>
<li>如果替换失败，说明有其他线程尝试获取该锁(此时锁已膨胀为重量级锁)，那就要在释放锁的同时，唤醒被挂起的线程。</li>
</ol>
<h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>前面讲到了重量级锁是尹爱与底层操作系统的mutex互斥原语的，线程获取、释放monitor过程如下：<img src="/posts/fbfc5d2a/6.png"><br>当线程尝试获取monitor的所有权时，如果获取失败说明monitor被其它线程占用，那么会将线程放入阻塞队列中，等待其它线程释放monitor之后，会去唤醒同步队列中的第一个节点去获取。当线程释放monitor之后可能此时正好有一个线程来获取monitor，jvm会直接将monitor的所有权给该线程，而不会去唤醒同步队列中的第一个节点去获取，所以synchronized是非公平锁。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="锁优缺点对比"><a href="#锁优缺点对比" class="headerlink" title="锁优缺点对比"></a>锁优缺点对比</h2><table>
<thead>
<tr>
<th>锁</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>偏向锁</td>
<td>加锁解锁不需要额外的消耗，和执行非同步方法时间相差小</td>
<td>如果线程键存在锁竞争，会带来额外锁撤消的消耗</td>
<td>一个线程访问同步块场景</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>竞争的线程不会阻塞，提高程序的相应速度</td>
<td>得不到锁会自旋消耗CPU</td>
<td>同步代码块执行时间短</td>
</tr>
<tr>
<td>重量级锁</td>
<td>线程竞争不使用自旋，不会消耗CPU</td>
<td>线程阻塞，响应时间慢</td>
<td>同步代码块执行时间长</td>
</tr>
</tbody></table>
<p>最后再贴一张synchronized执行的流程图。<img src="/posts/fbfc5d2a/7.png"></p>
]]></content>
      <tags>
        <tag>线程安全</tag>
      </tags>
  </entry>
  <entry>
    <title>事务的隔离级别</title>
    <url>/posts/5eac0da1/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>掌握事务的隔离级别对于事务的学习来说是非常重要的，本篇文章将带你搞清楚事务的隔离级别。</p>
<h1 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h1><p>在介绍四种隔离级别之前你需要先了解事务的四个特性，也就是ACID。分别是原子行、一致性、隔离性、持久性。</p>
<h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>原子性是指整个数据库事务是不可分割的工作单位。只有使事务中所有的数据库操作执行都成功，才算整个事务成功。如果事务中任何一个SQL语句执行失败，那么已经执行成功的SQL语句也必须撤销，数据库状态应该退回到执行事务前的状态。</p>
<h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>一致性指事务将数据库从一种正确状态转变为另一个正确的状态的状态。在事务开始之前和事务结束之后，数据库的完整性约束没有被破坏。</p>
<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p>一个事务的影响在该事务提交之前对其他事务来说都是不可见的，通过锁实现。</p>
<h2 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h2><p>事务一旦提交，其结果就是永久性的。即使发生宕机等故障，数据库也能将数据恢复。</p>
<h1 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h1><h2 id="READ-UNCOMMITTED"><a href="#READ-UNCOMMITTED" class="headerlink" title="READ UNCOMMITTED"></a>READ UNCOMMITTED</h2><p>想象这样一个场景，公司发工资时把数据库中你的余额增加1000元，但是该事务还没提交。此时你正好去查询你账户余额，发现余额1000元，已经到账。可不幸的时财务发现打给你的工资金额不对又将账户金额改为了800元。<br>这种情况就是我们通常说的脏读，一个事务读取到了另一个事务未提交的数据。当隔离级别未READ UNCOMMITTED时就可能出现脏读的情况，解决脏读可以通过设置隔离级别为READ COMMITTED来解决。</p>
<h2 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ COMMITTED"></a>READ COMMITTED</h2><p>读已提交就是一个事务要等到另一个事务提交后才能读取数据，读已提交能够解决脏读问题。<br>但是接着想象下面一个场景，你拿着你的工资卡去超市消费，pos机读取到你的卡里面余额为1000元，此时余额是充足的。但在此时，你的花呗还款将你卡里面的余额给扣掉了。当你用pos机扣款的时候发现余额不足了。<br>这上面的问题就是我们常说的不可重复读，即在一个事务范围内多次读取到的数据不一致。解决不可重复读问题可以将隔离级别设置为REPEATABLE READ来解决。</p>
<h2 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE READ"></a>REPEATABLE READ</h2><p>在一个事务开启之后，其它事务不能进行修改操作，可重复读能够解决不可重复读问题。<br>考虑下面这个场景：加入你女朋友在银行工作，她经常通过内部系统查看你的银行卡消费记录。有一天她查询到你本月的消费金额为80元，而你此时正好在外面吃大餐，消费500元，买完单后数据库新增了一条500元的消费记录，并提交了事务，随后你女朋友将消费记录打印出来发现多了一条500元的消费记录，她以为出现了幻觉，这种情况就是幻读（ps：MySQL默认的隔离级别为可重复读）。解决幻读可通过设置隔离级别为SERIALIZABLE来解决幻读问题。</p>
<h2 id="SERIALIZABLE"><a href="#SERIALIZABLE" class="headerlink" title="SERIALIZABLE"></a>SERIALIZABLE</h2><p>串行化是最高的事务隔离级别，但同时代价也是非常高的，性能较低，一般很少使用。使用串行化可以解决数据的一致性问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据不一致问题和隔离级别的关系"><a href="#数据不一致问题和隔离级别的关系" class="headerlink" title="数据不一致问题和隔离级别的关系"></a>数据不一致问题和隔离级别的关系</h2><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>读已提交</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>可串行化</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
<tr>
<td>##不可重复读和幻读的区别</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>对于不可重复读和幻读，非常容易混淆这两个概念。幻读是指多次读取一个范围内的记录结果不一致的情况，读到之前没有出现过的数据（新增或删除），而不可重复读是同一条数据两次读取到的结果不相同（更新）。</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>事务</tag>
        <tag>隔离级别</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/posts/4eb3381c/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>为了防止分布式系统中多个线程之间相互干扰，我们需要一种分布式协调技术来对这些线程进行管理，这个分布式协调技术就是分布式锁。在本篇文章中，将带你搞清楚下面几个问题：</p>
<ul>
<li>什么是分布式锁？</li>
<li>为什么要使用分布式锁？</li>
<li>分布式锁所需要满足的条件？</li>
<li>常见分布式锁的实现方式有哪些？<h1 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h1>在分布式系统中如果不同的系统或式同一系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，通常需要互斥来防止彼此干扰来保证一致性，这个时候就需要使用分布式锁。分布式锁是控制分布式系统之间同步访问共享资源的一种方式。<h1 id="为什么要使用分布式锁"><a href="#为什么要使用分布式锁" class="headerlink" title="为什么要使用分布式锁"></a>为什么要使用分布式锁</h1>在传统单机应用中，为了保证一个方法或资源（变量值）在高并发的情况下只能被同一个线程访问，通常会使用Java并发处理相关API（sychronized和ReentrantLock）来进行互斥控制。但是随着业务发展，传统单机部署方式被演化为分布式部署方式。同一个应用系统可能会处于不同机器的不同进程之中，如果这时候再使用单机部署情况下的并发控制策略显然是不行的，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁所起的作用<h1 id="分布式锁所需要满足的条件"><a href="#分布式锁所需要满足的条件" class="headerlink" title="分布式锁所需要满足的条件"></a>分布式锁所需要满足的条件</h1>一个分布式锁需要满足以下条件：</li>
<li>在任意时刻只能有一个客户端（或者说业务请求）获得锁，并且只能由该客户端（或业务请求）解锁成功。</li>
<li>具备锁失效机制，防止死锁。</li>
<li>具备可重入特性，统一客户端（业务请求）能够在已经获得锁的情况下在次获得该锁。</li>
<li>具备阻塞锁特性，在没有获取到锁时会一直获取锁成功直到获取到锁。</li>
<li>具备非阻塞锁特性，即没有获取到锁直接返回获取锁失败。</li>
</ul>
<h1 id="常见分布式锁实现的方式"><a href="#常见分布式锁实现的方式" class="headerlink" title="常见分布式锁实现的方式"></a>常见分布式锁实现的方式</h1><p>一般实现分布式锁有如下几种方式：</p>
<ul>
<li>MySQL</li>
<li>ZK</li>
<li>Redis</li>
</ul>
<p>下面简单介绍以下这些分布式锁的实现原理。</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL实现分布式锁的原理是使用了UNIQUE KEY，也就是通过某一字段的唯一性来实现的，当数据库中没有此资源的名字时，此时可以插入该资源名的一条记录。当另一个应用要来获取同一资源的时候，也会尝试往数据库中插入该资源的一条记录，由于UNIQUE KEY约束肯定是不能插入成功的，这样就实现了某一资源的互斥访问了。</p>
<h2 id="ZK"><a href="#ZK" class="headerlink" title="ZK"></a>ZK</h2><p>ZooKeeper是以Paxos算法为基础的分布式应应用程序协调服务。ZK的数据节点和文件目录类似，所以我们可以用此特性实现分布式锁。我们以某个资源为目录，然后这个目录下面的节点就是我们需要获取锁的客户端，为获取到锁的客户端需要注册Watcher到上一个客户端。<img src="/posts/4eb3381c/1.png"><br>客户端通过判断字节所注册的节点是不是在第一位，如果是在第一位就代表自己拥有锁了。</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis有一个SetNx命令，如果不存在此值，则设置该值到redis中，如果存在该值则设置失败。在Redis中可以设置值的过期时间，这样就能解决死锁问题了。</p>
]]></content>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡二叉树</title>
    <url>/posts/4263f441/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>平衡二叉树又被称为AVL树（得名于它的发明者G. M. Adelson-Velsky 和 Evgenii Landis），在插入和删除节点之后，平衡二叉树会通过自平衡来保证修改节点之后二叉树还是平衡二叉树。该数据结构解决了二叉查找树退化成链表的问题，将插入、查找、删除的时间复杂度控制在O(logN)，但是频繁的旋转会使插入和删除牺牲掉O(logN)左右的时间。在本篇文章中将带你搞清除插入和修改节点之后导致的树不平衡如何解决。</p>
<h1 id="最小失衡二叉树"><a href="#最小失衡二叉树" class="headerlink" title="最小失衡二叉树"></a>最小失衡二叉树</h1><h2 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h2><p>某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子（BF,Balance Factor），平衡二叉树中不存在平衡因子大于 1 的节点。在一棵平衡二叉树中，节点的平衡因子只能取 0 、1 或者 -1 ，分别对应着左右子树等高，左子树比较高，右子树比较高。</p>
<p>在新插入的节点向上查找，以第一个平衡因子的绝对值超过1的节点为根的字数称之为最小不平衡子树。只需要将最小的不平衡子树调整为平衡的树，这样整棵树就平衡了。平衡二叉树的失衡调整主要是通过旋转最小失衡树来实现的，旋转又分为左旋转和右旋转。</p>
<h1 id="左旋转和右旋转"><a href="#左旋转和右旋转" class="headerlink" title="左旋转和右旋转"></a>左旋转和右旋转</h1><p>左旋转和右旋转操作为护逆操作，下图所示操作称为对节点Q的右旋和对节点P的左旋。<br><img src="/posts/4263f441/1.png"></p>
<h2 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h2><p>左旋操作流程如下：</p>
<ul>
<li>右孩子的左子树变为该节点的右子树。</li>
<li>旋转节点作为右孩子的左字树。</li>
<li>节点的右孩子代替此节点的位置。</li>
</ul>
<h2 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h2><p>右旋操作流程如下：</p>
<ul>
<li>左孩子的右子树变为节点的左子树。</li>
<li>旋转节点作为左孩子的右子树。</li>
<li>节点的左孩子代替此节点位置。</li>
</ul>
<p>简单来讲：右旋就是自己变成左孩子的右孩子，左旋就是自己变成右孩子的左孩子。</p>
<h1 id="结点插入"><a href="#结点插入" class="headerlink" title="结点插入"></a>结点插入</h1><p>我们将需要重新平衡的结点称为A，由于任意两个结点对多只有两个子节点，因此高度不平衡时A结点的平衡因子为2，这种不平衡初夏下下面四种情况中：</p>
<ul>
<li>在A的左子树结点的左子树上插入。</li>
<li>在A的左子树结点的右子树上插入。</li>
<li>在A的右子树结点的左子树上插入。</li>
<li>在A的右子树结点的右子树上插入。</li>
</ul>
<p><img src="/posts/4263f441/2.png"><br>对于以上不平衡情形，可以分为在外边（LL和RR），该情形可以直接通过一次单旋转完成调整；第二种情形是插入发生在内部（LR和RL），此情形需要两次旋转才能完成调整。下面这四种情形和上面是镜像我这只对上面四种情形进行演示，你自己可以对下面这四种情形进行对应的旋转操作，旋转完成之后也能达到平衡。</p>
<h2 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h2><p>对于LL类型，只需要将失衡结点进行一次右旋转即可完成调整。<img src="/posts/4263f441/3.png"></p>
<h2 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h2><p>由于RR类型，只需要将失衡结点进行一次左旋转即可完成调整。<img src="/posts/4263f441/4.png"></p>
<h2 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h2><p>对于LR类型，需要先将失衡结点的左子树进行左旋转，然后再将失衡结点进行右旋转。<img src="/posts/4263f441/5.png"></p>
<h2 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h2><p>由于RL类型，需要先将失衡结点的右子树进行右旋转，然后再将失衡结点进行左旋转。<img src="/posts/4263f441/6.png"></p>
<h1 id="结点删除"><a href="#结点删除" class="headerlink" title="结点删除"></a>结点删除</h1><p>结点的删除与二叉树的删除一样，分为三种情况。</p>
<h2 id="删除结点无左子树"><a href="#删除结点无左子树" class="headerlink" title="删除结点无左子树"></a>删除结点无左子树</h2><p>直接将删除节点的父节点指向删除节点的右子树。</p>
<h2 id="删除结点无右子树"><a href="#删除结点无右子树" class="headerlink" title="删除结点无右子树"></a>删除结点无右子树</h2><p>直接将删除节点的父节点指向删除节点的左子树。</p>
<h2 id="删除结点左右子树都存在"><a href="#删除结点左右子树都存在" class="headerlink" title="删除结点左右子树都存在"></a>删除结点左右子树都存在</h2><p>处理此情形有两种方式可以解决：</p>
<ul>
<li>让删除节点左子树的最右侧节点代替当前节点。<img src="/posts/4263f441/9.png"></li>
<li>让删除节点右子树的最左侧节点代替当前节点。<img src="/posts/4263f441/10.png"></li>
</ul>
<p>删除结点之后，如果树不满足平衡条件需要对树进行旋转调整。</p>
]]></content>
      <tags>
        <tag>二叉树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>让你彻底理解volatile</title>
    <url>/posts/87a7a28d/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对于了解多线程的开发者来说，volatile关键字对于你来说肯定不陌生。关键字volatile可以说时Java虚拟机提供的最轻量级的同步机制，但是它并不容易被正确的理解，以至于很多人在使用同步时直接通过synchronized来进行同步。本篇文章将带你搞清楚volatile关键字有哪些作用？底层实现以及使用的场景。</p>
<h1 id="volatile的作用"><a href="#volatile的作用" class="headerlink" title="volatile的作用"></a>volatile的作用</h1><p>当一个变量被volatile关键字修饰时，他将具备两项特性：可见性和禁止指令重排序。</p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>当一个变量被volatile修饰时，Java虚拟机会保证此变量对所有线程的可见性，这里的可见性是指当一个线程修改了这个变量的值，新值对于其他线程来说时可以立即知道的。而普通变量则不能做到这一点，在<a href="../91e798bc">Java内存模型</a>中我们讲到过普通变量的值在线程间传递时需要通过主内存来完成。比如，线程A修改一个变量的值后需要先同步到主内存中，线程B要在线程A回写完成之后再对主内存进行读取，新变量的值才会对线程B可见。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class VolatileExample &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * main 方法作为一个主线程</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyThread myThread &#x3D; new MyThread();</span><br><span class="line">        &#x2F;&#x2F; 开启线程</span><br><span class="line">        myThread.start();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 主线程执行</span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            if (myThread.isFlag()) &#123;</span><br><span class="line">                System.out.println(&quot;主线程访问到 flag 变量&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 子线程类</span><br><span class="line"> *&#x2F;</span><br><span class="line">class MyThread extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    private boolean flag &#x3D; false;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 修改变量值</span><br><span class="line">        flag &#x3D; true;</span><br><span class="line">        System.out.println(&quot;flag &#x3D; &quot; + flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isFlag() &#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFlag(boolean flag) &#123;</span><br><span class="line">        this.flag &#x3D; flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行上面的程序你会发现控制台永远都不会输出：”主线程访问到 flag 变量“，但如果将flag用volatile修饰的话，就能输出上述语句。上面的例子所演示的功能就是volatile的可见性，在一个线程中修改一个变量的值在另一个变量中能够立即感知到。</p>
<h2 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h2><p>在遵循as-if-serial（即不管怎么重排序，单线程下程序的执行结果不能被改变。编译器，runtime 和处理器都必须遵守）语义的情况下，编译器和处理器通常会对指令做重排序优化。一般重排序可以分为如下三种类型：</p>
<ul>
<li>编译器优化重排序：编译器在不改变单线程程序语义前提下，可以该带代码的执行顺序。</li>
<li>指令级并行重排序：如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>
<li>内存系统重排序：由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>
</ul>
<p>从Java源代码到最终执行的指令序列，会经历下面三种重排序：<img src="/posts/87a7a28d/2.png"><br>为了让你理解重排序，看下下面的示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a &#x3D; 0;</span><br><span class="line">&#x2F;&#x2F; 线程 A</span><br><span class="line">a &#x3D; 1;           &#x2F;&#x2F; 1</span><br><span class="line">flag &#x3D; true;     &#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 线程 B</span><br><span class="line">if (flag) &#123; &#x2F;&#x2F; 3</span><br><span class="line">  int i &#x3D; a; &#x2F;&#x2F; 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我们的预期结果我们时希望i=1。加入这时候发生了指令重排序，线程A中代码2在代码1之前执行了。此时线程B中i的值就为0了。这和我们的预期不符，这种情况我们就可以使用volatile关键字了，在使用volatile修饰变量之后，Jvm会禁止指令重排序，所以volatile在一定层度上能保证有序性。<br>禁止指令重排序有两层意思：</p>
<ul>
<li>当指令执行到volatile变量的读写操作使，会保证在其前面的语句已经全部执行了，且保证对后面的操作可见。</li>
<li>在进行指令优化时，不能将对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放在其前面执行。</li>
</ul>
<h1 id="原理以及实现机制"><a href="#原理以及实现机制" class="headerlink" title="原理以及实现机制"></a>原理以及实现机制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package thread;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: 彭椿悦</span><br><span class="line"> * @data: 2021&#x2F;4&#x2F;29 14:15</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VolatileTest &#123;</span><br><span class="line">    private volatile Object varWithinVolatile;</span><br><span class="line">    private Object varWithoutVolatile;</span><br><span class="line">    public void testVolatile()&#123;</span><br><span class="line">        varWithinVolatile &#x3D; new Object();</span><br><span class="line">    &#125;</span><br><span class="line">    public void testNonvolatile()&#123;</span><br><span class="line">        varWithoutVolatile &#x3D; new Object();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        VolatileTest volatileTest &#x3D; new VolatileTest();</span><br><span class="line">        volatileTest.testVolatile();</span><br><span class="line">        volatileTest.testNonvolatile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上面的代码用javap -verbose命令查看生成的字节码文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  public void testVolatile();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;2, locals&#x3D;2, args_size&#x3D;1</span><br><span class="line">         0: iconst_1</span><br><span class="line">         1: istore_1</span><br><span class="line">         2: aload_0</span><br><span class="line">         3: iconst_1</span><br><span class="line">         4: invokestatic  #2                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Integer.valueOf:(I)Ljava&#x2F;lang&#x2F;Integer;</span><br><span class="line">         7: putfield      #3                  &#x2F;&#x2F; Field varWithinVolatile:Ljava&#x2F;lang&#x2F;Integer;</span><br><span class="line">        10: return</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  public void testNonvolatile();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;2, locals&#x3D;2, args_size&#x3D;1</span><br><span class="line">         0: iconst_1</span><br><span class="line">         1: istore_1</span><br><span class="line">         2: aload_0</span><br><span class="line">         3: iconst_1</span><br><span class="line">         4: invokestatic  #2                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Integer.valueOf:(I)Ljava&#x2F;lang&#x2F;Integer;</span><br><span class="line">         7: putfield      #4                  &#x2F;&#x2F; Field varWithoutVolatile:Ljava&#x2F;lang&#x2F;Integer;</span><br><span class="line">        10: return</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>通过对比发现生成的字节码指令都是一样的，所以对于volatile的实现肯定不是通过字节码指令来实现的。我们看下生成的汇编代码，在输出的汇编代码中我们很快能找到第12行代码所对应的汇编代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x000002c53322c2c4: mov     rax,qword ptr [rsp+20h]</span><br><span class="line">0x000002c53322c2c9: mov     rdx,qword ptr [rsp+28h]</span><br><span class="line">0x000002c53322c2ce: mov     r10,rax</span><br><span class="line">0x000002c53322c2d1: shr     r10,3h</span><br><span class="line">0x000002c53322c2d5: mov     dword ptr [rdx+0ch],r10d</span><br><span class="line">0x000002c53322c2d9: shr     rdx,9h</span><br><span class="line">0x000002c53322c2dd: mov     rsi,2c53eb75000h</span><br><span class="line">0x000002c53322c2e7: mov     byte ptr [rdx+rsi],0h</span><br><span class="line">0x000002c53322c2eb: lock add dword ptr [rsp],0h  ;*putfield varWithinVolatile</span><br><span class="line">                                              ; - thread.VolatileTest::testVolatile@8 (line 12)</span><br></pre></td></tr></table></figure>
<p>在看下第13行代码的汇编代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x000002c533230ec4: mov     rax,qword ptr [rsp+20h]</span><br><span class="line">0x000002c533230ec9: mov     rdx,qword ptr [rsp+28h]</span><br><span class="line">0x000002c533230ece: mov     r10,rax</span><br><span class="line">0x000002c533230ed1: shr     r10,3h</span><br><span class="line">0x000002c533230ed5: mov     dword ptr [rdx+10h],r10d</span><br><span class="line">0x000002c533230ed9: shr     rdx,9h</span><br><span class="line">0x000002c533230edd: mov     rsi,2c53eb75000h</span><br><span class="line">0x000002c533230ee7: mov     byte ptr [rdx+rsi],0h  ;*putfield varWithoutVolatile</span><br><span class="line">                                              ; - thread.VolatileTest::testNonvolatile@8 (line 15)</span><br><span class="line"></span><br><span class="line">0x000002c533230eeb: add     rsp,40h</span><br></pre></td></tr></table></figure>
<p>通过两个语句的汇编代码我们可以看出被volatile修饰的变量在被修改之后会多一条<code>lock add dword ptr [rsp],0h</code>指令。该指令的作用相当于一个内存屏障，指重排序时不能把后面的指令排序到内存屏障之前。</p>
<h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><p>lock指令的作用时将本处理器的缓存写入了内存，该写入动作会引起别的处理器或者别的内核无效化器缓存，所以通过该操作，可以让volatile变量的修改对其它线程立即可见。对于lock指令的更多描述你可以通过查询IA32手册来获取。</p>
<h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然需要通过加锁来保证原子性：</p>
<ul>
<li>运算结果并不依赖变量的当前值。</li>
<li>该变量没有包含在具有其他变量的不变式中</li>
</ul>
<p>通俗来讲就是，如果能保证对被volatile修饰的变量的修改操作是原子性操作的话，volatile就能够用来解决同步问题。<br>下面列举Java中使用volatile的几个场景：</p>
<ul>
<li>状态量标记</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatile boolean flag &#x3D; false;</span><br><span class="line"> </span><br><span class="line">while(!flag)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void setFlag() &#123;</span><br><span class="line">    flag &#x3D; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>单例的双重检查</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton&#123;</span><br><span class="line">    private volatile static Singleton instance &#x3D; null;</span><br><span class="line">     </span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if(instance&#x3D;&#x3D;null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if(instance&#x3D;&#x3D;null)</span><br><span class="line">                    instance &#x3D; new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>被volatile修饰的变量会具备两项特性：可见性和禁止指令重排序。如果要想只使用volatile来完成同步的话，那么一定要保证对于变量的修改是原子操作。</p>
]]></content>
      <tags>
        <tag>并发</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-bean的生命周期</title>
    <url>/posts/9483b875/</url>
    <content><![CDATA[<h1 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h1><p><img src="/posts/9483b875/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="bean生命周期"><br>上图展示了bean的生命周期。在本文中，我们将追根溯源，寻找生命周期的各个过程中在源码中到底在哪实现的。</p>
<h1 id="所用示例代码"><a href="#所用示例代码" class="headerlink" title="所用示例代码"></a>所用示例代码</h1><hr>
<h2 id="需要注入的bean"><a href="#需要注入的bean" class="headerlink" title="需要注入的bean"></a>需要注入的bean</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBean implements BeanNameAware, BeanClassLoaderAware, BeanFactoryAware, EnvironmentAware,</span><br><span class="line">        EmbeddedValueResolverAware, ApplicationContextAware, InitializingBean, DisposableBean &#123;</span><br><span class="line">    public MyBean() &#123;</span><br><span class="line">        System.out.println(&quot;实例化bean对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBeanName(String name) &#123;</span><br><span class="line">        System.out.println(&quot;执行了BeanNameAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBeanClassLoader(ClassLoader classLoader) &#123;</span><br><span class="line">        System.out.println(&quot;执行了BeanClassLoaderAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBeanFactory(BeanFactory beanFactory) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;执行了BeanFactoryAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;执行了ApplicationContextAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setEmbeddedValueResolver(StringValueResolver resolver) &#123;</span><br><span class="line">        System.out.println(&quot;执行了EmbeddedValueResolverAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setEnvironment(Environment environment) &#123;</span><br><span class="line">        System.out.println(&quot;执行了EnvironmentAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        System.out.println(&quot;设置对象属性&quot;);</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void initMethod() &#123;</span><br><span class="line">        System.out.println(&quot;执行自定义init-method方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void destroyMethod() &#123;</span><br><span class="line">		System.out.println(&quot;执行destroy方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;调用了afterPropertiesSet&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Disposable.destroy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义的BeanPostProcessor"><a href="#自定义的BeanPostProcessor" class="headerlink" title="自定义的BeanPostProcessor"></a>自定义的BeanPostProcessor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBeanPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;BeanPostProcessor前置处理&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;BeanPostProcessor后置处理&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">    http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;myBean&quot; class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyBean&quot; init-method&#x3D;&quot;initMethod&quot;</span><br><span class="line">          destroy-method&#x3D;&quot;destroyMethod&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;悦哥哥&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyBeanPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例化bean对象</span><br><span class="line">设置对象属性</span><br><span class="line">执行了BeanNameAware接口</span><br><span class="line">执行了BeanClassLoaderAware接口</span><br><span class="line">执行了BeanFactoryAware接口</span><br><span class="line">执行了EnvironmentAware接口</span><br><span class="line">执行了EmbeddedValueResolverAware接口</span><br><span class="line">执行了ApplicationContextAware接口</span><br><span class="line">BeanPostProcessor前置处理</span><br><span class="line">调用了afterPropertiesSet</span><br><span class="line">执行自定义init-method方法</span><br><span class="line">BeanPostProcessor后置处理</span><br><span class="line">使用bean</span><br><span class="line">Disposable.destroy</span><br><span class="line">执行destroy方法</span><br></pre></td></tr></table></figure>
<hr>
<p>上面的运行结果也进一步验证了上面图片中的bean生命周期。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="实例化bean对象"><a href="#实例化bean对象" class="headerlink" title="实例化bean对象"></a>实例化bean对象</h2><p>从前面的文章我们可以得知，bean开始初始化的方法是<code>AbstractBeanFactory#doGetBean()</code>，我们在该方法内打上断点。<img src="/posts/9483b875/1.PNG" alt="doGetBean"><br>从这里就正式开始了，getSingleton(name)的作用是从beanFactory中尝试去获取目标bean对象，我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">	&#x2F;&#x2F; Quick check for existing instance without full singleton lock</span><br><span class="line">	Object singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">	if (singletonObject &#x3D;&#x3D; null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">		singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">		if (singletonObject &#x3D;&#x3D; null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">			synchronized (this.singletonObjects) &#123;</span><br><span class="line">				&#x2F;&#x2F; Consistent creation of early reference within full singleton lock</span><br><span class="line">				singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">				if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">					singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">					if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">						ObjectFactory&lt;?&gt; singletonFactory &#x3D; this.singletonFactories.get(beanName);</span><br><span class="line">						if (singletonFactory !&#x3D; null) &#123;</span><br><span class="line">							singletonObject &#x3D; singletonFactory.getObject();</span><br><span class="line">							this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">							this.singletonFactories.remove(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个方法的逻辑也很简单，首先从单例池中获取”myBean”所对应的bean对象，获取的结果肯定是null的，isSingletonCurrentlyInCreation方法是用来判断当前单例是否在创建中，该值肯定也是空的，因为此时bean对象还并未实例化。通过调试来看上面的推理也确实是正确的。<img src="/posts/9483b875/2.PNG" alt="getSingleton"><br>所以说该方法返回的结果是null，beanFactory会先去创建该bean对象，我们一路跟踪到下面这行代码<img src="/posts/9483b875/3.PNG" alt="getSingleton">，此方法的第二个参数传入的是一个lamda表达是（匿名内部类）。将该形式改成这样就明白了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sharedInstance &#x3D; getSingleton(beanName, new ObjectFactory() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public MyBean getObject() throws BeansException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return createBean (beanName, mbd, args);(1)</span><br><span class="line">            &#125; catch (BeansException ex) &#123;</span><br><span class="line">                &#x2F;&#x2F; Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">                &#x2F;&#x2F; eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">                &#x2F;&#x2F; Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">                destroySingleton(beanName);</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p> 我们进入<strong>getSingleton</strong>方法<br> <img src="/posts/9483b875/4.PNG" alt="准备创建bean">当我们点击单步执行，会发现其实调用的就是上面代码（1）处的方法，我们进入此方法，直接找到<strong>doCreateBean</strong>方法（ps:spring中真正的逻辑处理的方法基本都是以do开头的）。也就是下面这行代码<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object beanInstance &#x3D; doCreateBean(beanName, mbdToUse, args);</span><br></pre></td></tr></table></figure><br> 我们按F7进入此方法<img src="/posts/9483b875/5.PNG" alt="创建对象">发现最后有调用了下面这个方法<img src="/posts/9483b875/6.PNG"><br> F7进入此方法发现最终进入的是下面这个方法<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beanInstance &#x3D; getInstantiationStrategy().instantiate(mbd, beanName, this);</span><br></pre></td></tr></table></figure><br> 我们再进入==instantiate==方法发现有调用了一个工具类来创建bean对象<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BeanUtils.instantiateClass(constructorToUse);</span><br></pre></td></tr></table></figure><br> 接着F7，终于看到创建实例的代码了。。。可以看到这里是通过反射来创建bean对象的。<br> <img src="/posts/9483b875/7.PNG" alt="利用反射创建对象"><br> 到此<strong>实例化bean对象</strong>这部分我们就搞清楚了。</p>
<h2 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h2><p> 我们debug接着往下走，当bean对象实例化完成之后，类中的属性值肯定是空的，我们可以通过调试来验证我们的推断。<img src="/posts/9483b875/8.PNG"><br> 那么，bean中的属性是在哪里被填充的呢？再<strong>oCreateBean</strong>方法中你会发现如下一行代码<img src="/posts/9483b875/9.PNG"><br> populate，意思是填充。猜这里应该是属性值填充的地方，我们按F9（step over），再看调试面板中的bean的属性值，会发现此时属性已经有值了。<img src="/posts/9483b875/10.PNG"><br> 这里也验证了bean中的属性值是在这里被填充的。</p>
<h2 id="检查Aware相关接口并设置相关依赖"><a href="#检查Aware相关接口并设置相关依赖" class="headerlink" title="检查Aware相关接口并设置相关依赖"></a>检查Aware相关接口并设置相关依赖</h2><p>我们接着往下走进入<strong>initializeBean</strong>方法，在该方法中发现了下面一行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">invokeAwareMethods(beanName, bean);</span><br></pre></td></tr></table></figure>
<p>通过该方法名就能推断处是调用相关Aware方法的，我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void invokeAwareMethods(String beanName, Object bean) &#123;</span><br><span class="line">	if (bean instanceof Aware) &#123;</span><br><span class="line">		if (bean instanceof BeanNameAware) &#123;</span><br><span class="line">			((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof BeanClassLoaderAware) &#123;</span><br><span class="line">			ClassLoader bcl &#x3D; getBeanClassLoader();</span><br><span class="line">			if (bcl !&#x3D; null) &#123;</span><br><span class="line">				((BeanClassLoaderAware) bean).setBeanClassLoader(bcl);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof BeanFactoryAware) &#123;</span><br><span class="line">			((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中我们确实发现了调用<code>BeanNameAwaare</code>、<code>BeanClassLoaderAware</code>、<code>BeanFactoryAware</code>接口所实现的方法。跳出该方法，查看控制台输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例化bean对象</span><br><span class="line">设置对象属性</span><br><span class="line">执行了BeanNameAware接口</span><br><span class="line">执行了BeanClassLoaderAware接口</span><br><span class="line">执行了BeanFactoryAware接口</span><br></pre></td></tr></table></figure>
<p>细心的你可能发现了这个问题：这里只调用了<code>BeanNameAware</code>，<code>BeanClassLoaderAware</code>，<code>BeanFactoryAware</code>，剩下三个<code>EnvironmentAware</code>，<code>EmbeddedValueResolverAware</code>，<code>ApplicationContextAware</code>在哪里调用的呢？不着急，我们接着往下走，发现执行了下面这行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wrappedBean &#x3D; applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br></pre></td></tr></table></figure>
<p>我们进入==applyBeanPostProcessorsBeforeInitialization==方法<img src="/posts/9483b875/11.PNG">spring在这里调用了BeanPostProcessor的前置处理方法，第一个<code>BeanPostProcessor</code>是<code>ApplicationContextAwareProcessor</code>我们debug进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    &#x2F;&#x2F;如果不是下列类型的类直接返回</span><br><span class="line">	if (!(bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||</span><br><span class="line">			bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||</span><br><span class="line">			bean instanceof MessageSourceAware || bean instanceof ApplicationContextAware ||</span><br><span class="line">			bean instanceof ApplicationStartupAware)) &#123;</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br><span class="line">	AccessControlContext acc &#x3D; null;</span><br><span class="line"></span><br><span class="line">	if (System.getSecurityManager() !&#x3D; null) &#123;</span><br><span class="line">		acc &#x3D; this.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (acc !&#x3D; null) &#123;</span><br><span class="line">		AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">			invokeAwareInterfaces(bean);</span><br><span class="line">			return null;</span><br><span class="line">		&#125;, acc);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">	    &#x2F;&#x2F;之后调用Aware的相关方法</span><br><span class="line">		invokeAwareInterfaces(bean);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里我们发现了剩下的三个Aware是在这里调用的，其实Spring在<strong>prepareBeanFactory</strong>方法中就为我们添加了该BeanPostProcessor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">        &#x2F;&#x2F; Tell the internal bean factory to use the context&#39;s class loader etc.</span><br><span class="line">        beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">        beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">        beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 添加ApplicationContextAware的处理器</span><br><span class="line">        beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class="line">        beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line">                ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>到这里检查Aware相关接口并设置相关依赖也就清楚了。</p>
<h2 id="BeanPostProcessor前置处理"><a href="#BeanPostProcessor前置处理" class="headerlink" title="BeanPostProcessor前置处理"></a>BeanPostProcessor前置处理</h2><p>对BeanPostProcessor前置处理调用的就是如下方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)</span><br><span class="line">		throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">	Object result &#x3D; existingBean;</span><br><span class="line">	for (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">		Object current &#x3D; processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">		if (current &#x3D;&#x3D; null) &#123;</span><br><span class="line">			return result;</span><br><span class="line">		&#125;</span><br><span class="line">		result &#x3D; current;</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法的逻辑也是非常清楚的：取出beanFactory中的所有BeanPostProcessor，然后循环去调用前置处理方法。</p>
<h2 id="检查是否是InitializingBean以决定是否调用afterPropertiesSet方法"><a href="#检查是否是InitializingBean以决定是否调用afterPropertiesSet方法" class="headerlink" title="检查是否是InitializingBean以决定是否调用afterPropertiesSet方法"></a>检查是否是InitializingBean以决定是否调用afterPropertiesSet方法</h2><p>我们接着往下执行发现进入的是如下方法<img src="/posts/9483b875/12.PNG"><br>进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeInitMethods(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span><br><span class="line">		throws Throwable &#123;</span><br><span class="line">	&#x2F;&#x2F;判断是否实现了InitializingBean接口</span><br><span class="line">	boolean isInitializingBean &#x3D; (bean instanceof InitializingBean);(1)</span><br><span class="line">	if (isInitializingBean &amp;&amp; (mbd &#x3D;&#x3D; null || !mbd.isExternallyManagedInitMethod(&quot;afterPropertiesSet&quot;))) &#123;</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Invoking afterPropertiesSet() on bean with name &#39;&quot; + beanName + &quot;&#39;&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;调用afterPropertiesSet方法</span><br><span class="line">		if (System.getSecurityManager() !&#x3D; null) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">					((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">					return null;</span><br><span class="line">				&#125;, getAccessControlContext());</span><br><span class="line">			&#125;</span><br><span class="line">			catch (PrivilegedActionException pae) &#123;</span><br><span class="line">				throw pae.getException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			((InitializingBean) bean).afterPropertiesSet();(2)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法的逻辑也是很清楚的，在(1)处判断了此bean是否实现了InitializingBean接口，如果实现了此接口则调用<strong>afterPropertiesSet</strong>方法，在(2)处打上断点，进入此方法，发现调用的确实是<code>MyBean#afterPropertiesSet()</code>方法，执行完此方法之后，控制台也新增了一条输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用了afterPropertiesSet</span><br></pre></td></tr></table></figure>
<h2 id="检查是否配置有自定义的init-method"><a href="#检查是否配置有自定义的init-method" class="headerlink" title="检查是否配置有自定义的init-method"></a>检查是否配置有自定义的init-method</h2><p>还是看上面的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeInitMethods(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span><br><span class="line">		throws Throwable &#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	if (mbd !&#x3D; null &amp;&amp; bean.getClass() !&#x3D; NullBean.class) &#123;</span><br><span class="line">		String initMethodName &#x3D; mbd.getInitMethodName();</span><br><span class="line">		if (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class="line">				!(isInitializingBean &amp;&amp; &quot;afterPropertiesSet&quot;.equals(initMethodName)) &amp;&amp;</span><br><span class="line">				!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">            &#x2F;&#x2F;调用初始化方法    </span><br><span class="line">			invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>invokeCustomInitMethod</strong>根据名称就能大致推断是调用初始化方法，我们在此打上断点进入此方法（省略了一些代码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeCustomInitMethod(String beanName, Object bean, RootBeanDefinition mbd)</span><br><span class="line">			throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">	String initMethodName &#x3D; mbd.getInitMethodName();</span><br><span class="line">	Assert.state(initMethodName !&#x3D; null, &quot;No init method set&quot;);</span><br><span class="line">	Method initMethod &#x3D; (mbd.isNonPublicAccessAllowed() ?</span><br><span class="line">	    BeanUtils.findMethod(bean.getClass(), initMethodName) :</span><br><span class="line">	    ClassUtils.getMethodIfAvailable(bean.getClass(), initMethodName));(1)</span><br><span class="line">	...</span><br><span class="line">	Method methodToInvoke &#x3D; ClassUtils.getInterfaceMethodIfPossible(initMethod);</span><br><span class="line"></span><br><span class="line">	if (System.getSecurityManager() !&#x3D; null) &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			ReflectionUtils.makeAccessible(methodToInvoke);</span><br><span class="line">			&#x2F;&#x2F;通过反射直接调用初始化方法</span><br><span class="line">			methodToInvoke.invoke(bean);(2)</span><br><span class="line">		&#125;</span><br><span class="line">		catch (InvocationTargetException ex) &#123;</span><br><span class="line">			throw ex.getTargetException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面的主要逻辑是在(1)处通过Class对象来获取初始化Method，在(2)处进行调用。我们在(2)处打上断点，进入此方法，发现也就是我们自定义的初始化方法。<img src="/posts/9483b875/13.PNG"><br>之后跳出此方法查看控制台，确实也打印了预期的内容。<img src="/posts/9483b875/14.PNG"></p>
<h2 id="BeanPostProcessor后置处理"><a href="#BeanPostProcessor后置处理" class="headerlink" title="BeanPostProcessor后置处理"></a>BeanPostProcessor后置处理</h2><p>我们接在<strong>initializeBean</strong>方法中往下看，发现了如下方法<strong>applyBeanPostProcessorsAfterInitialization</strong>，根据名字就能推断处BeanPostProcessor的后置处理方法就是在此处调用的。我们1在该行代码打上断点，进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)</span><br><span class="line">		throws BeansException &#123;</span><br><span class="line">	Object result &#x3D; existingBean;</span><br><span class="line">	for (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">		Object current &#x3D; processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">		if (current &#x3D;&#x3D; null) &#123;</span><br><span class="line">			return result;</span><br><span class="line">		&#125;</span><br><span class="line">		result &#x3D; current;</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面就是获取了所有的BeanPostProcessor，然后循环调用器后置处理方法。至此，bean的初始化流程也就完成了。</p>
<h2 id="注册DisposableBean"><a href="#注册DisposableBean" class="headerlink" title="注册DisposableBean"></a>注册DisposableBean</h2><p>我们继续往下debug，在<strong>oCreateBean</strong>方法中发现了如下一行代码<img src="/posts/9483b875/15.PNG"><br>就跟名字就能推断出是跟bean销毁相关的逻辑，我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">	AccessControlContext acc &#x3D; (System.getSecurityManager() !&#x3D; null ? getAccessControlContext() : null);</span><br><span class="line">	if (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;(1)</span><br><span class="line">		if (mbd.isSingleton()) &#123;</span><br><span class="line">			&#x2F;&#x2F; Register a DisposableBean implementation that performs all destruction</span><br><span class="line">			&#x2F;&#x2F; work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class="line">			&#x2F;&#x2F; DisposableBean interface, custom destroy method.</span><br><span class="line">			registerDisposableBean(beanName, new DisposableBeanAdapter(</span><br><span class="line">					bean, beanName, mbd, getBeanPostProcessorCache().destructionAware, acc));(2)</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			&#x2F;&#x2F; A bean with a custom scope...</span><br><span class="line">			Scope scope &#x3D; this.scopes.get(mbd.getScope());</span><br><span class="line">			if (scope &#x3D;&#x3D; null) &#123;</span><br><span class="line">				throw new IllegalStateException(&quot;No Scope registered for scope name &#39;&quot; + mbd.getScope() + &quot;&#39;&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			scope.registerDestructionCallback(beanName, new DisposableBeanAdapter(</span><br><span class="line">					bean, beanName, mbd, getBeanPostProcessorCache().destructionAware, acc));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在(1)处的if语句里有一个<strong>requireDestruction</strong>方法，此方法就是判断bean中是否有销毁方法。(2)的作用就是将该bean添加到disposableBeans中，后面调用销毁方法的时候执行销毁方法。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Bean生命周期</tag>
        <tag>Bean加载</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁-Redis实现</title>
    <url>/posts/71b0990/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<a href="../4eb3381c">分布式锁</a>这篇文章中，已经介绍过了分布式锁的概念以及一个分布式锁所需要满足的条件。在本篇文章中将通过redis来实现一个简易的分布式锁。在完成一个功能时你首先得知道要求是什么，为了保证分布式锁可用，所实现的分布式锁至少需要满足以下条件：</p>
<ul>
<li>互斥性。在任意时刻，只能有一个客户端持有锁。</li>
<li>避免死锁。当客户端在持有锁期间崩溃而没有主动释放锁时需要保证后续其它客户端能够获得该锁，实现该功能可以通过给锁加上一个超时时间来解决。</li>
<li>加锁和解锁必须是相同的客户端，解锁时只能解自己加的锁。</li>
<li>锁超时，由于业务处理时间过长，导致业务逻辑还未处理完锁就因为超过了过期时间自动释放掉了。</li>
<li>锁可重入。客户端在外层使用锁之后，在内层仍然可以使用锁，并且不会发生死锁。</li>
</ul>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="互斥性"><a href="#互斥性" class="headerlink" title="互斥性"></a>互斥性</h2><p>解决互斥性问题，有两种方式，setNx和lua脚本来实现。</p>
<h3 id="setNx"><a href="#setNx" class="headerlink" title="setNx"></a>setNx</h3><p>setNx即SET if NOT eXist的缩写，只有当设置的key不存在时才会设置成功，当key存在时设置key会失败。要给某一资源加锁时使用setNx命令key就为要加锁的资源，当没有客户端持有该锁时，会设置成功，设置成功之后就代表该客户端持有该锁了。当下一个客户端来获取该资源的锁时，在使用该命令时会设置失败，此时就代表获取该资源的锁失败了。这样就实现了锁的互斥性功能。</p>
<h3 id="lua脚本实现互斥性"><a href="#lua脚本实现互斥性" class="headerlink" title="lua脚本实现互斥性"></a>lua脚本实现互斥性</h3><p>Redis从2.6之后就开始支持lua脚本，lua和事务的功能类似，可以通过lua脚本打包多个Redis命令并执行原子操作。可以编写如下一个脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0 then </span><br><span class="line">   redis.call(&#39;set&#39;, KEYS[1], ARGV[1]);</span><br><span class="line">   return 1;</span><br><span class="line">else</span><br><span class="line">   return 0;</span><br><span class="line">end;   </span><br></pre></td></tr></table></figure>
<p>在该脚本中KEYS[1]就是我们要加锁的资源名，ARGV[1]是key对应的值。在该脚本中首先会去判断key是否存在，如果不存在则设置key和key的值并返回1，如果key存在直接返回0代表加锁失败。</p>
<h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><p>避免死锁可以通过给锁设置一个过期时间来结果，如果客户端崩溃时没有主动释放锁的话，在过期时间之后该锁就会自动释放掉。但这可能会引发另一个问题：锁超时，就是可能业务逻辑在过期时间之后还未处理完成，这时候锁会被释放掉，这样另外的客户端就能获取到锁。导致的结果就是同时有两台客户端在执行业务逻辑，这可能会出问题。</p>
<h3 id="setNx-1"><a href="#setNx-1" class="headerlink" title="setNx"></a>setNx</h3><p>在使用setNx是可以使用额外的参数过期时间，这样在设置时就会将key设置上过期时间，在过期时间之后就会释放掉该锁，这样其它客户端就能拿到该锁了。</p>
<h3 id="使用lua脚本解决死锁"><a href="#使用lua脚本解决死锁" class="headerlink" title="使用lua脚本解决死锁"></a>使用lua脚本解决死锁</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0 then </span><br><span class="line">   redis.call(&#39;set&#39;, KEYS[1], ARGV[2]);</span><br><span class="line">   redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[2]); #设置过期时间</span><br><span class="line">   return 1;</span><br><span class="line">else</span><br><span class="line">   return 0;</span><br><span class="line">end;  </span><br></pre></td></tr></table></figure>
<p>可以看到就是当获取到锁之后就去设置锁的过期时间，如果客户端由于崩溃没有释放掉锁这样锁在过期之后也能主动释放掉。</p>
<h2 id="加解锁必须是同一客户端"><a href="#加解锁必须是同一客户端" class="headerlink" title="加解锁必须是同一客户端"></a>加解锁必须是同一客户端</h2><p>实现该功能可以在设置锁的时候将key锁对应的值设置为一个唯一值，在解锁时根据该值来判断该锁是不是自己申请的锁，如果是，才会释放掉该锁。</p>
<h2 id="解决锁超时"><a href="#解决锁超时" class="headerlink" title="解决锁超时"></a>解决锁超时</h2><p>解决业务逻辑处理时间过长而导致的锁超时问题，可以在获取到锁之后，就开启一个线程（看门狗），该线程的作用就是如果业务逻辑还未处理完且锁快要过期的时候对锁进行延期。在延期时由于需要先判断该锁是不是自己加的锁，是自己加的锁才会对锁进行延期。对应了两个redis命令，所以这里也需要使用lua脚本来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if redis.call(&#39;get&#39;, KEYS[1]) &#x3D;&#x3D; ARGV[1] then </span><br><span class="line">   return redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[2]);</span><br><span class="line">else return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="锁可重入"><a href="#锁可重入" class="headerlink" title="锁可重入"></a>锁可重入</h2><p>要实现可重入功能，在申请锁时就要存储额外的信息–同一客户端（业务请求）加锁的次数。同一客户端在申请锁时会将该值加一，在释放锁时会将该值减一，当该值等于0时就代表需要释放该锁了。判断加锁的请求是不是同一客户端我们可以在加锁时存储一个唯一值，该值可以判断请求加锁的是哪个客户端（可以使用mac+jvm id+thread id）。要实现锁重入功能就需要修改我们的lua脚本，加锁时锁的value可以使用Redis中的哈希表来存储，哈希表的key是客户端加锁时的唯一标识（相当于身份证），哈希表的value是加锁的次数。如果是同一客户端在此加锁时将该值加一，解锁时将该值减一。所以我们就需要修改前面的lua脚本了。</p>
<h3 id="加锁脚本"><a href="#加锁脚本" class="headerlink" title="加锁脚本"></a>加锁脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0) then </span><br><span class="line">    redis.call(&#39;hset&#39;, KEYS[1], ARGV[2], 1); </span><br><span class="line">    redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]);</span><br><span class="line">    return nil;</span><br><span class="line">end;</span><br><span class="line">if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then</span><br><span class="line">    redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[2], 1);</span><br><span class="line">    redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]);</span><br><span class="line">    return nil;</span><br><span class="line">end;</span><br><span class="line">return redis.call(&#39;pttl&#39;, KEYS[1]);</span><br></pre></td></tr></table></figure>
<p>介绍下脚本中传入的参数代表的含义。</p>
<ul>
<li>KEYS[1]：锁名称（资源名称）。</li>
<li>ARGV[1]：锁过期时间。</li>
<li>ARGV[2]：客户端（业务请求）的唯一标识。</li>
</ul>
<p>在执行脚本时会先去判断锁名称是否存在，也就是是否有客户端已经持有该锁了。如果没有客户端持有该锁那么就利用hset命令保存一个哈希表并在哈希表中设置该客户端的加锁次数为1，并设置哈希表（锁）的过期时间；如果此时已经有客户端持有锁，这会去执行第二个if语句，判断该锁是不是自己持有的，如果是则将加锁次数加一并重新设置锁的过期时间；可以看到如果执行该脚本之后返回结果为nil（空）时代表加锁成功否则代表加锁失败。</p>
<h3 id="延时脚本"><a href="#延时脚本" class="headerlink" title="延时脚本"></a>延时脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then</span><br><span class="line">    redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]);</span><br><span class="line">    return 1;</span><br><span class="line">end;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure>
<p>该脚本中参数所代表的含义和加锁脚本中参数含义是相同的。执行脚本时会去判断自己有没有持有该锁，如果持有该锁则对锁延时。执行该脚本延时成功的返回值是1，延时失败的返回值是0。</p>
<h3 id="解锁脚本"><a href="#解锁脚本" class="headerlink" title="解锁脚本"></a>解锁脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0) then</span><br><span class="line">    redis.call(&#39;publish&#39;, KEYS[2], ARGV[1]);</span><br><span class="line">    return 1;</span><br><span class="line">end;</span><br><span class="line">if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[3]) &#x3D;&#x3D; 0) then</span><br><span class="line"> return nil;</span><br><span class="line">end;</span><br><span class="line">local counter &#x3D; redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[3], -1);</span><br><span class="line">if (counter &gt; 0) then</span><br><span class="line"> redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[2]);</span><br><span class="line">    return 0;</span><br><span class="line">else </span><br><span class="line"> redis.call(&#39;del&#39;, KEYS[1]);</span><br><span class="line">    redis.call(&#39;publish&#39;, KEYS[2], ARGV[1]);</span><br><span class="line">    return 1;</span><br><span class="line">end; </span><br><span class="line">return nil;</span><br></pre></td></tr></table></figure>
<p>脚本中各参数的具体含义：</p>
<ul>
<li>KEYS[1]：所名称</li>
<li>KEYS[2]：redisson_lock__channel:{锁名字}，用于锁失效时给订阅了该频道的客户端发送消息，好让客户端去竞争锁。</li>
<li>ARGV[1]：解锁的标识符。</li>
<li>ARGV[2]：锁过期时间。</li>
<li>ARGV[3]：加锁的标识符。</li>
</ul>
<p>在执行该脚本时首先会去判断按该锁是否存在，如果不存在则通知其它客户端去竞争锁。如果锁存在则判断该锁是不是自己持有的，如果不是直接返回空。如果时自己持有的话则将加锁次数减一之后再怕判断是否该释放锁，如果加锁次数大于0的话，此时不释放锁直接将加锁次数减一。如果加锁次数等于0就代表需要真正释放该锁了。执行该脚本时返回值为1代表解锁成功，并释放掉锁了。返回值为0代表将加锁次数减一。返回值为null代表该锁不是自己所持有的。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="RedisDistributedLock-java"><a href="#RedisDistributedLock-java" class="headerlink" title="RedisDistributedLock.java"></a>RedisDistributedLock.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RedisDistributedLock implements DistributedLock, LockPostpone &#123;</span><br><span class="line">    private Integer database &#x3D; null;</span><br><span class="line">    Logger logger &#x3D; LoggerFactory.getLogger(RedisDistributedLock.class);</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 锁默认的过期时间(单位毫秒)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final Long DEFAULT_EXPIRED_TIME &#x3D; 30000L;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 是否需要开启延时线程</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private boolean needPostpone &#x3D; true;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 释放锁成功的返回结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final Long RELEASE_SUCCESS &#x3D; 1L;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 延时成功的返回结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final Long POSTPONE_SUCCESS &#x3D; 1L;</span><br><span class="line">    private static Map&lt;String, Postpone&gt; postponeMap &#x3D; new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private String sourceName;</span><br><span class="line">    private String uniqueStr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 锁前缀</span><br><span class="line">     *&#x2F;</span><br><span class="line">    static public String LOCK_PREFIX &#x3D; &quot;DCS_LOCK_&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String POSTPONE_REENTRANT_LOCK_SCRIPT &#x3D;</span><br><span class="line">            &quot;if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then\n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]);\n&quot; +</span><br><span class="line">                    &quot;    return 1;\n&quot; +</span><br><span class="line">                    &quot;end;\n&quot; +</span><br><span class="line">                    &quot;return 0;\n&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 可重入加锁脚本，KEYS[1]：锁名字，ARGS[1]过期时间，ARGS[2]：加锁时的唯一标识</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final String REENTRANT_LOCK_SCRIPT &#x3D;</span><br><span class="line">            &quot;if (redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0) then \n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;hset&#39;, KEYS[1], ARGV[2], 1); \n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]);\n&quot; +</span><br><span class="line">                    &quot;    return nil;\n&quot; +</span><br><span class="line">                    &quot;end;\n&quot; +</span><br><span class="line">                    &quot;if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then\n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[2], 1);\n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]);\n&quot; +</span><br><span class="line">                    &quot;    return nil;\n&quot; +</span><br><span class="line">                    &quot;end;\n&quot; +</span><br><span class="line">                    &quot;return redis.call(&#39;pttl&#39;, KEYS[1]);\n&quot;;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 可重入解锁脚本，KEYS[1]是锁名字</span><br><span class="line">     * KEYS[2]是 redisson_lock__channel:&#123;锁名字&#125; 这么一个东西，他其实也是个key，可以理解为主题， 发布订阅用的</span><br><span class="line">     * ARGV[1]是解锁的标识符</span><br><span class="line">     * ARGV[2] 过期时间</span><br><span class="line">     * ARGV[3] 加锁时的唯一标识</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final String REENTRANT_UNLOCK_SCRIPT &#x3D;</span><br><span class="line">            &quot;if (redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0) then\n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;publish&#39;, KEYS[2], ARGV[1]);\n&quot; +</span><br><span class="line">                    &quot;    return 1;\n&quot; +</span><br><span class="line">                    &quot;end;\n&quot; +</span><br><span class="line">                    &quot;if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[3]) &#x3D;&#x3D; 0) then\n&quot; +</span><br><span class="line">                    &quot; return nil;\n&quot; +</span><br><span class="line">                    &quot;end;\n&quot; +</span><br><span class="line">                    &quot;local counter &#x3D; redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[3], -1);\n&quot; +</span><br><span class="line">                    &quot;if (counter &gt; 0) then\n&quot; +</span><br><span class="line">                    &quot; redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[2]);\n&quot; +</span><br><span class="line">                    &quot;    return 0;\n&quot; +</span><br><span class="line">                    &quot;else \n&quot; +</span><br><span class="line">                    &quot; redis.call(&#39;del&#39;, KEYS[1]);\n&quot; +</span><br><span class="line">                    &quot;    redis.call(&#39;publish&#39;, KEYS[2], ARGV[1]);\n&quot; +</span><br><span class="line">                    &quot;    return 1;\n&quot; +</span><br><span class="line">                    &quot;end; \n&quot; +</span><br><span class="line">                    &quot;return nil;\n&quot;;</span><br><span class="line">    private JedisPool pool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public RedisDistributedLock(String sourceName, String clientId, JedisPool jedisPool, Integer database) &#123;</span><br><span class="line">        this.sourceName &#x3D; sourceName;</span><br><span class="line">        this.uniqueStr &#x3D; clientId;</span><br><span class="line">        this.pool &#x3D; jedisPool;</span><br><span class="line">        this.database &#x3D; database;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean tryLock() &#123;</span><br><span class="line">        return this.tryLock(DEFAULT_EXPIRED_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean lock() &#123;</span><br><span class="line">        return lock(DEFAULT_EXPIRED_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean tryLock(int timeout) &#123;</span><br><span class="line">        return tryLock(DEFAULT_EXPIRED_TIME, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean tryLock(Long expireTime) &#123;</span><br><span class="line">        Boolean locked &#x3D; false;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            locked &#x3D; setValueIfAbsent(LOCK_PREFIX + sourceName, uniqueStr, expireTime);</span><br><span class="line">            if (locked) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(uniqueStr + &quot;获取到了锁&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果获取锁成功则启动一个延时线程</span><br><span class="line">        if (locked &amp;&amp; needPostpone()) &#123;</span><br><span class="line">            startPostponeThread(expireTime);</span><br><span class="line">        &#125;</span><br><span class="line">        return Boolean.TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean lock(Long expireTime) &#123;</span><br><span class="line">        Boolean locked &#x3D; setValueIfAbsent(LOCK_PREFIX + sourceName, uniqueStr, expireTime);</span><br><span class="line">        &#x2F;&#x2F;如果获取锁成功则启动一个延时线程</span><br><span class="line">        if (locked &amp;&amp; needPostpone()) &#123;</span><br><span class="line">            startPostponeThread(expireTime);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!locked) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(uniqueStr + &quot;未获取到锁&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(uniqueStr + &quot;获取到了锁&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置锁</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param value</span><br><span class="line">     * @param expireTime</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Boolean setValueIfAbsent(String key, String value, Long expireTime) &#123;</span><br><span class="line">        Jedis jedis &#x3D; pool.getResource();</span><br><span class="line">        if (database !&#x3D; null) &#123;</span><br><span class="line">            jedis.select(0);</span><br><span class="line">        &#125;</span><br><span class="line">        Object result;</span><br><span class="line">        try &#123;</span><br><span class="line">            result &#x3D; jedis.eval(REENTRANT_LOCK_SCRIPT, Lists.newArrayList(key), Lists.newArrayList(String.valueOf(expireTime),</span><br><span class="line">                    value));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result &#x3D;&#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean tryLock(Long expireTime, int timeout) &#123;</span><br><span class="line">        Boolean locked &#x3D; false;</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        while ((System.currentTimeMillis() - begin) &lt;&#x3D; timeout) &#123;</span><br><span class="line">            locked &#x3D; setValueIfAbsent(LOCK_PREFIX + sourceName, uniqueStr, expireTime);</span><br><span class="line">            if (locked) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(uniqueStr + &quot;获取到了锁&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果获取锁成功则启动一个延时线程</span><br><span class="line">        if (locked &amp;&amp; needPostpone()) &#123;</span><br><span class="line">            startPostponeThread(expireTime);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!locked) &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(uniqueStr + &quot;未获取到锁&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void startPostponeThread(Long expireTime) &#123;</span><br><span class="line">        if (postponeMap.get(uniqueStr) !&#x3D; null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;如果获取到锁了，启动一个延时线程，防止业务逻辑未执行完毕就因锁超时而使锁释放</span><br><span class="line">        Postpone postpone &#x3D; new DefaultPostpone();</span><br><span class="line">        postponeMap.put(uniqueStr, postpone);</span><br><span class="line">        Thread postponeThread &#x3D; new Thread(new PostponeTask(uniqueStr, expireTime,</span><br><span class="line">                this, postpone));</span><br><span class="line">        &#x2F;&#x2F;将该线程设置为守护线程</span><br><span class="line">        postponeThread.setDaemon(Boolean.TRUE);</span><br><span class="line">        postponeThread.start();</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;为&quot; + uniqueStr + &quot;开启了延时线程&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean unlock() &#123;</span><br><span class="line">        Jedis jedis &#x3D; pool.getResource();</span><br><span class="line">        if (database !&#x3D; null) &#123;</span><br><span class="line">            jedis.select(0);</span><br><span class="line">        &#125;</span><br><span class="line">        Object result;</span><br><span class="line">        try &#123;</span><br><span class="line">            result &#x3D; jedis.eval(REENTRANT_UNLOCK_SCRIPT, Lists.newArrayList(LOCK_PREFIX + sourceName,</span><br><span class="line">                    &quot;redisson_lock__channel:&#123;&quot; + LOCK_PREFIX + sourceName + &quot;&#125;&quot;), Lists.newArrayList(uniqueStr,</span><br><span class="line">                    String.valueOf(DEFAULT_EXPIRED_TIME), uniqueStr));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">        if (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">            &#x2F;&#x2F;通知守护线程关闭</span><br><span class="line">            Postpone postpone &#x3D; postponeMap.get(uniqueStr);</span><br><span class="line">            if (postpone !&#x3D; null) &#123;</span><br><span class="line">                postpone.stopPostPone();</span><br><span class="line">                postponeMap.remove(uniqueStr);</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(uniqueStr + &quot;释放了锁&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return Boolean.TRUE;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(uniqueStr + &quot;未释放锁&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return Boolean.FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean postpone(long expireTime) &#123;</span><br><span class="line">        Jedis jedis &#x3D; pool.getResource();</span><br><span class="line">        if (database !&#x3D; null) &#123;</span><br><span class="line">            jedis.select(0);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            Object result &#x3D; jedis.eval(POSTPONE_REENTRANT_LOCK_SCRIPT, Lists.newArrayList(LOCK_PREFIX + sourceName),</span><br><span class="line">                    Lists.newArrayList(String.valueOf(expireTime), uniqueStr</span><br><span class="line">                    ));</span><br><span class="line">            if (POSTPONE_SUCCESS.equals(result)) &#123;</span><br><span class="line">                return Boolean.TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            return Boolean.FALSE;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean needPostpone() &#123;</span><br><span class="line">        return needPostpone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PostponeTask-java"><a href="#PostponeTask-java" class="headerlink" title="PostponeTask.java"></a>PostponeTask.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class PostponeTask implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 锁名所对应的值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String value;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置的过期时间</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private long expireTime;</span><br><span class="line">    private Postpone postPone;</span><br><span class="line">    private DistributedLock distributedLock;</span><br><span class="line">    Logger logger &#x3D; LoggerFactory.getLogger(PostponeTask.class);</span><br><span class="line"></span><br><span class="line">    public PostponeTask(String value, long expireTime, DistributedLock distributedLock, Postpone postPone) &#123;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">        this.expireTime &#x3D; expireTime;</span><br><span class="line">        this.distributedLock &#x3D; distributedLock;</span><br><span class="line">        this.postPone &#x3D; postPone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F;等待waitTime之后对锁续期</span><br><span class="line">        long waitTime &#x3D; expireTime * 2 &#x2F; 3;</span><br><span class="line">        while (!postPone.needStopPostPone()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(waitTime);</span><br><span class="line">                if (postPone.needStopPostPone()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;延时成功</span><br><span class="line">                if (distributedLock.postpone(expireTime)) &#123;</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(value + &quot;延期成功&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;延时失败</span><br><span class="line">                else &#123;</span><br><span class="line">                    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(value + &quot;延期失败&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;关闭了&quot; + value + &quot;的延时线程&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/ChunyuePeng/redigrandson-spring-boot-starter">完整代码地址</a></p>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务源码解析下</title>
    <url>/posts/fcb307c5/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<a href="../2eb81046">Spring事务源码解析上</a>这篇文章中，通过对源码的解析我们知道了在Spring中事务的实现是在<code>TransactionAspectSupport#invokeWithinTransaction()</code>方法。在本篇文章中将带你详细了解Spring关于事务实现的具体流程。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>invokeWithinTransaction方法的主要逻辑是先创建一个事务，然后执行业务方法，如果执行业务方法的过程中产生了异常，则对事务进行回滚，之后清除事务信息，最后通过事务状态来决定是否提交事务。下面我将对此流程通过源码的方式来进行详细的讲解。</p>
<h2 id="创建事务"><a href="#创建事务" class="headerlink" title="创建事务"></a>创建事务</h2><p>事务的创建调用的是<code>TransactionAspectSupport#createTransactionIfNecessary()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,</span><br><span class="line">		@Nullable TransactionAttribute txAttr, final String joinpointIdentification) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; If no name specified, apply method identification as transaction name.</span><br><span class="line">	if (txAttr !&#x3D; null &amp;&amp; txAttr.getName() &#x3D;&#x3D; null) &#123;</span><br><span class="line">		txAttr &#x3D; new DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class="line">			@Override</span><br><span class="line">			public String getName() &#123;</span><br><span class="line">				return joinpointIdentification;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	TransactionStatus status &#x3D; null;</span><br><span class="line">	if (txAttr !&#x3D; null) &#123;</span><br><span class="line">		if (tm !&#x3D; null) &#123;</span><br><span class="line">			&#x2F;&#x2F;创建事务信息对象</span><br><span class="line">			status &#x3D; tm.getTransaction(txAttr);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			if (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(&quot;Skipping transactional joinpoint [&quot; + joinpointIdentification +</span><br><span class="line">						&quot;] because no transaction manager has been configured&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;准备事务信息对象，并把事务信息对象绑定到当前线程上</span><br><span class="line">	return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法内又将创建事务的工作委托给了<code>PlatformTransactionManager#getTransaction()</code>方法，Spring在<code>AbstractPPlatformTransactionManager</code>中实现了该方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition)</span><br><span class="line">			throws TransactionException &#123;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Use defaults if no transaction definition given.</span><br><span class="line">	TransactionDefinition def &#x3D; (definition !&#x3D; null ? definition : TransactionDefinition.withDefaults());</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;Spring默认使用spring jdbc的事务，所以这里会创建DataSourceTransactionObject，并从事务管理器中取出</span><br><span class="line">	&#x2F;&#x2F;ConnectionHolder赋值给DataSourceTransactionObject对象的属性</span><br><span class="line">	Object transaction &#x3D; doGetTransaction();</span><br><span class="line">	boolean debugEnabled &#x3D; logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;判断是否已存在事务：根据DataSourceTransactionObject.connectionHolder是否为空判断</span><br><span class="line">	if (isExistingTransaction(transaction)) &#123;</span><br><span class="line">		&#x2F;&#x2F; Existing transaction found -&gt; check propagation behavior to find out how to behave.</span><br><span class="line">		&#x2F;&#x2F;存在事务，使用同上一个事务去处理操作</span><br><span class="line">		return handleExistingTransaction(def, transaction, debugEnabled);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Check definition settings for new transaction.</span><br><span class="line">	if (def.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">		throw new InvalidTimeoutException(&quot;Invalid transaction timeout&quot;, def.getTimeout());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span><br><span class="line">	&#x2F;&#x2F;不存在事务，检查传播行为以确定如何继续</span><br><span class="line">	if (def.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">		throw new IllegalTransactionStateException(</span><br><span class="line">				&quot;No existing transaction found for transaction marked with propagation &#39;mandatory&#39;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;如果是PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_NESTED这三种类型将开启新事务</span><br><span class="line">	else if (def.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">			def.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">			def.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">		&#x2F;&#x2F;此方法为暂停事务，由于没有已存在的事务，所以这里传的是null，表示无需暂停事务</span><br><span class="line">		SuspendedResourcesHolder suspendedResources &#x3D; suspend(null);</span><br><span class="line">		if (debugEnabled) &#123;</span><br><span class="line">			logger.debug(&quot;Creating new transaction with name [&quot; + def.getName() + &quot;]: &quot; + def);</span><br><span class="line">		&#125;</span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F;创建事务</span><br><span class="line">			return startTransaction(def, transaction, debugEnabled, suspendedResources);</span><br><span class="line">		&#125;</span><br><span class="line">		catch (RuntimeException | Error ex) &#123;</span><br><span class="line">			resume(null, suspendedResources);</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; Create &quot;empty&quot; transaction: no actual transaction, but potentially synchronization.</span><br><span class="line">		if (def.getIsolationLevel() !&#x3D; TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">			logger.warn(&quot;Custom isolation level specified but no actual transaction initiated; &quot; +</span><br><span class="line">					&quot;isolation level will effectively be ignored: &quot; + def);</span><br><span class="line">		&#125;</span><br><span class="line">		boolean newSynchronization &#x3D; (getTransactionSynchronization() &#x3D;&#x3D; SYNCHRONIZATION_ALWAYS);</span><br><span class="line">		return prepareTransactionStatus(def, null, true, newSynchronization, debugEnabled, null);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法内首先判断是否已经存在事务，如果存在则处理存在的事务，如果不存在则新创建建一个事务。</p>
<h3 id="传播级别"><a href="#传播级别" class="headerlink" title="传播级别"></a>传播级别</h3><p>Spring事务的传播级别是多个使用了@Transactional注解方法进行相互调用时，在此情况下Spring对于事务的处理。在Sring中有以下几个传播界别：</p>
<ul>
<li>REQUIRED：如果当前线程已经存在事务，则加入该事务，否则新建一个事务。</li>
<li>SUPPORT：如果当前线程已经在一个事务中，则加入该事务，否则不使用事务。</li>
<li>MANDATORY：如果当前线程已经在一个事务中，则加入该事务，否则抛出异常。</li>
<li>REQUIRED_NEW：无论如何都会创建一个新的事务，如果当前线程已经在一个事务中，则挂起当前事务，创建一个新的事务。</li>
<li>NOT_SUPPORED：如果当前线程在一个事务中，则挂起事务。</li>
<li>NEVER：如果当前线程在一个事务中则抛出异常。</li>
<li>NESTED：执行嵌套事务，类似REQUIRED，但是有些区别，在Mysql中是采用SAVEPOINT（保存点）来实现的。</li>
</ul>
<h4 id="NESTED和REQUIRED的区别"><a href="#NESTED和REQUIRED的区别" class="headerlink" title="NESTED和REQUIRED的区别"></a>NESTED和REQUIRED的区别</h4><p>做两个传播级别似乎看起来是相同，但是REQUIRED会跟着父任务一同提交，一同失败。而NESTED是如果当前事务出现异常，本身进行回滚操作，回滚到保存点，但是父事务不会进行回滚操作，但是父事务发生异常的时候，子任务会进行回滚操作。</p>
<p>总结一下，会创建事务的传播级别有：REQUIRED，REQUIRED_NEW，NESTED。</p>
<h3 id="新建事务的情况"><a href="#新建事务的情况" class="headerlink" title="新建事务的情况"></a>新建事务的情况</h3><p>当创建事务时，如果当前传播级别为MADATORY时会抛出<code>IllegalTransactionStateException</code>异常，这和上面传播级别的定义是一致的。然后会去判断传播级别是否为REQUIRED，REQUIRED_NEW，NESTED其中的一种，是的话则创建事务，否则创建”空”事务：没有实际事务，但可能同步。创建事务时又去调用了<code>startTransaction</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private TransactionStatus startTransaction(TransactionDefinition definition, Object transaction,</span><br><span class="line">			boolean debugEnabled, @Nullable SuspendedResourcesHolder suspendedResources) &#123;</span><br><span class="line"></span><br><span class="line">	boolean newSynchronization &#x3D; (getTransactionSynchronization() !&#x3D; SYNCHRONIZATION_NEVER);</span><br><span class="line">	DefaultTransactionStatus status &#x3D; newTransactionStatus(</span><br><span class="line">			definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">	&#x2F;&#x2F;开启新事务</span><br><span class="line">	doBegin(transaction, definition);</span><br><span class="line">	prepareSynchronization(status, definition);</span><br><span class="line">	return status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事务的创建又去调用了doBegin方法，该方法是一个抽象方法，交由子类进行实现。在Sring中事务管理器通常使用的是<code>DataSourceTransactionManager</code>，我们看下<code>DataSourceTransactionManager#doBegin()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class="line">	DataSourceTransactionObject txObject &#x3D; (DataSourceTransactionObject) transaction;</span><br><span class="line">	Connection con &#x3D; null;</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		if (!txObject.hasConnectionHolder() ||</span><br><span class="line">				txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">			&#x2F;&#x2F;从dataSource中获取一个Connection</span><br><span class="line">			Connection newCon &#x3D; obtainDataSource().getConnection();</span><br><span class="line">			if (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(&quot;Acquired Connection [&quot; + newCon + &quot;] for JDBC transaction&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F;为当前Transaction设置ConnectionHolder，并且设置newConnectionHolder为true</span><br><span class="line">			txObject.setConnectionHolder(new ConnectionHolder(newCon), true);(1)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		txObject.getConnectionHolder().setSynchronizedWithTransaction(true);</span><br><span class="line">		con &#x3D; txObject.getConnectionHolder().getConnection();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;根据definition对connection进行设置</span><br><span class="line">		Integer previousIsolationLevel &#x3D; DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">		txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line">		txObject.setReadOnly(definition.isReadOnly());</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span><br><span class="line">		&#x2F;&#x2F; so we don&#39;t want to do it unnecessarily (for example if we&#39;ve explicitly</span><br><span class="line">		&#x2F;&#x2F; configured the connection pool to set it already).</span><br><span class="line">		if (con.getAutoCommit()) &#123;</span><br><span class="line">			txObject.setMustRestoreAutoCommit(true);</span><br><span class="line">			if (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(&quot;Switching JDBC Connection [&quot; + con + &quot;] to manual commit&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F;开启事务，并设置非自动提交</span><br><span class="line">			con.setAutoCommit(false);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		prepareTransactionalConnection(con, definition);</span><br><span class="line">		&#x2F;&#x2F;设置transactionActive为true</span><br><span class="line">		txObject.getConnectionHolder().setTransactionActive(true);</span><br><span class="line"></span><br><span class="line">		int timeout &#x3D; determineTimeout(definition);</span><br><span class="line">		if (timeout !&#x3D; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">			txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Bind the connection holder to the thread.</span><br><span class="line">		if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">			&#x2F;&#x2F;这里将当前连接放入TransactionSynchronizationManager持有，如果下次调用可以判断为已存在事务</span><br><span class="line">			TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	catch (Throwable ex) &#123;</span><br><span class="line">		if (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">			DataSourceUtils.releaseConnection(con, obtainDataSource());</span><br><span class="line">			txObject.setConnectionHolder(null, false);</span><br><span class="line">		&#125;</span><br><span class="line">		throw new CannotCreateTransactionException(&quot;Could not open JDBC Connection for transaction&quot;, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>取出当前Connection然后设置到当前事务中。</li>
<li>根据所定义的事务信息设置connection的相关属性，设置隔离级别，设置只读，设置非自动提交。</li>
<li>准备事务的连接：根据具体情况设置事务只读。</li>
<li>设置该事务为活动状态。</li>
<li>根据定义的事务信息设置超时时间。</li>
<li>将当前连接绑定到线程中。</li>
</ul>
<p>事务创建完成之后，然后就是去准备同步。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) &#123;</span><br><span class="line">	if (status.isNewSynchronization()) &#123;</span><br><span class="line">		TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());</span><br><span class="line">		TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(</span><br><span class="line">				definition.getIsolationLevel() !&#x3D; TransactionDefinition.ISOLATION_DEFAULT ?</span><br><span class="line">						definition.getIsolationLevel() : null);</span><br><span class="line">		TransactionSynchronizationManager.setCurrentTransactionReadOnly(definition.isReadOnly());</span><br><span class="line">		TransactionSynchronizationManager.setCurrentTransactionName(definition.getName());</span><br><span class="line">		TransactionSynchronizationManager.initSynchronization();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法中所做的就是设置各种线程私有变量的状态，该方法完成之后一个事务就创建好了。</p>
<h3 id="存在事务的情况"><a href="#存在事务的情况" class="headerlink" title="存在事务的情况"></a>存在事务的情况</h3><p>当线程中已经存在事务的时候，则时候就会根据事务传播级别来决定是创建一个新事务还是使用原先的事务了。处理事务已经存在的方法是<code>AbstractPlatformTransactionManager#handleExistingTransaction()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private TransactionStatus handleExistingTransaction(</span><br><span class="line">		TransactionDefinition definition, Object transaction, boolean debugEnabled)</span><br><span class="line">		throws TransactionException &#123;</span><br><span class="line"></span><br><span class="line">	if (definition.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class="line">		throw new IllegalTransactionStateException(</span><br><span class="line">				&quot;Existing transaction found for transaction marked with propagation &#39;never&#39;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (definition.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class="line">		if (debugEnabled) &#123;</span><br><span class="line">			logger.debug(&quot;Suspending current transaction&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		Object suspendedResources &#x3D; suspend(transaction);</span><br><span class="line">		boolean newSynchronization &#x3D; (getTransactionSynchronization() &#x3D;&#x3D; SYNCHRONIZATION_ALWAYS);</span><br><span class="line">		return prepareTransactionStatus(</span><br><span class="line">				definition, null, false, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (definition.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class="line">		if (debugEnabled) &#123;</span><br><span class="line">			logger.debug(&quot;Suspending current transaction, creating new transaction with name [&quot; +</span><br><span class="line">					definition.getName() + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		SuspendedResourcesHolder suspendedResources &#x3D; suspend(transaction);</span><br><span class="line">		try &#123;</span><br><span class="line">			return startTransaction(definition, transaction, debugEnabled, suspendedResources);</span><br><span class="line">		&#125;</span><br><span class="line">		catch (RuntimeException | Error beginEx) &#123;</span><br><span class="line">			resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class="line">			throw beginEx;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (definition.getPropagationBehavior() &#x3D;&#x3D; TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">		if (!isNestedTransactionAllowed()) &#123;</span><br><span class="line">			throw new NestedTransactionNotSupportedException(</span><br><span class="line">					&quot;Transaction manager does not allow nested transactions by default - &quot; +</span><br><span class="line">					&quot;specify &#39;nestedTransactionAllowed&#39; property with value &#39;true&#39;&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		if (debugEnabled) &#123;</span><br><span class="line">			logger.debug(&quot;Creating nested transaction with name [&quot; + definition.getName() + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		if (useSavepointForNestedTransaction()) &#123;</span><br><span class="line">			&#x2F;&#x2F; Create savepoint within existing Spring-managed transaction,</span><br><span class="line">			&#x2F;&#x2F; through the SavepointManager API implemented by TransactionStatus.</span><br><span class="line">			&#x2F;&#x2F; Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span><br><span class="line">			DefaultTransactionStatus status &#x3D;</span><br><span class="line">					prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);</span><br><span class="line">			status.createAndHoldSavepoint();</span><br><span class="line">			return status;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			&#x2F;&#x2F; Nested transaction through nested begin and commit&#x2F;rollback calls.</span><br><span class="line">			&#x2F;&#x2F; Usually only for JTA: Spring synchronization might get activated here</span><br><span class="line">			&#x2F;&#x2F; in case of a pre-existing JTA transaction.</span><br><span class="line">			return startTransaction(definition, transaction, debugEnabled, null);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span><br><span class="line">	if (debugEnabled) &#123;</span><br><span class="line">		logger.debug(&quot;Participating in existing transaction&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	if (isValidateExistingTransaction()) &#123;</span><br><span class="line">		if (definition.getIsolationLevel() !&#x3D; TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class="line">			Integer currentIsolationLevel &#x3D; TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">			if (currentIsolationLevel &#x3D;&#x3D; null || currentIsolationLevel !&#x3D; definition.getIsolationLevel()) &#123;</span><br><span class="line">				Constants isoConstants &#x3D; DefaultTransactionDefinition.constants;</span><br><span class="line">				throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">						definition + &quot;] specifies isolation level which is incompatible with existing transaction: &quot; +</span><br><span class="line">						(currentIsolationLevel !&#x3D; null ?</span><br><span class="line">								isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</span><br><span class="line">								&quot;(unknown)&quot;));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (!definition.isReadOnly()) &#123;</span><br><span class="line">			if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class="line">				throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; +</span><br><span class="line">						definition + &quot;] is not marked as read-only but existing transaction is&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	boolean newSynchronization &#x3D; (getTransactionSynchronization() !&#x3D; SYNCHRONIZATION_NEVER);</span><br><span class="line">	return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中就是根据事务所定义的传播级别来具体处理。</p>
<h4 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a>NEVER</h4><p>当传播级别为NEVER的时候，直接抛出<code>IllegalTransactionStateException</code>异常。</p>
<h4 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a>NOT_SUPPORTED</h4><p>当传播级别为NOT_SUPPORTED，会挂起当前事务，创建一个空事务返回。</p>
<h4 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h4><p>当传播级别为REQUIRES_NEW，会挂起线程中当前的事务，然后创建一个新的事务。</p>
<h4 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h4><p>当传播级别为NESTED，会创建一个保存点，然后继续使用之前的事务。</p>
<h4 id="SUPPORTS或REQUIRED"><a href="#SUPPORTS或REQUIRED" class="headerlink" title="SUPPORTS或REQUIRED"></a>SUPPORTS或REQUIRED</h4><p>当传播级别为SUPPORTS或REQUIRED，会先判断一下当前事务是否是有效的，如果是有效的事务直接使用当前的事务。</p>
<p>当事务创建完成之后，会去准备事务信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,</span><br><span class="line">		@Nullable TransactionAttribute txAttr, String joinpointIdentification,</span><br><span class="line">		@Nullable TransactionStatus status) &#123;</span><br><span class="line"></span><br><span class="line">	TransactionInfo txInfo &#x3D; new TransactionInfo(tm, txAttr, joinpointIdentification);</span><br><span class="line">	if (txAttr !&#x3D; null) &#123;</span><br><span class="line">		&#x2F;&#x2F; We need a transaction for this method...</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Getting transaction for [&quot; + txInfo.getJoinpointIdentification() + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F; The transaction manager will flag an error if an incompatible tx already exists.</span><br><span class="line">		txInfo.newTransactionStatus(status);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; The TransactionInfo.hasTransaction() method will return false. We created it only</span><br><span class="line">		&#x2F;&#x2F; to preserve the integrity of the ThreadLocal stack maintained in this class.</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;No need to create transaction for [&quot; + joinpointIdentification +</span><br><span class="line">					&quot;]: This method is not transactional.&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; We always bind the TransactionInfo to the thread, even if we didn&#39;t create</span><br><span class="line">	&#x2F;&#x2F; a new transaction here. This guarantees that the TransactionInfo stack</span><br><span class="line">	&#x2F;&#x2F; will be managed correctly even if no transaction was created by this aspect.</span><br><span class="line">	txInfo.bindToThread();</span><br><span class="line">	return txInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中所作的就是将事务信息绑定到线程当中。</p>
<h2 id="执行业务方法"><a href="#执行业务方法" class="headerlink" title="执行业务方法"></a>执行业务方法</h2><p>通过<a href="../2eb81046">Spring事务源码解析上</a>我们知道invokeWithinTransaction方法是由<code>TransationInterceptor#invoke()</code>调用的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">	&#x2F;&#x2F; Work out the target class: may be &#123;@code null&#125;.</span><br><span class="line">	&#x2F;&#x2F; The TransactionAttributeSource should be passed the target class</span><br><span class="line">	&#x2F;&#x2F; as well as the method, which may be from an interface.</span><br><span class="line">	Class&lt;?&gt; targetClass &#x3D; (invocation.getThis() !&#x3D; null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Adapt to TransactionAspectSupport&#39;s invokeWithinTransaction...</span><br><span class="line">	return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到当调用invokeWithinTransaction方法时传入的第三个参数是invocation对象的proceed方法，当执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">retVal &#x3D; invocation.proceedWithInvocation();</span><br></pre></td></tr></table></figure>
<p>这行代码时又会去继续执行拦截器链，这样就完成了业务方法的调用了。</p>
<h2 id="异常回滚"><a href="#异常回滚" class="headerlink" title="异常回滚"></a>异常回滚</h2><p>当产生异常时，会去进行事务回滚操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) &#123;</span><br><span class="line">	if (txInfo !&#x3D; null &amp;&amp; txInfo.getTransactionStatus() !&#x3D; null) &#123;</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() +</span><br><span class="line">					&quot;] after exception: &quot; + ex);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;判断此异常是否需要回滚</span><br><span class="line">		if (txInfo.transactionAttribute !&#x3D; null &amp;&amp; txInfo.transactionAttribute.rollbackOn(ex)) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				&#x2F;&#x2F;对事务进行回滚</span><br><span class="line">				txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</span><br><span class="line">			&#125;</span><br><span class="line">			catch (TransactionSystemException ex2) &#123;</span><br><span class="line">				logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">				ex2.initApplicationException(ex);</span><br><span class="line">				throw ex2;</span><br><span class="line">			&#125;</span><br><span class="line">			catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">				logger.error(&quot;Application exception overridden by rollback exception&quot;, ex);</span><br><span class="line">				throw ex2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;不回滚此异常，提交事务</span><br><span class="line">		else &#123;</span><br><span class="line">			&#x2F;&#x2F; We don&#39;t roll back on this exception.</span><br><span class="line">			&#x2F;&#x2F; Will still roll back if TransactionStatus.isRollbackOnly() is true.</span><br><span class="line">			try &#123;</span><br><span class="line">				txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">			&#125;</span><br><span class="line">			catch (TransactionSystemException ex2) &#123;</span><br><span class="line">				logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">				ex2.initApplicationException(ex);</span><br><span class="line">				throw ex2;</span><br><span class="line">			&#125;</span><br><span class="line">			catch (RuntimeException | Error ex2) &#123;</span><br><span class="line">				logger.error(&quot;Application exception overridden by commit exception&quot;, ex);</span><br><span class="line">				throw ex2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法内首先做了一个判断但前是否存在事务，存在事务的话会去判断当前异常是否需要回滚。rollbackOn方法的作用就是判断给定的异常是否需要回滚。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean rollbackOn(Throwable ex) &#123;</span><br><span class="line">	if (logger.isTraceEnabled()) &#123;</span><br><span class="line">		logger.trace(&quot;Applying rules to determine whether transaction should rollback on &quot; + ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RollbackRuleAttribute winner &#x3D; null;</span><br><span class="line">	int deepest &#x3D; Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;只有业务方法中配置的@Transactional.rollbackfor的值，rollbackRules才才会有值，</span><br><span class="line">	&#x2F;&#x2F;否则rollbackRules为空</span><br><span class="line">	if (this.rollbackRules !&#x3D; null) &#123;</span><br><span class="line">		for (RollbackRuleAttribute rule : this.rollbackRules) &#123;</span><br><span class="line">			int depth &#x3D; rule.getDepth(ex);</span><br><span class="line">			if (depth &gt;&#x3D; 0 &amp;&amp; depth &lt; deepest) &#123;</span><br><span class="line">				deepest &#x3D; depth;</span><br><span class="line">				winner &#x3D; rule;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (logger.isTraceEnabled()) &#123;</span><br><span class="line">		logger.trace(&quot;Winning rollback rule is: &quot; + winner);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; User superclass behavior (rollback on unchecked) if no rule matches.</span><br><span class="line">	&#x2F;&#x2F;当没有配置业务方法中的@Transactionnal.rollbackfor的值时，走下面的逻辑。</span><br><span class="line">	if (winner &#x3D;&#x3D; null) &#123;</span><br><span class="line">		logger.trace(&quot;No relevant rollback rule found: applying default rules&quot;);</span><br><span class="line">		&#x2F;&#x2F;如果该异常的类型为RuntimeException或者Error类型</span><br><span class="line">		return super.rollbackOn(ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return !(winner instanceof NoRollbackRuleAttribute);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">public boolean rollbackOn(Throwable ex) &#123;</span><br><span class="line">	return (ex instanceof RuntimeException || ex instanceof Error);</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<p>可以看到如果在@Transactional中设置rollbackfor的值，则会去调用父类的rollbackOn方法来判断此异常是否需要回滚，父类中判断异常是否需要回滚就是判断异常类型是否为<code>RuntimeException</code>和<code>Error</code>类型。<strong>所以如果在使用事务注解时没有设置rollbackfor的值，且异常类型不是<code>RuntimeException</code>和<code>Error</code>那么事务将不会回滚。</strong><br>如果需要回滚会调用<code>TransactionManager</code>的rollback方法，Spring在<code>AbstractPlatformTransactionManager</code>中实现了该方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void rollback(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">	if (status.isCompleted()) &#123;</span><br><span class="line">		throw new IllegalTransactionStateException(</span><br><span class="line">				&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DefaultTransactionStatus defStatus &#x3D; (DefaultTransactionStatus) status;</span><br><span class="line">	processRollback(defStatus, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中会去调用processRollback进行回滚操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void processRollback(DefaultTransactionStatus status, boolean unexpected) &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		boolean unexpectedRollback &#x3D; unexpected;</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F;触发完成前的回调操作</span><br><span class="line">			triggerBeforeCompletion(status);</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;嵌套事务回滚处理</span><br><span class="line">			if (status.hasSavepoint()) &#123;</span><br><span class="line">				if (status.isDebug()) &#123;</span><br><span class="line">					logger.debug(&quot;Rolling back transaction to savepoint&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				status.rollbackToHeldSavepoint();</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F;新事务的回滚</span><br><span class="line">			else if (status.isNewTransaction()) &#123;</span><br><span class="line">				if (status.isDebug()) &#123;</span><br><span class="line">					logger.debug(&quot;Initiating transaction rollback&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				doRollback(status);</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				&#x2F;&#x2F; Participating in larger transaction</span><br><span class="line">				if (status.hasTransaction()) &#123;</span><br><span class="line">					&#x2F;&#x2F;适用于REQUIRED传播级别，这里并不会真的回滚，而是设置回滚</span><br><span class="line">					&#x2F;&#x2F;标志位</span><br><span class="line">					if (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line">						if (status.isDebug()) &#123;</span><br><span class="line">							logger.debug(&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;);</span><br><span class="line">						&#125;</span><br><span class="line">						doSetRollbackOnly(status);</span><br><span class="line">					&#125;</span><br><span class="line">                       &#x2F;&#x2F;如果当前事务没有设置为本地回滚，且没有产生全局回滚失败，</span><br><span class="line">					&#x2F;&#x2F;则由线程中的父事务来处理回滚</span><br><span class="line">					else &#123;</span><br><span class="line">						if (status.isDebug()) &#123;</span><br><span class="line">							logger.debug(&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				&#x2F;&#x2F;当前线程没有事务</span><br><span class="line">				else &#123;</span><br><span class="line">					logger.debug(&quot;Should roll back transaction but cannot - no transaction available&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				&#x2F;&#x2F; Unexpected rollback only matters here if we&#39;re asked to fail early</span><br><span class="line">				if (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">					unexpectedRollback &#x3D; false;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		catch (RuntimeException | Error ex) &#123;</span><br><span class="line">			triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;触发回滚完成之后的回调</span><br><span class="line">		triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Raise UnexpectedRollbackException if we had a global rollback-only marker</span><br><span class="line">		if (unexpectedRollback) &#123;</span><br><span class="line">			throw new UnexpectedRollbackException(</span><br><span class="line">					&quot;Transaction rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	finally &#123;</span><br><span class="line">		cleanupAfterCompletion(status);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了以下事情：</p>
<ul>
<li>触发完成前的回调。</li>
<li>如果是嵌套事务且存在保存点那么事务则回滚到保存点。</li>
<li>如果是新事务则会去掉用doRollBack方法进行回滚，该方法由子类实现，该方法其实就是去调用<code>Connection#rollback</code>进行事务回滚。</li>
<li>如果事务没有保存点且不是新事务，会先去判断线程有没有事务，如果存在事务会去判断当前事务状态为本地回滚或全局回滚失败。</li>
</ul>
<h2 id="清除事务信息"><a href="#清除事务信息" class="headerlink" title="清除事务信息"></a>清除事务信息</h2><p>当调用cleanupTransactionInfo时，最后会去调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void restoreThreadLocalStatus() &#123;</span><br><span class="line">	&#x2F;&#x2F; Use stack to restore old transaction TransactionInfo.</span><br><span class="line">	&#x2F;&#x2F; Will be null if none was set.</span><br><span class="line">	transactionInfoHolder.set(this.oldTransactionInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到就是前一个事务的事务信息设置到transactionInfoHolder中，在每个事务创建的时候都会创建属于自己的TransactionInfo，然后调用<code>TransactionInfo#bindToTread()</code>方法绑定到当前线程中，所以在执行完成业务逻辑之后，需要将本地线程中的TransactionInfo设置为当前TransactionInfo中的oldTransactionInfo。这样才能保证每次执行自己的业务的时候，使用的是自己的TransactionInfo，以保证事务对象不会发生错乱。</p>
<h2 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h2><p>提交事务调用的是<code>TransactionAspectSuport#commitTransactionAfterReturning()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) &#123;</span><br><span class="line">	if (txInfo !&#x3D; null &amp;&amp; txInfo.getTransactionStatus() !&#x3D; null) &#123;</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Completing transaction for [&quot; + txInfo.getJoinpointIdentification() + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中又调用了<code>TransactionManager#commit()</code>方法，该方法在子类<code>AbstractPlatformTransactionManager</code>进行了实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void commit(TransactionStatus status) throws TransactionException &#123;</span><br><span class="line">	&#x2F;&#x2F;判断事务是否完成</span><br><span class="line">	if (status.isCompleted()) &#123;</span><br><span class="line">		throw new IllegalTransactionStateException(</span><br><span class="line">				&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DefaultTransactionStatus defStatus &#x3D; (DefaultTransactionStatus) status;</span><br><span class="line">	&#x2F;&#x2F;如果在事务中被标记为回滚，那么不会去提交事务，直接回滚</span><br><span class="line">	if (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line">		if (defStatus.isDebug()) &#123;</span><br><span class="line">			logger.debug(&quot;Transactional code has requested rollback&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		processRollback(defStatus, false);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;对于REQUIRED传播级别，即使父事务中没有抛出异常，但是子事务中已经设置了回滚标志，那么父事务依然会回滚</span><br><span class="line">	if (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line">		if (defStatus.isDebug()) &#123;</span><br><span class="line">			logger.debug(&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		processRollback(defStatus, true);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;处理事务提交</span><br><span class="line">	processCommit(defStatus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中首先去判断了事务是否被标记为本地回滚，如果被标记为本地回滚，那么将不会去提交事务。如果在子师傅中设置了回滚标志，那么也将不提交事务，直接回滚。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void processCommit(DefaultTransactionStatus status) throws TransactionException &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		boolean beforeCompletionInvoked &#x3D; false;</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			boolean unexpectedRollback &#x3D; false;</span><br><span class="line">			&#x2F;&#x2F;事务提交准备工作，由具体的事务处理器完成</span><br><span class="line">			prepareForCommit(status);</span><br><span class="line">			triggerBeforeCommit(status);</span><br><span class="line">			triggerBeforeCompletion(status);</span><br><span class="line">			beforeCompletionInvoked &#x3D; true;</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;嵌套事务处理</span><br><span class="line">			if (status.hasSavepoint()) &#123;</span><br><span class="line">				if (status.isDebug()) &#123;</span><br><span class="line">					logger.debug(&quot;Releasing transaction savepoint&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				unexpectedRollback &#x3D; status.isGlobalRollbackOnly();</span><br><span class="line">				&#x2F;&#x2F;释放挂起事务保存点</span><br><span class="line">				status.releaseHeldSavepoint();</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F;当前事务是新事务</span><br><span class="line">			else if (status.isNewTransaction()) &#123;</span><br><span class="line">				if (status.isDebug()) &#123;</span><br><span class="line">					logger.debug(&quot;Initiating transaction commit&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				unexpectedRollback &#x3D; status.isGlobalRollbackOnly();</span><br><span class="line">				&#x2F;&#x2F;提交事务，交由子类实现（调用Connectin的commit方法进行提交）</span><br><span class="line">				doCommit(status);</span><br><span class="line">			&#125;</span><br><span class="line">			else if (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">				unexpectedRollback &#x3D; status.isGlobalRollbackOnly();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Throw UnexpectedRollbackException if we have a global rollback-only</span><br><span class="line">			&#x2F;&#x2F; marker but still didn&#39;t get a corresponding exception from commit.</span><br><span class="line">			&#x2F;&#x2F;如果事务被标记为全局回滚</span><br><span class="line">			if (unexpectedRollback) &#123;</span><br><span class="line">				throw new UnexpectedRollbackException(</span><br><span class="line">						&quot;Transaction silently rolled back because it has been marked as rollback-only&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		catch (UnexpectedRollbackException ex) &#123;</span><br><span class="line">			&#x2F;&#x2F; can only be caused by doCommit</span><br><span class="line">			triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;事务提交过程中的异常处理</span><br><span class="line">		catch (TransactionException ex) &#123;</span><br><span class="line">			&#x2F;&#x2F; can only be caused by doCommit</span><br><span class="line">			if (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">				doRollbackOnCommitException(status, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">			&#125;</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line">		catch (RuntimeException | Error ex) &#123;</span><br><span class="line">			if (!beforeCompletionInvoked) &#123;</span><br><span class="line">				triggerBeforeCompletion(status);</span><br><span class="line">			&#125;</span><br><span class="line">			doRollbackOnCommitException(status, ex);</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Trigger afterCommit callbacks, with an exception thrown there</span><br><span class="line">		&#x2F;&#x2F; propagated to callers but the transaction still considered as committed.</span><br><span class="line">		try &#123;</span><br><span class="line">               &#x2F;&#x2F;事务提交后回调</span><br><span class="line">			triggerAfterCommit(status);</span><br><span class="line">		&#125;</span><br><span class="line">		finally &#123;</span><br><span class="line">               &#x2F;&#x2F;事务完成后的回调</span><br><span class="line">			triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	finally &#123;</span><br><span class="line">           &#x2F;&#x2F;清理事务信息</span><br><span class="line">		cleanupAfterCompletion(status);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中先是做了些事务提交的准备工作，然后判断是否是嵌套事务，如果是那么则释放挂起的事务保存点。如果不是嵌套事务再判断是否是新事务，如果是则提交事务。提交事务之后会判断事务是否被标记为了全局回滚，如果是则抛出异常。然后会调用事务提交相关的回调方法，最后会清理事务信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void cleanupAfterCompletion(DefaultTransactionStatus status) &#123;</span><br><span class="line">	status.setCompleted();</span><br><span class="line">	if (status.isNewSynchronization()) &#123;</span><br><span class="line">		&#x2F;&#x2F;清除当前线程的整个事务同步状态</span><br><span class="line">		TransactionSynchronizationManager.clear();</span><br><span class="line">	&#125;</span><br><span class="line">	if (status.isNewTransaction()) &#123;</span><br><span class="line">		doCleanupAfterCompletion(status.getTransaction());</span><br><span class="line">	&#125;</span><br><span class="line">	if (status.getSuspendedResources() !&#x3D; null) &#123;</span><br><span class="line">		if (status.isDebug()) &#123;</span><br><span class="line">			logger.debug(&quot;Resuming suspended transaction after completion of inner transaction&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		Object transaction &#x3D; (status.hasTransaction() ? status.getTransaction() : null);</span><br><span class="line">		&#x2F;&#x2F;恢复挂起的事务</span><br><span class="line">		resume(transaction, (SuspendedResourcesHolder) status.getSuspendedResources());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="传播级别对回滚的影响"><a href="#传播级别对回滚的影响" class="headerlink" title="传播级别对回滚的影响"></a>传播级别对回滚的影响</h2><p>为了方便描述，假设由a和b两个事务方法，a会去调用b，并且a事务方法的传播级别为REQUIRED（默认事务的传播级别）。</p>
<h3 id="NOT-SUPPORED"><a href="#NOT-SUPPORED" class="headerlink" title="NOT_SUPPORED"></a>NOT_SUPPORED</h3><p>当b方法中产生异常时，a和b方法中的b对数据库的操作会生效且a中的事务不会回滚。当a中产生异常时，b对数据库的操作会失效，a中的事务会回滚。</p>
<h3 id="SUPPORTS"><a href="#SUPPORTS" class="headerlink" title="SUPPORTS"></a>SUPPORTS</h3><p>当a和b中任何一个方法产生异常时，a和b中的事务都会回滚。</p>
<h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a>REQUIRED</h3><p>当a和b中任何一个方法产生异常时，a和b中的事务都会回滚。</p>
<h3 id="REQUIRES-NEW-1"><a href="#REQUIRES-NEW-1" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h3><p>当b产生异常时，b方法中的事务会回滚，a中的事务不会回滚；当a中产生异常时，a方法中的事务会回滚，b中的事务不会回滚。</p>
<h3 id="NESTED-1"><a href="#NESTED-1" class="headerlink" title="NESTED"></a>NESTED</h3><p>当b中产生异常时，b方法中的事务会回滚，a中的事务不会回滚；当a中产生异常时，a和b中的事务都会回滚。</p>
<h3 id="NEVER-1"><a href="#NEVER-1" class="headerlink" title="NEVER"></a>NEVER</h3><p>当b方法事务传播级别为NEVER时，都不会去操作数据库，在获取事务的时候直接会抛出类型的异常<code>IllegalTransactionStateException</code>。a方法中的事务的回滚跟你定义的rollbackFor有关。</p>
<h3 id="MANDATORY"><a href="#MANDATORY" class="headerlink" title="MANDATORY"></a>MANDATORY</h3><p>当a和b中任何一个方法产生异常的时候，a和b中的事务都会回滚。</p>
<h2 id="事务不回滚的原因"><a href="#事务不回滚的原因" class="headerlink" title="事务不回滚的原因"></a>事务不回滚的原因</h2><p>事务不回滚一般由两个原因，一时Service类内部方法的调用，二是异常被捕掉了。</p>
<h3 id="Service类内部方法调用"><a href="#Service类内部方法调用" class="headerlink" title="Service类内部方法调用"></a>Service类内部方法调用</h3><p>假设Service中有一个方法A，会去调用内部方法B，A上没有声明事务，方法B声明了事务，在这种情况下事务是不生效了。原因就是声明式事务是通过AOP动态代理实现的，对于加了@Transactinal注解的方法，在调用代理类方法是，会首先通过拦截器TransactionInteceptor来开启事务。当我们调用A是，此时该方法是没有@Transactional注解的所以不会去开启事务，在调用方法B时又是直接通过this.的方式来进行调用的，也就是说直接调用了目标类的方法，并没有通过代理类去调用方法B，所以事务是不会开启的。</p>
<h3 id="异常被捕获了"><a href="#异常被捕获了" class="headerlink" title="异常被捕获了"></a>异常被捕获了</h3><p>在Spring中如果异常在业务方法中被捕获掉了的话，那么框架就无法感知到异常产生了，那么也就不会去进行异常时的回滚。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>事务</tag>
      </tags>
  </entry>
</search>
