<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP中的基本概念</title>
    <url>/posts/253173a8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在学习AOP源码的过程中你会发现其中的类结构是非常复杂的，什么Advice、Advisor、Pointcut、PointJoint等等概念。如果你不搞清楚这些接口所具体代表的是什么内容，那么源码的阅读就会变得非常困难。但是网上对于这些概念性的东西的介绍又基本都没有，大多数文章都是从一开始就从源码开始介绍。这对于不了解这些概念的人来说是非常难以理解的，再看了一些文章之后自己终于对于这些概念有了一些认知，希望这篇文章能对于你学习AOP源码有一些帮助。</p>
<h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><h2 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h2><p>切面是通知和切点的结合，一个切面能够包含同一个类型的不同增强方法（一个切面可以包含多个Advice），切面是横切关注点的集成化，比如说事务处理和日志处理就代表了两个切面。Spring AOP就是负责执行切面的框架，他将切面中定义的横切逻辑组织到切面所指定的连接点中。你可以简单的认为：被@Aspect注解的类就是切面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class AspectJTest &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="目标对象（Target）"><a href="#目标对象（Target）" class="headerlink" title="目标对象（Target）"></a>目标对象（Target）</h2><p>目标对象是指要被增强的对象，或者说是被一个或多个切面所通知的对象。你可以简单的认为就是符合表达式中条件的对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Pointcut(&quot;execution(* *.say(..))&quot;)</span><br><span class="line">public void test()&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="连接点（JoinPoint）"><a href="#连接点（JoinPoint）" class="headerlink" title="连接点（JoinPoint）"></a>连接点（JoinPoint）</h2><p>连接点由两个信息确定：</p>
<ul>
<li>方法（表示程序的执行点，即目标方法）</li>
<li>相对点（表示方位，即目标方法的哪个位置）</li>
</ul>
<p>简单来说就是被拦截到的程序执行点，因为Spring只支持方法类型的连接点，所以在Spring中连接点就是被拦截到的方法的描述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@After(&quot;test()&quot;)</span><br><span class="line">public void after(JoinPoint joinPoint)&#123;</span><br><span class="line">    System.out.println(&quot;after test..&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="切入点（PointCut）"><a href="#切入点（PointCut）" class="headerlink" title="切入点（PointCut）"></a>切入点（PointCut）</h2><p>切入点是对连接点进行拦截的条件定义，简单来讲通过切入点你可以知道哪些类中的哪些方法需要添加通知。</p>
<h2 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h2><p>你可以理解为通知是对被代理方法前后需要执行的描述，是指拦截到连接点之后要执行的代码的描述，一个切面中可以有多个通知。Spring AOP框架通过拦截器实现了通知模型，维护了一个已连接点为中心的拦截器链。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Before(&quot;test()&quot;)</span><br><span class="line">public void before(JoinPoint joinPoint)&#123;</span><br><span class="line">    System.out.println(&quot;before test..&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面就代表了一个前置通知。</p>
<h2 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h2><p>织入是将切面和业务逻辑对象连接起来, 并创建通知代理的过程。织入可以在编译时，类加载时和运行时完成。在编译时进行织入就是静态代理，而在运行时进行织入则是动态代理。</p>
<h2 id="增强器（Advisor）"><a href="#增强器（Advisor）" class="headerlink" title="增强器（Advisor）"></a>增强器（Advisor）</h2><p>Advisor是切面的另一种实现，能够将通知以更为复杂的方式植入到目标对象中，是将通知包装为更复杂切面装配器。Advisor由PointCut和Advice组成，通过Advisor可以自动完成切面的装配工作。简单来说就是可以通过PointCut来决定哪些目标对象中的方法需要添加Advice.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过一句话将上面的这些概念联系起来：Aspect中定义了Advice和PointCut。Advisor可以通过PointCut来确定哪些方法需要添加Advice。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之aop:aspectj-autoproxy标签</title>
    <url>/posts/185f54c8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>AOP和IOC是Spring的两大基石，aop原理系列文章我们将透过源码来解析aop的底层原理。使用过Spring aop的都知道，当我们要使用aop的时候只需要在配置文件中加上<code>&lt;aop:aspectj-autoproxy/&gt;</code>这个标签和定义好切面，我们就能使用aop这个功能了。通过前面的文章你可能已经知道了aop的底层其实是通过JDK的动态代理和CGLIB的动态代理实现的，那么为什么我们只需要在配置文件中定义一个如下的标签我们就能使用aop了呢？Spring是在什么时候为我们生成代理类的呢？本篇文章将通过源码直击本质！</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>在本系列文章的讲解中，我们所使用的测试代码都是同一代码，所以在后面的文章中就不贴出示例代码了。</p>
<h2 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Person &#123;</span><br><span class="line">    void say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student implements Person &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(&quot;这是一个苦逼程序员&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class AspectJTest &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* *.say(..))&quot;)</span><br><span class="line">    public void test()&#123;&#125;</span><br><span class="line">    @Before(&quot;test()&quot;)</span><br><span class="line">    public void before(JoinPoint joinPoint)&#123;</span><br><span class="line">        System.out.println(&quot;before test..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;test()&quot;)</span><br><span class="line">    public void after(JoinPoint joinPoint)&#123;</span><br><span class="line">        System.out.println(&quot;after test..&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;test()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint p)&#123;</span><br><span class="line">        System.out.println(&quot;before1&quot;);</span><br><span class="line">        Object o &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            o &#x3D; p.proceed();</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;after1&quot;);</span><br><span class="line">        return o;</span><br><span class="line">    &#125;</span><br><span class="line">    public void test1()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        Person bean2 &#x3D; (Person)ac.getBean(&quot;student&quot;);</span><br><span class="line">        bean2.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:aspectj-autoproxy&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.pcy.service.impl.Student&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;com.pcy.AspectJTest&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>运行以下上面的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br><span class="line">after test..</span><br><span class="line">after1</span><br></pre></td></tr></table></figure>
<p>可以发现Spring确实为我们的类实现了代理的功能，那么当我们加入<code>&lt;aop:aspectj-autoproxy/&gt;</code>这个标签时，Spring为我们做了些什么呢？</p>
<h2 id="Spring自定义标签的解析"><a href="#Spring自定义标签的解析" class="headerlink" title="Spring自定义标签的解析"></a>Spring自定义标签的解析</h2><p>在Spring中，将标签的解析分为了标准标签解析和自定义标签解析，<code>&lt;aop:aspectj-autoproxy/&gt;</code>就属于自定义标签。Spring在<code>BeanDefinitionParserDelegate#parseCustomElement()</code>方法中完成了对自定义标签的解析，那么我们直接在该方法内打上断点并进入debug模式。<img src="/posts/185f54c8/1.png"><br>在该方法中首先时获取该自定义标签所对应的命名空间处理器，通过debug我们知道了<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签的处理器为<code>AopNamespaceHandler</code>类，之后通过该处理器来解析该标签。我们debug进入parse方法<img src="/posts/185f54c8/2.png"><br>在该方法中为<code>&lt;aop:aspectj-autoproxy/&gt;</code>获取该标签所定义的BeanDefinitionParser，通过debug信息我们可以得知：<code>&lt;aop:aspectj-autoproxy/&gt;</code>的BeanDefinitionParser为<code>AspectJAutoProxyBeanDefinitionParser</code>。我们进入该类的<code>parse</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BeanDefinition parse(Element element, ParserContext parserContext) &#123;</span><br><span class="line">	&#x2F;&#x2F;注册proxy creator</span><br><span class="line">	&#x2F;&#x2F;将AnnotationAwareAspectJAutoProxyCreator注册到spring容器中</span><br><span class="line">	AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">	extendBeanDefinition(element, parserContext);</span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中做了非常重要的一件事：将AnnotationAwareAspectJAutoProxyCreator注册到spring容器中。我们可以看下这个类的结构<img src="/posts/185f54c8/3.png"><br>可以看到该类实现了InstantiationAwareBeanPostProcessor接口，该接口中有四个非常重要的方法：</p>
<ul>
<li>postProcessBeforeInstantiation</li>
<li>postProcessAfterInstantiation</li>
<li>postProcessBeforeInitialization</li>
<li>postProcessAfterInitialization</li>
</ul>
<p>这四个方法非常的重要，在bean的生命周期中会去调用这几个方法。代理类的生成就是在<code>postProcessAfterInitialization</code>方法中进行的，Advisor的加载就是在<code>postProcessBeforeInstantiation</code>方法中实现的。那么我们将在后面的文章中详细讲解这几个方法中Spring所干的工作。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇文章中，主要讲解了当添加了<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签之后，Spring为我们使用aop功能做了哪些准备工作以及为代理类的生成提供了哪些支持？Advisor的加载是在哪里进行的。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之Advisor的加载</title>
    <url>/posts/8a3989cc/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>通过前面文章的讲解我们知道Spring通过Advisor来决定哪些Advice需要添加到相应的连接点，在Spring中在进行第一个单例bean创建之前会去初始化需要使用的Advisor。</p>
<h1 id="源码讲解"><a href="#源码讲解" class="headerlink" title="源码讲解"></a>源码讲解</h1><p>在上面我们已经讲过了在bean创建之前会去构建所使用的Advisor，那么我们直接在<code>AbstrractAutowireCapableBeanFactory#createBean()</code>方法中打上断点，并以debug方式运行程序。在该方法中Advisor的加载就是在下面这行代码中进行的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object bean &#x3D; resolveBeforeInstantiation(beanName, mbdToUse);</span><br></pre></td></tr></table></figure>
<p>进入此方法<img src="/posts/8a3989cc/1.png"><br>在该方法中会去执行<code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation()</code>方法，在上篇文章提到过Advisor的加载就是在此方法中进行的。我们接着往下debug，发现并没有进入该if语句。通过debug可以发现<br><img src="/posts/8a3989cc/2.png"><br>没进入的原因就是此时容器中还没有InstantiationAwareBeanPostProcessors，最后通过调用栈发现现在还只是在进行BeanPostProcessor的注册流程<img src="/posts/8a3989cc/3.png"><br>此时容器中还没有InstantiationAwareBeanPostProcessors，这也就不会进入该if语句了。我们再次运行到该方法中<img src="/posts/8a3989cc/4.png"><br>这是会发现此时if中的值是为true的，所以我们直接进入<code>applyBeanPostProcessorsBeforeInstantiation</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object applyBeanPostProcessorsBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">	for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) &#123;</span><br><span class="line">		Object result &#x3D; bp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">		if (result !&#x3D; null) &#123;</span><br><span class="line">			return result;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上篇文章中我们已经讲过了Spring解析<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签时会注册<code>AnnotationAwareAspectJAutoProxyCreator</code>该类实现了<code>InstantiationAwareBeanPostProcessor</code>接口。我们继续执行会发现程序进入了<code>AbstractAutoProxyCreator#postProcessBeforeInstantiation()</code>方法中，该类是<code>AnnotationAwareAspectJAutoProxyCreator</code>类的父类。<img src="/posts/8a3989cc/4.png"><br>在该方法中调用了shouldSkip方法，Advisor的构建就是在此方法中完成的。我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">	&#x2F;&#x2F; TODO: Consider optimization by caching the list of the aspect names</span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors &#x3D; findCandidateAdvisors();</span><br><span class="line">	for (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">		if (advisor instanceof AspectJPointcutAdvisor &amp;&amp;</span><br><span class="line">				((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) &#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return super.shouldSkip(beanClass, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中有一句注释：考虑通过缓存切面名list来优化。我们进入<code>findCandidateAdvisors</code>方法<img src="/posts/8a3989cc/6.png"><br>在该方法中，首先通过父类的<code>findCandidateAdvisors</code>方法去获取Advisor，我们进入该方法<img src="/posts/8a3989cc/20.png"><br>该方法的作用就是获取实现了<code>Advisor</code>接口的所有bean对象。之后执行(2)处的代码，此处先做了一个判断，是否存在有<code>BeanFactoryAspectJAdvisorsBuilder</code>，如果存在则通过该构造器构造我们的Advisor，我们进入该方法<img src="/posts/8a3989cc/7.png"><br>在该方法中首先是获取了容器中切面的bean name，如果不为空的话就代表Advisor的构建工作已经完成过了，就直接从缓存中获取就行了，此时该值肯定是为null的，因为Advisor还没被加载过。然后下面做了一个double check（为了减少同步开销），接着通过一个工具类来获取容器中的所有bean name。<img src="/posts/8a3989cc/8.png"><br>接着对这些beanNames做了一个循环<img src="/posts/8a3989cc/9.png"><br>首先通过beanName来获取该bean的Class对象，之后再判断该类是否有@Aspect注解。我们在下面这行代码打上断点，并运行到断点处。<img src="/posts/8a3989cc/10.png"><img src="/posts/8a3989cc/11.png"><br>通过debug信息可以知道当前的beanName对应的类确实是我们定义的切面类，之后对该切面类的信息做了一些转换保存到<code>MetadataAwareAspectInstanceFactory</code>类中，之后调用了<code>AspectJAdvisorFactory#getAdvisors()</code>方法，在该方法中完成了Advisor的构建，我们进入此方法。<img src="/posts/8a3989cc/12.png"><br>在该方法中首先是做了一些准备工作，之后调用了<code>getAdvisorMethods</code>方法，该方法的作用就是获取我们定义的切面类中所有没被<code>@PointCut</code>注解的方法。之后对这些Method进行循环处理，在该循环中又去调用了<code>getAdvisor</code>方法，该方法就是判断当前方法是否是一个Advice。我们进入此方法<img src="/posts/8a3989cc/13.png">该方法首先对传入的信息进行了验证，之后调用了<code>getPointcut</code>方法，我们进入此方法<img src="/posts/8a3989cc/14.png"><br>在该方法中又去调用了红框中的方法，通过该方法名可以知道该方法的作用就是去判断方法上面有没有特定的注解。<img src="/posts/8a3989cc/15.png"><br>可以看到该方法的作用就是判断方法有没有被如下几个注解修饰：</p>
<ul>
<li>@Pointcut</li>
<li>@Around</li>
<li>@Before</li>
<li>@After</li>
<li>@AfterReturing</li>
<li>@AfterThrowing</li>
</ul>
<p>之后就是如果该方法被上面及注解注解的话创建了一个<code>AspectJExpressionPointcut</code>实例并为属性赋值。<img src="/posts/8a3989cc/16.png"><br>之后就是判断如果该方法需要创建Advisor，如果需要就创建<code>InstantiationModelAwarePointcutAdvisorImpl</code>实例，赋值特定的值之后返回。当循环执行完之后，就为所有被切面注解的方法创建好Advisor了。<img src="/posts/8a3989cc/17.png"><br>之后做了一个判断：如果寻找的增强器不为空而且有配置了增强延迟初始化那么需要在首位加入同步实例化器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">	Advisor instantiationAdvisor &#x3D; new SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span><br><span class="line">	advisors.add(0, instantiationAdvisor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后有一个循环，用于处理被<code>@DeclareParents</code>注解的属性。引介增强与普通增强方式很类似，只不过使用<code>DeclareParentsAdvisor</code>对功能进行封装。引介是一种特殊的增强器，他为类添加一些属性和方法。这样，即使一个业务类原先没有实现某个接口，通过引介功能，可以动态的为该业务类添加实现逻辑，让业务类称为这个接口的实现类。到此Advisor的创建就已经完成了。<img src="/posts/8a3989cc/18.png"><br>之后判断了当前bean类是否是单例对象，是单例类的话将创建好的该类的Advisor添加到Advisor缓存中，之后在将该切面中的Advisor添加到advisors（保存了所有的Advisor）中。<br>然后将所有的切面名保存，这样下一个bean创建时就不会再进行Advisor的加载工作了。<img src="/posts/8a3989cc/19.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇文章中主要介绍了在aop中所使用的Advisor的加载是何时进行的，Spring在bean创建的时候，会调用<code>InstantiationAwareBeanPostProcessor</code>中的接口方法，Advisor的初始化就是在其接口方法中进行的，Spring初始化Advisor的时候会对其进行缓存，这样的话就不用在每个bean创建的过程中都去执行相同的初始化流程了。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之被切入方法调用过程</title>
    <url>/posts/800ab950/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在本篇文章中将带你搞清楚在使用aop的时候当调用被切入方法的时候，Spring到底做了些什么。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>我们在被切入的方法前打上断点，然后进入dubug<img src="/posts/800ab950/1.png"><br>通过前面的讲解我们已经知道了，aop的动态代理有jdk和cglib两种代理方式，在本篇文章中我们讨论的是jdk动态代理实现的aop的情况。我们知道jdk动态代理中当调用被代理的方法的时候，会去调用<code>InvocationHandler</code>中的<code>invoke</code>方法。我们运行程序，发现确实如此。<img src="/posts/800ab950/2.png"><br>我们可以看下当前类的结构图<img src="/posts/800ab950/3.png"><br>可以看到该类实现了<code>InvocationHandler</code>接口，现在就开始核心代码的分析了。</p>
<h2 id="不需要使用拦截器链的方法"><a href="#不需要使用拦截器链的方法" class="headerlink" title="不需要使用拦截器链的方法"></a>不需要使用拦截器链的方法</h2><p>在aop中如果被调用的方法是equals、hashCode方法或者是继承自Advicsed类的方法，这几个类型的方法不需要使用拦截器链。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;equals方法处理</span><br><span class="line">if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">	&#x2F;&#x2F; The target does not implement the equals(Object) method itself.</span><br><span class="line">	return equals(args[0]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;hash方法的处理</span><br><span class="line">else if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">	&#x2F;&#x2F; The target does not implement the hashCode() method itself.</span><br><span class="line">	return hashCode();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">else if (method.getDeclaringClass() &#x3D;&#x3D; DecoratingProxy.class) &#123;</span><br><span class="line">	&#x2F;&#x2F; There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span><br><span class="line">	return AopProxyUtils.ultimateTargetClass(this.advised);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Advised接口或者其父接口中定义的方法，直接反射调用</span><br><span class="line">else if (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">		method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">	&#x2F;&#x2F; Service invocations on ProxyConfig with the proxy config...</span><br><span class="line">	&#x2F;&#x2F;通过反射调用切入点方法</span><br><span class="line">	return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="获取拦截器链"><a href="#获取拦截器链" class="headerlink" title="获取拦截器链"></a>获取拦截器链</h2><p>如果调用的是被代理的方法，那么就需要先去获取被调用方法的拦截器链。<img src="/posts/800ab950/4.png"><br>我们在该行代码上打上断点，然后进入该方法中。可以看到在Spring中对方法的拦截器链做了缓存，如果缓存中不存在那么则去初始化拦截器链。<img src="/posts/800ab950/5.png"><br>由于这是第一次调用该方法，此时缓存中是没有此方法的拦截器链的。所以此时会去执行<code>getInterceptorsAndDynamicInterceptionAdvice</code>方法。<img src="/posts/800ab950/6.png"><br>在此方法中，首先去获取了Advisor的适配器，Spring对Advisor和MethodIntercepter做了适配。然后获取了被调用方法的bean的所有Advisor，这里的actualClass就是真正定义此方法的类。<img src="/posts/800ab950/7.png"><br>然后循环对所有的Advisor进行处理，获取其拦截器。在我们的示例代码中并没有引介增强器的定义，所以代码走的都是第一个分支。dubug进入第一个分支。<img src="/posts/800ab950/8.png"><br>首先通过Advisor中的Pointcut来判断此方法是否能够应用此Advice，如果能的话通过增强器去获取拦截器。<img src="/posts/800ab950/9.png"><br>在这里通过Advisor适配器去获取Advisor中的方法拦截器，也就是<code>getInterceptors</code>方法，dubug进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException &#123;</span><br><span class="line">	List&lt;MethodInterceptor&gt; interceptors &#x3D; new ArrayList&lt;&gt;(3);</span><br><span class="line">	Advice advice &#x3D; advisor.getAdvice();</span><br><span class="line">	&#x2F;&#x2F;如果通知是MethodInterceptor类型的通知，直接加入interceptor</span><br><span class="line">	if (advice instanceof MethodInterceptor) &#123;</span><br><span class="line">		interceptors.add((MethodInterceptor) advice);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;对通知进行适配，使用已经配置好的Adapter:MethodBeforeAdviceAdapter、</span><br><span class="line">	&#x2F;&#x2F; AfterReturningAdviceAdapter以及ThrowsAdviceAdapter。</span><br><span class="line">	for (AdvisorAdapter adapter : this.adapters) &#123;</span><br><span class="line">		&#x2F;&#x2F;如果适配器支持该类型的Advice则取出封装完成的拦截器</span><br><span class="line">		if (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">			interceptors.add(adapter.getInterceptor(advisor));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if (interceptors.isEmpty()) &#123;</span><br><span class="line">		throw new UnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">	&#125;</span><br><span class="line">	return interceptors.toArray(new MethodInterceptor[0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法内首先做了一个判断，如果此通知是MethodInterceptor类型的话直接加入到拦截器中。之后使用预配置的适配器判断是否支持该Advice。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean supportsAdvice(Advice advice) &#123;</span><br><span class="line">	return (advice instanceof MethodBeforeAdvice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/800ab950/10.png"><br>从debug信息可以得知，有三个适配器。分别是<code>MethodBeforeAdviceAdapter</code>、<code>AfterReturingAdviceAdapter</code>、<code>ThrowingAdviceAdapter</code>，判断用户用户定义的Advice是否被支持其实就是判断Advice是否实现了<code>MethodBeforeAdvice</code>、<code>AfterReturingAdvice</code>、<code>ThrowingAdvice</code>接口。完成以上操作之后取出拦截器返回，至此就完成了Advisor中的方法拦截器的获取了。构建完方法的拦截器链之后，将该拦截器链放入到缓存当中。<img src="/posts/800ab950/11.png"><br>获取完拦截器链之后判断拦截器链是否为空，如果没有拦截器则直接通过反射调用切点方法。<img src="/posts/800ab950/12.png"></p>
<h2 id="拦截器链调用"><a href="#拦截器链调用" class="headerlink" title="拦截器链调用"></a>拦截器链调用</h2><p><img src="/posts/800ab950/13.png"><br>在进行拦截器链调用的时候，Spring先将代理对象、目标对象、目标方法、参数、拦截器链封装到了<code>ReflectiveMethodInvocation</code>中了，然后调用了<code>MethodInvocation#proceed()</code>方法进行调用。Spring在<code>ReflectiveMethodInvocation</code>中对proceed方法进行了重写，我们进入此方法。<img src="/posts/800ab950/14.png"><br>此时拦截和动态匹配方法器链中总共有四个对象，第一个是<code>ExposeInvocationInterceptor</code>，在上篇文章中我们已经讲过了该拦截器的作用就是暴露拦截器链，方便在其它地方使用。第二个是<code>AspectJAroudAdvice</code>，也就是环绕通知。第三个是<code>MethodBeforeAdviceInterceptor</code>，执行方法前的通知。第四个是<code>AspectJAfterAdvice</code>，是方法执行之后的通知。在该方法中首先做了一个判断，当前正在执行的拦截器是否是最后一个拦截器，如果是的话这里需要先去调用切点方法。此时肯定不是的，我们往下debug。<img src="/posts/800ab950/15.png"><br>接着从拦截器链中获取下一个需要执行的拦截器或者拦截通知。<img src="/posts/800ab950/16.png"><br>然后做了一个判断：判断此拦截器是否是<code>InterceptorAndDynamicMethodMatcher</code>类型的拦截器。如果是普通拦截器则直接调用<code>MethodInterceptor#invoke()</code>方法。上面提到的几个拦截器都是普通的拦截器，所以会进入下面的分支，我们进入invoke方法。在上面已经说过了第一个拦截器对象是<code>ExposeInvocationInterceptor</code>，Spring对invoke方法进行了重写。<img src="/posts/800ab950/17.png"><br>在前面我们提到过：<code>ExposeInvocationInterceptor</code>的作用就是暴露拦截器链，方便在其它地方调用，在该类中定义了一个invocation属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final ThreadLocal&lt;MethodInvocation&gt; invocation &#x3D;</span><br><span class="line">			new NamedThreadLocal&lt;&gt;(&quot;Current AOP method invocation&quot;);</span><br></pre></td></tr></table></figure>
<p>可以看到暴露拦截器链所使用的方法就是将MethodInvocation保存到ThreadLocal中。我们接着往下运行发现程序又回到了<code>ReflectiveMethodInvocation</code>的proceed方法中，因为我们刚才调用的时候将对象本身作为参数传入了，当我们调用proceed方法的时候这样就又回到了<code>ReflectiveMethodInvocation</code>的proceed方法中，这样就行成了链式调用。<br>我们接着往下看，此时当前需要执行的拦截器是第二个，也就是<code>AscpectJAroudAdvice</code>。<img src="/posts/800ab950/18.png"><br>接着往下执行，调用的是invoke方法，我们进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">	if (!(mi instanceof ProxyMethodInvocation)) &#123;</span><br><span class="line">		throw new IllegalStateException(&quot;MethodInvocation is not a Spring ProxyMethodInvocation: &quot; + mi);</span><br><span class="line">	&#125;</span><br><span class="line">	ProxyMethodInvocation pmi &#x3D; (ProxyMethodInvocation) mi;</span><br><span class="line">	ProceedingJoinPoint pjp &#x3D; lazyGetProceedingJoinPoint(pmi);</span><br><span class="line">	JoinPointMatch jpm &#x3D; getJoinPointMatch(pmi);</span><br><span class="line">	return invokeAdviceMethod(pjp, jpm, null, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中显示做了一系列的封装、转化操作，然后去调用了通知方法，我么debug进入invokeAdviceMethod方法（该方法是父类AbstractAspectJAdvice中定义的方法）。<img src="/posts/800ab950/19.png"><br>在该方法中又将调用通知方法委派给了<code>invokeAdviceMethodWithGivenArgs</code>方法，我们进入该方法。<img src="/posts/800ab950/20.png"><br>当运行完红框中的代码后你会发现又回到了<code>ReflectiveMethodInvocation</code>的proceed方法中，在这里你可能会有疑惑了，没在代码中看到调用proceed方法啊，怎么跑到proceed方法中的呢？答案是：当前调用的通知方法是切面中定义的around方法，在around的方法中会去调用proceed方法。<img src="/posts/800ab950/21.png"><br>此时的控制台输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br></pre></td></tr></table></figure>
<p>我们接着往下运行，当前应该执行的拦截器的index应该是2了，也就是<code>MethodBeforeAdviceInterceptor</code>。<img src="/posts/800ab950/22.png"><br>我们debug进入<code>MethodBeforeAdviceInterceptor</code>的invoke方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">	this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());</span><br><span class="line">	return mi.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中调用了方法执行前的通知方法，然后又去调用了proceed方法，当执行完此方法后，控制台的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br></pre></td></tr></table></figure>
<p>我们接着运行，进入proceed方法。<img src="/posts/800ab950/23.png"><br>此时的currentInterceptorIndex等于2，所以还不会去调用切点方法。最后一个拦截器的类型为<code>AscpectJAfterAdvice</code>，我们接着运行进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(MethodInvocation mi) throws Throwable &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		&#x2F;&#x2F;先调用切点方法</span><br><span class="line">		return mi.proceed();</span><br><span class="line">	&#125;</span><br><span class="line">	finally &#123;</span><br><span class="line">		invokeAdviceMethod(getJoinPointMatch(), null, null);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中，先去调用了<code>MethodInvocation</code>的proceed方法，此时<code>ReflectiveMethodInvocation</code>类中currentInterceptorIndex的值为3，所以当进入procced方法的时候，会去调用切点方法。当调用切点方法之后再去调用方法执行完成之后通知方法的调用。我们debug进入proceed方法。<img src="/posts/800ab950/24.png"><br>可以看到程序确实会去调用invokeJoinpoint，进入该方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object invokeJoinpoint() throws Throwable &#123;</span><br><span class="line">	return AopUtils.invokeJoinpointUsingReflection(this.target, this.method, this.arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是直接通过反射进行了方法的调用，当执行完此方法后，控制台的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br></pre></td></tr></table></figure>
<p>调用完切点方法之后，就是去调用方法执行之后的通知方法。<img src="/posts/800ab950/25.png"><br>在执行该方法之前会去获取之前存入ThreadLocal中的MethodInvocation，也就是调用<code>getJoinPointMatch</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected JoinPointMatch getJoinPointMatch() &#123;</span><br><span class="line">	&#x2F;&#x2F;从ThreadLocal取出MethodInvocation</span><br><span class="line">	MethodInvocation mi &#x3D; ExposeInvocationInterceptor.currentInvocation();</span><br><span class="line">	if (!(mi instanceof ProxyMethodInvocation)) &#123;</span><br><span class="line">		throw new IllegalStateException(&quot;MethodInvocation is not a Spring ProxyMethodInvocation: &quot; + mi);</span><br><span class="line">	&#125;</span><br><span class="line">	return getJoinPointMatch((ProxyMethodInvocation) mi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当调用invokeAdviceMethod的时候流程就是和上面调用方法执行前的通知方法的流程是一样的了，这里就不重复说明了。当执行完该通知方法后控制台的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br><span class="line">after test..</span><br></pre></td></tr></table></figure>
<p>我们一直运行下去，程序会进入到切面中的aroud通知方法中。<img src="/posts/800ab950/26.png"><br>执行完该通知方法，此时控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before1</span><br><span class="line">before test..</span><br><span class="line">这是一个快乐程序员</span><br><span class="line">after test..</span><br><span class="line">after1</span><br></pre></td></tr></table></figure>
<p>拦截器链执行完成之后就是根据需要返回执行结果了。<img src="/posts/800ab950/27.png"><br>至此为止，被切入方法的调用过程就讲解完成了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇文章中，对被切入方法的调用过程进行了介绍。在aop中，Spring时通过调用拦截器链的方式来实现方法功能的增强的。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP源码解析之代理类的生成</title>
    <url>/posts/47477f67/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我们已经知道aop的底层是通过动态代理来实现的，本篇文章索要做的事情就是带你搞清楚代理类的生成过程。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>在Spring中，在执行完成自定义的初始化方法之后会执行<code>BeanPostProcessor</code>的<code>postProcessAfterInitialization</code>方法，代理类的生成就是在该方法中进行的。在前面的文章我们知道了<code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了<code>BeanPostProcessor</code>接口，我们翻看源码会发现关于<code>postProcessAfterInitialization</code>方法的实现是在其父类<code>AbstractAutoProxyCreator</code>中实现的，我们在该方法中打上断点，并进入debug。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) &#123;</span><br><span class="line">	&#x2F;*xxx: 某个bean 已经实例化后*&#x2F;</span><br><span class="line">	if (bean !&#x3D; null) &#123;</span><br><span class="line">		Object cacheKey &#x3D; getCacheKey(bean.getClass(), beanName);</span><br><span class="line">		&#x2F;&#x2F;判断该bean是否已经被Spring AOP提前代理过，如果没有被提前代理过则进入AOP代理</span><br><span class="line">		if (this.earlyProxyReferences.remove(cacheKey) !&#x3D; bean) &#123; (1)</span><br><span class="line">			return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在(1)这个位置做了一个判断，判断该bean是否已经被AOP提前代理过了，这里是为了处理循环依赖的情况，因为在发生循环引用的时候，会从三级缓存中去获取bean对象，在此过程中就会提前去生成代理对象，所以在此情况下就不会再去生成AOP代理对象了。<img src="/posts/47477f67/2.png"><br>本例子中并没有循环引用存在，所以earlyProxyReferences中取出的值是null的。我们进入此<code>wrapIfNecessary</code>方法。<img src="/posts/47477f67/3.png"><br>在该方法中首先做了一些验证操作，之后就是创建代理的主要逻辑了。Spring先是获取了该bean的Advice和Advisor，也就是<code>getAdvicesAndAdvisorsForBean</code>，我们进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object[] getAdvicesAndAdvisorsForBean(</span><br><span class="line">			Class&lt;?&gt; beanClass, String beanName, @Nullable TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;寻找符合条件的Advisor</span><br><span class="line">	List&lt;Advisor&gt; advisors &#x3D; findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">	if (advisors.isEmpty()) &#123;</span><br><span class="line">		return DO_NOT_PROXY;</span><br><span class="line">	&#125;</span><br><span class="line">	return advisors.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中又把此操作委托给了<code>findEligibleAdvisors</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">	&#x2F;&#x2F;寻找候选增强器</span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors &#x3D; findCandidateAdvisors();(1)</span><br><span class="line">	&#x2F;&#x2F;寻找该bean能够应用的增强器</span><br><span class="line">	List&lt;Advisor&gt; eligibleAdvisors &#x3D; findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">	extendAdvisors(eligibleAdvisors);</span><br><span class="line">	if (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">		eligibleAdvisors &#x3D; sortAdvisors(eligibleAdvisors);</span><br><span class="line">	&#125;</span><br><span class="line">	return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中首先获取了容器中的所有候选Advisor，也就是<code>findCandidateAdvisors</code>方法。<img src="/posts/47477f67/4.png"><br>这个方法是不是很眼熟，对，在Advisor初始化的过程中Spring就调用过这个方法，只不过现在Spring并不会去初始化Advisor了，会直接从缓存中获取了。<img src="/posts/47477f67/5.png"><br>通过调试消息确实证实了如此，Sring先获取了所有的切面名称，然后通过切面名称从缓存中获取对应的Advisor之后将所有的Advisor返回。获取到所有的Advisor之后就应该筛选该bean所需要使用的Advisor了，也就是调用<code>findAdvisorsThatCanApply</code>方法，在该方法中又将该工作委托给了工具类<code>AopUtils</code>中的<code>findAdvisorsThatCanApply</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static List&lt;Advisor&gt; findAdvisorsThatCanApply(List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; clazz) &#123;</span><br><span class="line">	if (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line">		return candidateAdvisors;</span><br><span class="line">	&#125;</span><br><span class="line">	List&lt;Advisor&gt; eligibleAdvisors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	&#x2F;&#x2F;首先处理引介增强</span><br><span class="line">	for (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">		if (candidate instanceof IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123;</span><br><span class="line">			eligibleAdvisors.add(candidate);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	boolean hasIntroductions &#x3D; !eligibleAdvisors.isEmpty();</span><br><span class="line">	for (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">		if (candidate instanceof IntroductionAdvisor) &#123;</span><br><span class="line">			&#x2F;&#x2F; already processed</span><br><span class="line">			continue;</span><br><span class="line">		&#125;</span><br><span class="line">		if (canApply(candidate, clazz, hasIntroductions)) &#123;</span><br><span class="line">			eligibleAdvisors.add(candidate);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法先是处理了引介增强器，在本例子中我们没有该类型的Advisor。所以我们只关注下面这个循环中的内容，该循环内就比较简单了，显示做了一个判断，如果是上面处理过的Advisor直接跳过，之后就是判断该bean是否能够应用该Advisor，我们进入<code>canApply</code>方法。<img src="/posts/47477f67/6.png"><br>在我们的程序中，肯定是进入下面这个分支的。注意调试信息中的Advisor的类型<code>InstantiationModelAwarePointcutAdvisorImpl</code>就是我们初始化Advisor时创建实例的类型。<img src="/posts/47477f67/7.png"><br>该类实现了<code>PointcutAdvisor</code>接口，我们debug进入下面这个分支的<code>canApply</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static boolean canApply(Pointcut pc, Class&lt;?&gt; targetClass, boolean hasIntroductions) &#123;</span><br><span class="line">	Assert.notNull(pc, &quot;Pointcut must not be null&quot;);</span><br><span class="line">	&#x2F;&#x2F;首先通过类过滤器过滤</span><br><span class="line">	if (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MethodMatcher methodMatcher &#x3D; pc.getMethodMatcher();</span><br><span class="line">	&#x2F;&#x2F;然后会通过切点的方法匹配策略 进行匹配</span><br><span class="line">	if (methodMatcher &#x3D;&#x3D; MethodMatcher.TRUE) &#123;</span><br><span class="line">		&#x2F;&#x2F; No need to iterate the methods if we&#39;re matching any method anyway...</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	IntroductionAwareMethodMatcher introductionAwareMethodMatcher &#x3D; null;</span><br><span class="line">	if (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">		introductionAwareMethodMatcher &#x3D; (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Set&lt;Class&lt;?&gt;&gt; classes &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">	if (!Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">		&#x2F;&#x2F;目标对象没有采用jdk动态代理，则要么是cglib代理，要么没有代理，获取到没有代理的原始类</span><br><span class="line">		classes.add(ClassUtils.getUserClass(targetClass));</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F; 获取到目标类的所有的超类接口</span><br><span class="line">	classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line"></span><br><span class="line">	for (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">		&#x2F;&#x2F;获取目标类即接口的方法，只要有一个方法满足切点条件，即视为切点可以匹配</span><br><span class="line">		Method[] methods &#x3D; ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">		for (Method method : methods) &#123;</span><br><span class="line">			&#x2F;&#x2F;对目标类和方法进行切点验证</span><br><span class="line">			if (introductionAwareMethodMatcher !&#x3D; null ?</span><br><span class="line">				introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :</span><br><span class="line">				methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">				return true;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Pointcut的作用就是判断类中的方法是否需要应用Advisor，在前面的文章中我们已经讲过了，在该方法中注意要做了如下事情:</p>
<ul>
<li>判断该类是否符合能通过类过滤器。</li>
<li>获取Pointcut中的MethodMatcherr（能够判断方法是否需要应用该Advisor）。</li>
<li>获取该类和父类的Class信息。</li>
<li>循环判断该类和父类Class对象中的方法，如果有一个方法满足切点条件，即是为切点可匹配。</li>
</ul>
<p>获取到该bean该应用的Advisor之后Spring对Advisor做了一些扩展工作。我们进入<code>extendAdvisors</code>方法。在该方法上有如下注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors:</span><br><span class="line">* concretely, &#123;@link ExposeInvocationInterceptor&#125; at the beginning of the list.</span><br><span class="line">* &lt;p&gt;This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut</span><br><span class="line">* matching) and make available the current AspectJ JoinPoint. The call will have no effect</span><br><span class="line">* if there are no AspectJ advisors in the advisor chain.</span><br><span class="line">* @param advisors the advisors available</span><br><span class="line">* @return &#123;@code true&#125; if an &#123;@link ExposeInvocationInterceptor&#125; was added to the list,</span><br><span class="line">* otherwise &#123;@code false&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>
<p>这段话的意思是说：如果有必要在Advisor list的头位置添加<code>ExposeInvocationInterceptor</code>，<code>ExposeInvocationInterceptor</code>就是用来传递MethodInvocation的，在后续的调用链环节中，如果需要获取到当前的<code>MethodInvocation</code>就通过<code>ExposeInvocationInterceptor#currentInvocation()</code>静态方法获得。<img src="/posts/47477f67/8.png"><br>通过debug信息发现此方法执行完后在eligableAdvisor的头位置确实多了一个<code>ExposeInvocationInterceptor</code>对象。之后Spring对Advisor进行了排序，调用了<code>sortAdvisors</code>方法。到此就获取到了bean所需要并排序好的Advisor了。<br>之后调用了<code>createProxy</code>方法进行代理对象的创建流程了，debug进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,</span><br><span class="line">		@Nullable Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line">	if (this.beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">		AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ProxyFactory proxyFactory &#x3D; new ProxyFactory();</span><br><span class="line">	&#x2F;&#x2F;获取当前类中相关属性</span><br><span class="line">	proxyFactory.copyFrom(this);</span><br><span class="line">	&#x2F;&#x2F;如果proxyFactory.proxyTargetClass为false，但是目标beanClass是类</span><br><span class="line">	&#x2F;&#x2F;而不是接口，那么需要设置proxyFactory.proxyTargetClass为true，表示</span><br><span class="line">	&#x2F;&#x2F;使用cglib生成代理</span><br><span class="line">	if (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">	if (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">			proxyFactory.setProxyTargetClass(true);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			&#x2F;&#x2F;检查给定bean类上的接口，如果接口适合的话并将他们应用到proxyFactory中</span><br><span class="line">			evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取增强器</span><br><span class="line">	Advisor[] advisors &#x3D; buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    &#x2F;&#x2F;加入增强器</span><br><span class="line">	proxyFactory.addAdvisors(advisors);</span><br><span class="line">	&#x2F;&#x2F;设置要代理的类</span><br><span class="line">	proxyFactory.setTargetSource(targetSource);</span><br><span class="line">	&#x2F;&#x2F;定制代理</span><br><span class="line">	customizeProxyFactory(proxyFactory);</span><br><span class="line">	&#x2F;&#x2F;用来控制代理工厂被配置后，是否还允许修改通知，</span><br><span class="line">	&#x2F;&#x2F;缺省值为false（即在代理被配置之后，不允许修改代理的配置）</span><br><span class="line">	proxyFactory.setFrozen(this.freezeProxy);</span><br><span class="line">	if (advisorsPreFiltered()) &#123;</span><br><span class="line">		proxyFactory.setPreFiltered(true);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在该方法先是创建了ProxyFactory，然后做了一系列的准备工作，然后调用了<code>ProxyFactory#getProxy()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object getProxy(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">	return createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中首先调用了<code>createAopProxy</code>方法来创建了一个<code>AopProxy</code>对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected final synchronized AopProxy createAopProxy() &#123;</span><br><span class="line">	if (!this.active) &#123;</span><br><span class="line">		activate();</span><br><span class="line">	&#125;</span><br><span class="line">    &#x2F;&#x2F;创建AOP工厂</span><br><span class="line">	return getAopProxyFactory().createAopProxy(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>AopProxy</code>的工作又交给了<code>createAopProxy</code>方法去完成了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException &#123;</span><br><span class="line">	if (!IN_NATIVE_IMAGE &amp;&amp;</span><br><span class="line">			(config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config))) &#123;</span><br><span class="line">		Class&lt;?&gt; targetClass &#x3D; config.getTargetClass();</span><br><span class="line">		if (targetClass &#x3D;&#x3D; null) &#123;</span><br><span class="line">			throw new AopConfigException(&quot;TargetSource cannot determine target class: &quot; +</span><br><span class="line">					&quot;Either an interface or a target is required for proxy creation.&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;*xxx: 接口动态代理采用jdk的动态代理进行编织*&#x2F;</span><br><span class="line">		if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">			return new JdkDynamicAopProxy(config);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;*xxx: 实例类动态代理采用 cglib的动态代理进行编织*&#x2F;</span><br><span class="line">		return new ObjenesisCglibAopProxy(config);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		return new JdkDynamicAopProxy(config);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过该方法我们得知，在Spring中接口动态代理采用jdk动态代理进行编织，实例类动态代理采用cglib的动态代理进行编织。创建好AopProxy之后就是调用<code>getProxy</code>方法去生成代理类了。</p>
<pre><code>public Object getProxy(@Nullable ClassLoader classLoader) &#123;
    if (logger.isTraceEnabled()) &#123;
        logger.trace(&quot;Creating JDK dynamic proxy: &quot; + this.advised.getTargetSource());
    &#125;
     return Proxy.newProxyInstance(classLoader, this.proxiedInterfaces, this);
&#125;
</code></pre>
<p>在这我们终于看到我们熟悉的通过jdk创建代理的代码了，到此位置代理类的创建流程就讲解完成了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本文的探索我们知道了在Spring中，AOP代理类的生成是在bean生命周期的自定义初始化完成方法之后进行的也就是在<code>AnnotationAwareAspectJAutoProxyCreator#postProcessorBeforInitilization()</code>方法中进行的。并且会把bean的需要应用的Advisor进行处理之后放到生成的代理对象中，方便后面调用的时候直接使用。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之finishBeanFactoryInitialization</title>
    <url>/posts/b9542103/</url>
    <content><![CDATA[<p>在refresh方法中在finishBeanFactoryInitialization这行代码之前有这样一行注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Instantiate all remaining (non-lazy-init) singletons.</span><br></pre></td></tr></table></figure>
<p>注释的意思就是：实例化剩余所有非懒加载的单例对象。<br>首先我们进入<strong>finishBeanFactoryInitialization</strong>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">	&#x2F;&#x2F; Initialize conversion service for this context.</span><br><span class="line">	&#x2F;&#x2F;(1)初始化此上下文的转换服务</span><br><span class="line">	if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">		beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">		beanFactory.setConversionService(</span><br><span class="line">		beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register a default embedded value resolver if no bean post-processor</span><br><span class="line">	&#x2F;&#x2F; (such as a PropertyPlaceholderConfigurer bean) registered any before:</span><br><span class="line">	&#x2F;&#x2F; at this point, primarily for resolution in annotation attribute values.</span><br><span class="line">	&#x2F;&#x2F;(2)如果beanFactory之前没有注册嵌入值解析器，则注册默认的嵌入值解析器：主要用于注解属性值的解析</span><br><span class="line">	if (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">		beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F; Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br><span class="line">	&#x2F;&#x2F;(3)初始化LoadTimeWeaverAware Bean实例对象</span><br><span class="line">	String[] weaverAwareNames &#x3D; beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);</span><br><span class="line">	for (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">		getBean(weaverAwareName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Stop using the temporary ClassLoader for type matching.</span><br><span class="line">	beanFactory.setTempClassLoader(null);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; (4)Allow for caching all bean definition metadata, not expecting further changes.</span><br><span class="line">	&#x2F;&#x2F;冻结所有的bean定义，说明注册的bean定义将不在被修改或者进一步处理</span><br><span class="line">	beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; (5)Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">	&#x2F;&#x2F;实例化所有剩余（非懒加载）的单例对象</span><br><span class="line">	beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中主要做了如下事情：</p>
<ul>
<li>初始化此上下文的转换服务。</li>
<li>如果beanFactory之前没有注册嵌入值解析器，则注册默认的嵌入值解析器：主要用于注解属性值的解析（也就是负责解析被@Value注解的属性值）。</li>
<li>初始化LoadTimeWeaverAware Bean实例对象</li>
<li>冻结所有的bean定义，说明注册的bean定义将不在被修改或者进一步处理。所以，你在BeanPostProcessor中就不能再修改配置元数据（BeanDefinitiion），要修改配置元数据可以再<code>BeanFactoryPostProcessor#postProcessBeanFactory()</code>方法中去修改。</li>
<li>实例化所有剩余（非懒加载）的单例对象</li>
</ul>
<p>下篇文章将专门来介绍bean的加载。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之initApplicationEventMulticaster</title>
    <url>/posts/eba13e6c/</url>
    <content><![CDATA[<h1 id="多播器简介"><a href="#多播器简介" class="headerlink" title="多播器简介"></a>多播器简介</h1><p>学过编程语言的应该对事件不陌生，当一些事件发生时，你需要通知其事件的监听器做相应的处理。这其实是设计模式中的观察者模式的典型应用。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在Spring中你只需要继承<code>ApplicationEvent</code>即可以完成一个自定义的事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestEvent extends ApplicationEvent &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Create a new &#123;@code ApplicationEvent&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param source the object on which the event initially occurred or with</span><br><span class="line">     *               which the event is associated (never &#123;@code null&#125;)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public TestEvent(Object source) &#123;</span><br><span class="line">        super(source);</span><br><span class="line">    &#125;</span><br><span class="line">    public String msg;</span><br><span class="line"></span><br><span class="line">    public TestEvent(Object source, String msg) &#123;</span><br><span class="line">        super(source);</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line">    public void print()&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>可以通过实现<code>ApplicationListener</code>或者使用<code>@EventListener</code>注解来创建一个监听器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestListener implements ApplicationListener &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ApplicationEvent event) &#123;</span><br><span class="line">        if (event instanceof TestEvent)&#123;</span><br><span class="line">            TestEvent event1 &#x3D; (TestEvent) event;</span><br><span class="line">            event1.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件发布"><a href="#事件发布" class="headerlink" title="事件发布"></a>事件发布</h2><p>Spring中发布事件的接口是ApplicationEventPublisher，我们可以自定义自己的类，当然也可以使用spring现成的类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Bean.xml&quot;);</span><br><span class="line">        TestEvent event &#x3D; new TestEvent(&quot;hello&quot;,&quot;msg&quot;);</span><br><span class="line">        context.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="事件发布-1"><a href="#事件发布-1" class="headerlink" title="事件发布"></a>事件发布</h2><p>当调用<code>publishEvent()</code>方法时最后发布事件的方法为<code>SimpleApplicationEvenMulticaster#multicastEvent()</code>，进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) &#123;</span><br><span class="line">	ResolvableType type &#x3D; (eventType !&#x3D; null ? eventType : resolveDefaultEventType(event));</span><br><span class="line">	Executor executor &#x3D; getTaskExecutor();</span><br><span class="line">	&#x2F;*xxx: 从这里可以看出，对监听器的执行是通过遍历执行的*&#x2F;</span><br><span class="line">	for (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">		if (executor !&#x3D; null) &#123;</span><br><span class="line">			executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">		&#125;</span><br><span class="line">		else if (this.applicationStartup !&#x3D; null) &#123;</span><br><span class="line">			StartupStep invocationStep &#x3D; this.applicationStartup.start(&quot;spring.event.invoke-listener&quot;);</span><br><span class="line">			invokeListener(listener, event);</span><br><span class="line">			invocationStep.tag(&quot;event&quot;, event::toString);</span><br><span class="line">			if (eventType !&#x3D; null) &#123;</span><br><span class="line">				invocationStep.tag(&quot;eventType&quot;, eventType::toString);</span><br><span class="line">			&#125;</span><br><span class="line">			invocationStep.tag(&quot;listener&quot;, listener::toString);</span><br><span class="line">			invocationStep.end();</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			invokeListener(listener, event);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出这里其实就是遍历了所有的监听器，然后调用<code>onApplicationEvent()</code>方法。</p>
<h2 id="初始化多播器"><a href="#初始化多播器" class="headerlink" title="初始化多播器"></a>初始化多播器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void initApplicationEventMulticaster() &#123;</span><br><span class="line">	ConfigurableListableBeanFactory beanFactory &#x3D; getBeanFactory();</span><br><span class="line">	&#x2F;&#x2F;判断是否存在beanname为applicationEventMulticaster的BeanDefinition</span><br><span class="line">	if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">		this.applicationEventMulticaster &#x3D;</span><br><span class="line">				beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Using ApplicationEventMulticaster [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F;当产生Spring事件的时候会默认使用SimpleApplicationEventMulticaster</span><br><span class="line">		&#x2F;&#x2F;的multicastEvent来广播事件</span><br><span class="line">		SimpleApplicationEventMulticaster simpleApplicationEventMulticaster &#x3D; new SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">		simpleApplicationEventMulticaster.setApplicationStartup(getApplicationStartup());</span><br><span class="line">		this.applicationEventMulticaster &#x3D; simpleApplicationEventMulticaster;</span><br><span class="line">		beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;No &#39;&quot; + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + &quot;&#39; bean, using &quot; +</span><br><span class="line">					&quot;[&quot; + this.applicationEventMulticaster.getClass().getSimpleName() + &quot;]&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多播器初始化的流程也是比较简单的就是先判断用户是否自定义了applicationEventMulticaster的bean，如果没有则创建<code>SimpleApplicationEventMulticaster</code>的多播器，并添加到beanFactory中。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之initMessageSource</title>
    <url>/posts/2704654a/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void initMessageSource() &#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory &#x3D; getBeanFactory();</span><br><span class="line">    if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        &#x2F;&#x2F;从容器中获取name为 &quot;messageSource&quot;，类型为MessageSource的bean</span><br><span class="line">        this.messageSource &#x3D; beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</span><br><span class="line">        if (this.parent !&#x3D; null &amp;&amp; this.messageSource instanceof HierarchicalMessageSource) &#123;</span><br><span class="line">            HierarchicalMessageSource hms &#x3D; (HierarchicalMessageSource) this.messageSource;</span><br><span class="line">            if (hms.getParentMessageSource() &#x3D;&#x3D; null) &#123;</span><br><span class="line">                hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;Using MessageSource [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        DelegatingMessageSource dms &#x3D; new DelegatingMessageSource();</span><br><span class="line">        dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">        this.messageSource &#x3D; dms;</span><br><span class="line">        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);</span><br><span class="line">        if (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(&quot;No &#39;&quot; + MESSAGE_SOURCE_BEAN_NAME + &quot;&#39; bean, using [&quot; + this.messageSource + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>上面这段代码逻辑很清晰，先判断当前是否有该bean的BeanDefinition，若存在，则对MessageSource进行初始化并赋值给成员变量messageSource。如果不存在，则赋值一个空的MessageSource，也就是<code>DelegatingMessageSource</code>，以便能够正常的进行==getMessage==方法调用。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之invokeBeanFactoryPostProcessors</title>
    <url>/posts/4f99d2fa/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>见名知意，我们可以知道<code>invokeBeanFactoryPostProcessors</code>方法的作用就是调用BeanFactoryPostProcessors接口的实现类，BeanFactoryPostProcessor接口与BeanPostProcessor接口类似，可以对bean信息（配置元数据）进行处理。</p>
<h1 id="BeanFactoryPostProcessor使用"><a href="#BeanFactoryPostProcessor使用" class="headerlink" title="BeanFactoryPostProcessor使用"></a>BeanFactoryPostProcessor使用</h1><h2 id="Beans-xml"><a href="#Beans-xml" class="headerlink" title="Beans.xml"></a>Beans.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">    http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;a&quot; class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.A&quot; init-method&#x3D;&quot;initMethod&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;悦哥哥&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;bean class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyInstantiationAwareBeanPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;pcy.beanFactoryPostProcessor.CustomBeanFactoryPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="CustomBeanFactoryPostProcessor-java"><a href="#CustomBeanFactoryPostProcessor-java" class="headerlink" title="CustomBeanFactoryPostProcessor,java"></a>CustomBeanFactoryPostProcessor,java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBeanFactoryPostProcessor implements BeanFactoryPostProcessor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;enter into postProcessBeanFactory&quot;);</span><br><span class="line">        BeanDefinition be &#x3D; beanFactory.getBeanDefinition(&quot;a&quot;);</span><br><span class="line">        &#x2F;&#x2F;获取到beanDefinition之后你可以对其进行修改等操作，例如你可以在配置文件中对数据库连接密码进行加密，</span><br><span class="line">        &#x2F;&#x2F;在此进行解密。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);</span><br><span class="line">		A a &#x3D; (A) context.getBean(&quot;a&quot;);</span><br><span class="line">		System.out.println(a.getName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enter into postProcessBeanFactory</span><br><span class="line">A被实例化</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们进入<code>invokeBeanFactoryPostProcessors()</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">	PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());(1)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span><br><span class="line">	&#x2F;&#x2F; (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span><br><span class="line">	if (!IN_NATIVE_IMAGE &amp;&amp; beanFactory.getTempClassLoader() &#x3D;&#x3D; null &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">		beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从(1)我们可以知道BeanFactoryPostProcessor是在这里被调用的那么，那么这些BeanFactoryProcessor在哪里被加载进去的呢？通过debug得知，当执行<code>getBeanFactoryPostProcessor()</code>方法时，返回的其实是一个空数组，那么代表CustomBeanFactoryPostProcessor此时还并未加载到到容器当中。所以说我们自定义的CustomBeanFactoryPostProcessor并不是在此方法之前创建的，通过进入<code>PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors()</code>方法（省略了一些不重要的过程）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void invokeBeanFactoryPostProcessors(</span><br><span class="line">		ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Invoke BeanDefinitionRegistryPostProcessors first, if any.</span><br><span class="line">	Set&lt;String&gt; processedBeans &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">	&#x2F;*xxx: 首先处理 所有的BeanDefinitionRegistryPostProcessors工厂后置处理器接口*&#x2F;</span><br><span class="line">	.....</span><br><span class="line">	String[] postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);(1)</span><br><span class="line"></span><br><span class="line">	.....</span><br><span class="line">	List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">	for (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">		&#x2F;&#x2F;在这会根据bean name去获取BeanFactoryPostProcessor bean对象，此时容器中肯定是还没有此bean对象的，</span><br><span class="line">		&#x2F;&#x2F;所以说这里其实是先去创建BeanFactoryPostProcessor的bean对象</span><br><span class="line">		nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));(2)</span><br><span class="line">	&#125;</span><br><span class="line">	invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);(3)</span><br><span class="line">	&#x2F;&#x2F; Clear cached merged bean definitions since the post-processors might have</span><br><span class="line">	&#x2F;&#x2F; modified the original metadata, e.g. replacing placeholders in values...</span><br><span class="line">	beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中有三行非常重要的代码，也就是(1)-(3)这三行代码。执行代码(1)后，会从bean工厂找到所有实现<code>BeanFactoryPostProcessor</code>接口的实现类的beanname，在此例子中返回的是：pcy.beanFactoryPostProcessor.CustomBeanFactoryPostProcessor#0，然后看代码(2)，在这里会从beanFactory中获取我们实现类的bean对象，此时beanFactory是没有此bean对象的，此时回去创建我们的bean对象。所以，自定义的BeanFactoryPostProcessor是在这里被加载到context中的。然后就是调用代码(3)，也就执行了我们实现类的方法了。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之obtainFreshBeanFactory</title>
    <url>/posts/f07110d1/</url>
    <content><![CDATA[<p><code>AbstractApplicationContext#obtainFreshBeanFactory()</code>,进入此方法，该方法中调用了两个抽象方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class="line">	&#x2F;&#x2F;抽象方法，交给子类实现</span><br><span class="line">	refreshBeanFactory();</span><br><span class="line">	&#x2F;&#x2F;抽象方法，获得实际的 bean工厂，由子类实现</span><br><span class="line">	return getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>refreshBeanFactory()</code>方法在<code>AbstractRefreshableConfigApplicationContext</code>类中进行了实现，进入该实现方法，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">	&#x2F;&#x2F;如果之前有bean工厂，就销毁bean工厂的所有bean，并且关闭bean工厂</span><br><span class="line">	if (hasBeanFactory()) &#123;</span><br><span class="line">		&#x2F;&#x2F;父类实现</span><br><span class="line">		destroyBeans();</span><br><span class="line">		&#x2F;&#x2F;本类实现</span><br><span class="line">		closeBeanFactory();</span><br><span class="line">	&#125;</span><br><span class="line">	try &#123;</span><br><span class="line">		&#x2F;&#x2F;创建bean工厂</span><br><span class="line">		DefaultListableBeanFactory beanFactory &#x3D; createBeanFactory();</span><br><span class="line">		beanFactory.setSerializationId(getId());</span><br><span class="line">		&#x2F;&#x2F;本地化bean工厂，主要设置是否允许bean覆盖以及bean的循环引用</span><br><span class="line">		customizeBeanFactory(beanFactory);</span><br><span class="line">		&#x2F;&#x2F;加载bean信息并封装为BeanDefinition，抽象方法，交给子类实现</span><br><span class="line">		loadBeanDefinitions(beanFactory);</span><br><span class="line">		this.beanFactory &#x3D; beanFactory;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (IOException ex) &#123;</span><br><span class="line">		throw new ApplicationContextException(&quot;I&#x2F;O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法做了如下操作：</p>
<ul>
<li>首先判断当前是否已经存在了bean工厂，若存在则销毁所有bean并且关闭bean工厂。</li>
<li>创建bean工厂。</li>
<li>本地化bean工厂，如果this.allowBeanDefinitionOverriding不为空，则将<code>DefaultListableBeanFactory.allowBeanDefinitionOverriding</code>设置为该值；如果this.allowCircularReferences不为空，则将<code>DefaultListableBeanFactory.allowCircularReferences</code>设置为该值。</li>
<li>加载bean信息，并封装到BeanDefinition中。</li>
<li>将创建的bean工厂关联到容器中</li>
</ul>
<p>配置加载完成之后，执行<code>getBeanFactory()</code>方法，进入该抽象方法的实现方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final ConfigurableListableBeanFactory getBeanFactory() &#123;</span><br><span class="line">	DefaultListableBeanFactory beanFactory &#x3D; this.beanFactory;</span><br><span class="line">	if (beanFactory &#x3D;&#x3D; null) &#123;</span><br><span class="line">		throw new IllegalStateException(&quot;BeanFactory not initialized or already closed - &quot; +</span><br><span class="line">				&quot;call &#39;refresh&#39; before accessing beans via the ApplicationContext&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接将之前创建的bean工厂返回，<code>obtainFreshBeanFactory()</code>也执行结束，此时bean信息也加载到beanFactory中了。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之prepareRefresh</title>
    <url>/posts/8a8ec8a/</url>
    <content><![CDATA[<p>在上一篇文章中介绍到了<code>AbstractApplication#refresh()</code>方法，下面将一一介绍每个方法所起的功能。</p>
<h1 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh"></a>prepareRefresh</h1><p>此方法的作用为在刷新前做一些准备工作，进入此方法.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareRefresh() &#123;</span><br><span class="line">	&#x2F;&#x2F; Switch to active.</span><br><span class="line">	this.startupDate &#x3D; System.currentTimeMillis();</span><br><span class="line">	this.closed.set(false);</span><br><span class="line">	this.active.set(true);</span><br><span class="line"></span><br><span class="line">	if (logger.isDebugEnabled()) &#123;</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Refreshing &quot; + this);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			logger.debug(&quot;Refreshing &quot; + getDisplayName());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Initialize any placeholder property sources in the context environment.</span><br><span class="line">	&#x2F;&#x2F;留给子类覆盖，初始化属性资源</span><br><span class="line">	initPropertySources();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Validate that all properties marked as required are resolvable:</span><br><span class="line">	&#x2F;&#x2F; see ConfigurablePropertyResolver#setRequiredProperties</span><br><span class="line">	&#x2F;&#x2F;校验必要的属性</span><br><span class="line">	getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Store pre-refresh ApplicationListeners...</span><br><span class="line">	&#x2F;&#x2F;初始化applicationListeners</span><br><span class="line">	if (this.earlyApplicationListeners &#x3D;&#x3D; null) &#123;</span><br><span class="line">		this.earlyApplicationListeners &#x3D; new LinkedHashSet&lt;&gt;(this.applicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; Reset local application listeners to pre-refresh state.</span><br><span class="line">		this.applicationListeners.clear();</span><br><span class="line">		this.applicationListeners.addAll(this.earlyApplicationListeners);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Allow for the collection of early ApplicationEvents,</span><br><span class="line">	&#x2F;&#x2F; to be published once the multicaster is available...</span><br><span class="line">       &#x2F;&#x2F; 创建刷新前的监听事件集合</span><br><span class="line">	this.earlyApplicationEvents &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中做了如下事情：</p>
<ul>
<li>将容器的状态设置为active状态</li>
<li>初始化属性资源</li>
<li>校验必要的属性，如果必要的属性不存在则抛出<code>MissingRequiredPropertiesException</code>异常</li>
<li>初始化applicationListeners</li>
<li>创建刷新前的监听事件集合</li>
</ul>
<p><code>initPropertySources</code>方法是留给子类扩展的，所以我们可以继承此类通过子类来重写<code>initPropertySources</code>方法来实现一些我们想要的扩展。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyClassPathXmlApplicationContext extends ClassPathXmlApplicationContext &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public MyClassPathXmlApplicationContext(String... configLocations)&#123;</span><br><span class="line">        super(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void initPropertySources() &#123;</span><br><span class="line">        System.out.println(&quot;扩展initPropertySource&quot;);</span><br><span class="line">        &#x2F;&#x2F;这里添加了一个name属性到Environment里面，以方便我们在后面用到</span><br><span class="line">        getEnvironment().getSystemProperties().put(&quot;name&quot;,&quot;bobo&quot;);</span><br><span class="line">        &#x2F;&#x2F;这里要求Environment中必须包含username属性，如果不包含，则抛出异常</span><br><span class="line">        getEnvironment().setRequiredProperties(&quot;username&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的类中我们做了两个扩展，第一，向Enviroment中添加了一个属性值。第二，我们设置了一个必要的系统属性username，当该属性不存在时会抛出异常。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之prepareBeanFactory</title>
    <url>/posts/de434b88/</url>
    <content><![CDATA[<p><code>prepareBeanFactory(ConfigurableListableBeanFactory)</code>方法的作用是配置工厂的标准上下文特征，例如上下文的类加载器和后置处理器，下面我们进入源码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">	&#x2F;&#x2F; Tell the internal bean factory to use the context&#39;s class loader etc.</span><br><span class="line">	&#x2F;&#x2F;通知内部bean工厂使用当前上下文的类加载器</span><br><span class="line">	beanFactory.setBeanClassLoader(getClassLoader());(1)</span><br><span class="line">	if (!shouldIgnoreSpel) &#123;</span><br><span class="line">		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));(2)</span><br><span class="line">	&#125;</span><br><span class="line">	beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Configure the bean factory with context callbacks.</span><br><span class="line">	&#x2F;*xxx:添加上下文感知的 bean后置处理器*&#x2F;</span><br><span class="line">	beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));(3)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注入时忽略下面的类(4)</span><br><span class="line">	beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line">	beanFactory.ignoreDependencyInterface(ApplicationStartup.class);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="line">	&#x2F;&#x2F; MessageSource registered (and found for autowiring) as a bean.</span><br><span class="line">	&#x2F;&#x2F;添加可解析的依赖关系(5)</span><br><span class="line">	beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">	beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class="line">	beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class="line">	beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register early post-processor for detecting inner beans as ApplicationListeners.</span><br><span class="line">	&#x2F;&#x2F;添加监听器感知的bean后置处理器</span><br><span class="line">	beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));(6)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Detect a LoadTimeWeaver and prepare for weaving, if found.(7)</span><br><span class="line">	if (!IN_NATIVE_IMAGE &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">		&#x2F;&#x2F; Set a temporary ClassLoader for type matching.</span><br><span class="line">		beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register default environment beans.</span><br><span class="line">	&#x2F;&#x2F;注册默认应用级别的bean(8)</span><br><span class="line">	if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">	&#125;</span><br><span class="line">	if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">	&#125;</span><br><span class="line">	if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">	&#125;</span><br><span class="line">	if (!beanFactory.containsLocalBean(APPLICATION_STARTUP_BEAN_NAME)) &#123;</span><br><span class="line">		beanFactory.registerSingleton(APPLICATION_STARTUP_BEAN_NAME, getApplicationStartup());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>(1)将bean工厂的类加载器设置为当前上下文的类加载器</li>
<li>(2)设置bean工厂是否支持SpEL表达式</li>
<li>(3)添加ApplicationContextAwareProcessor</li>
<li>(4)忽略一些自动装配的接口</li>
<li>(5)添加可解析的自动装配，这些自动装配到bean工厂中的实例我们可以直接通过@Autowired注解获取实例，其它组件可以直接使用</li>
<li>(6)添加BeanPostProcessor（ApplicationListenerDetector）</li>
<li>(7)添加AspectJ相关的组件</li>
<li>(8)给beanFactory添加一些默认组件：environment[ConfigurableEnvironment]，systemProperties[Map&lt;String, Object&gt;]，systemEnvironment[Map&lt;String, Object&gt;]，applicationStartup[ApplicationStartup]</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>bean 工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之registerBeanPostProcessors</title>
    <url>/posts/b9e6c2cb/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void registerBeanPostProcessors(</span><br><span class="line">			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;*xxx: 注册 bean后置处理器*&#x2F;</span><br><span class="line">	String[] postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Register BeanPostProcessorChecker that logs an info message when</span><br><span class="line">	&#x2F;&#x2F; a bean is created during BeanPostProcessor instantiation, i.e. when</span><br><span class="line">	&#x2F;&#x2F; a bean is not eligible for getting processed by all BeanPostProcessors.</span><br><span class="line">	int beanProcessorTargetCount &#x3D; beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;</span><br><span class="line">	beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line">	&#x2F;&#x2F; Separate between BeanPostProcessors that implement PriorityOrdered,</span><br><span class="line">	&#x2F;&#x2F; Ordered, and the rest.</span><br><span class="line">	List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;BeanPostProcessor&gt; internalPostProcessors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;String&gt; orderedPostProcessorNames &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;String&gt; nonOrderedPostProcessorNames &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	for (String ppName : postProcessorNames) &#123;</span><br><span class="line">		if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">			BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">			priorityOrderedPostProcessors.add(pp);</span><br><span class="line">			if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">				internalPostProcessors.add(pp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">			orderedPostProcessorNames.add(ppName);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; First, register the BeanPostProcessors that implement PriorityOrdered.</span><br><span class="line">	&#x2F;&#x2F;第一步，注册所有实现PriorityOrdered的BeanPostProcessor</span><br><span class="line">	sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">	registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Next, register the BeanPostProcessors that implement Ordered.</span><br><span class="line">	&#x2F;&#x2F;第二步，注册所有实现Ordered的BeanPostProcessor</span><br><span class="line">	List&lt;BeanPostProcessor&gt; orderedPostProcessors &#x3D; new ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">	for (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">		BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">		orderedPostProcessors.add(pp);</span><br><span class="line">		if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">			internalPostProcessors.add(pp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">	registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Now, register all regular BeanPostProcessors.</span><br><span class="line">	&#x2F;&#x2F;第三步，注册所有无序的BeanPostProcessor</span><br><span class="line">	List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors &#x3D; new ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">	for (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">		BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">		nonOrderedPostProcessors.add(pp);</span><br><span class="line">		if (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">			internalPostProcessors.add(pp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Finally, re-register all internal BeanPostProcessors.</span><br><span class="line">	sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">	registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Re-register post-processor for detecting inner beans as ApplicationListeners,</span><br><span class="line">	&#x2F;&#x2F; moving it to the end of the processor chain (for picking up proxies etc).</span><br><span class="line">	&#x2F;&#x2F;添加ApplicationListener探测器</span><br><span class="line">	beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此方法中主要做了如下事情：</p>
<ul>
<li>获取所有的<code>BeanPostProcessor</code>bean的beanname</li>
<li>根据BeanPostProcessor不同的优先级进行分类</li>
<li>把分类过后的BeanPostProcessors注册到beanFactory中</li>
<li>添加ApplicationListener探测器</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-refresh方法之registerListeners</title>
    <url>/posts/2bc3b25f/</url>
    <content><![CDATA[<p>我们根据名字就可知道该该方法的作用就是注册事件监听器，进入该方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void registerListeners() &#123;</span><br><span class="line">	&#x2F;&#x2F; Register statically specified listeners first.</span><br><span class="line">	&#x2F;&#x2F;硬编码方式注册的监听器处理</span><br><span class="line">	for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">		getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class="line">	&#x2F;&#x2F; uninitialized to let post-processors apply to them!</span><br><span class="line">	&#x2F;&#x2F;配置文件注册的监听器处理</span><br><span class="line">	String[] listenerBeanNames &#x3D; getBeanNamesForType(ApplicationListener.class, true, false);</span><br><span class="line">	for (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">		getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Publish early application events now that we finally have a multicaster...</span><br><span class="line">	Set&lt;ApplicationEvent&gt; earlyEventsToProcess &#x3D; this.earlyApplicationEvents;</span><br><span class="line">	this.earlyApplicationEvents &#x3D; null;</span><br><span class="line">	if (!CollectionUtils.isEmpty(earlyEventsToProcess)) &#123;</span><br><span class="line">		for (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class="line">			getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>将手动注册的监听器绑定到广播器</li>
<li>获取beanFactory中的监听器名称，并设置到广播器中</li>
<li>如果有早期事件需要发布，发布这些早期事件</li>
</ul>
<p>对于spring配置的监听器，spring在这里并没有做太多的处理。在==refresh==方法的==registerBeanPostProcessors==方法中，注册了一个<code>ApplicationListenerDetector</code>BeanPostProcessor，在bean初始化的时候会将该监听器bean绑定到广播器中。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Listener</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-Spring容器</title>
    <url>/posts/e036e212/</url>
    <content><![CDATA[<h1 id="容器概述"><a href="#容器概述" class="headerlink" title="容器概述"></a>容器概述</h1><hr>
<p>在Spring官网上有这样一段话：ApplicationContext接口代表Spring IoC容器以及负责实例化、配置以及装配bean。容器通过读取配置元数据获取哪些对象要实例化、配置和组装的指示。<br>下面这副图从一个高级别上展示了Spring是如何工作的。<br><img src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/container-magic.png" alt="Alt Text" title="Spring工作原理"></p>
<hr>
<h2 id="Configuration-Metadata-配置元数据"><a href="#Configuration-Metadata-配置元数据" class="headerlink" title="Configuration Metadata(配置元数据)"></a>Configuration Metadata(配置元数据)</h2><p>根据之前的图我们可以知道Spring IoC容器使用一种形式的配置元数据。通过配置元数据Spring容器可以知道如何去实例化、配置和组装应用程序中的对象。传统的配置元数据以简单直观的XML格式提供，但这并不是配置元数据唯一允许的形式（常见的还有基于注解和Java代码）。在容器本身内，这些bean定义信息通过BeanDefinition来承载。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>下面通过一个例子来介绍Spring容器。</p>
<h2 id="bean对象"><a href="#bean对象" class="headerlink" title="bean对象"></a>bean对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">	public A() &#123;</span><br><span class="line">		System.out.println(&quot;A被实例化&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">    	this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bean-xml"><a href="#Bean-xml" class="headerlink" title="Bean.xml"></a>Bean.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">    http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;a&quot; class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.A&quot; init-method&#x3D;&quot;initMethod&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;悦哥哥&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;bean class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyInstantiationAwareBeanPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);（1）</span><br><span class="line">A a &#x3D; (A) context.getBean(&quot;a&quot;);</span><br><span class="line">System.out.println(a.getName());</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yuegege</span><br></pre></td></tr></table></figure>
<hr>
<p>通过结果输出的值可以看出该对象确实是已经加载到容器中了。我们从第一行代码开始分析，进入入<code>ClassPathXmlApplicationContext</code>类的构造函数，发现最终执行的构造方法是如下的构造方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(</span><br><span class="line">	String[] configLocations, boolean refresh, @Nullable ApplicationContext parent) throws BeansException &#123;</span><br><span class="line">	super(parent);&#x2F;&#x2F;执行父类的构造方法 (1)</span><br><span class="line">	setConfigLocations(configLocations);(2)</span><br><span class="line">	if (refresh) &#123;</span><br><span class="line">		refresh();(3)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码(2)的作用为当传入的configLocations（此例子中为”Bean.xml”）设置到this.configLocations中，后面要解析xml的时候好直接使用。代码(2)的功能为：加载或刷新配置的持久表示，这些表示可能来自基于java的配置、XML文件、属性文件、关系数据库模式或其他格式。在当前情况下为从XML中加载或刷新配置的持久表示。我们进入<code>refresh()</code>方法中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">	&#x2F;*xxx: 同步锁*&#x2F;</span><br><span class="line">	synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">		StartupStep contextRefresh &#x3D; this.applicationStartup.start(&quot;spring.context.refresh&quot;);</span><br><span class="line">		&#x2F;&#x2F; Prepare this context for refreshing.</span><br><span class="line">		&#x2F;&#x2F;准备上下文的刷新</span><br><span class="line">		prepareRefresh();(1)</span><br><span class="line">		&#x2F;&#x2F; Tell the subclass to refresh the internal bean factory.</span><br><span class="line">		&#x2F;&#x2F;通知子类，刷新内部实际的bean工厂,将配置元信息转化为BeanDefinition在此方法中进行</span><br><span class="line">		ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();(2)</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; Prepare the bean factory for use in this context.</span><br><span class="line">		&#x2F;&#x2F;准备这个上下文即将使用的bean工厂</span><br><span class="line">		prepareBeanFactory(beanFactory);(3)</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			&#x2F;&#x2F; Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">			&#x2F;&#x2F;标准bean工厂准备完后，为相应的子类提供bean工厂后置的处理,比如与web环境相关的上下文，会添加 ServletContextAwareProcessor</span><br><span class="line">			postProcessBeanFactory(beanFactory);(4)</span><br><span class="line"></span><br><span class="line">			StartupStep beanPostProcess &#x3D; this.applicationStartup.start(&quot;spring.context.beans.post-process&quot;);</span><br><span class="line">			&#x2F;&#x2F; Invoke factory processors registered as beans in the context.</span><br><span class="line">			&#x2F;&#x2F;处理工厂后置处理器，代理给PostProcessorRegistrationDelegate 进行处理</span><br><span class="line">			invokeBeanFactoryPostProcessors(beanFactory);(5)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Register bean processors that intercept bean creation.</span><br><span class="line">			&#x2F;&#x2F;注册bean后置处理器</span><br><span class="line">			registerBeanPostProcessors(beanFactory);(6)</span><br><span class="line">			beanPostProcess.end();</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Initialize message source for this context.</span><br><span class="line">			&#x2F;&#x2F;初始化这个上下文的数据源</span><br><span class="line">			initMessageSource();(7)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Initialize event multicaster for this context.</span><br><span class="line">			&#x2F;&#x2F;初始化这个上下文的应用事件广播器</span><br><span class="line">			initApplicationEventMulticaster();(8)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Initialize other special beans in specific context subclasses.</span><br><span class="line">			&#x2F;&#x2F;初始化其它在子上下文中的特定bean</span><br><span class="line">			onRefresh();(9)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Check for listener beans and register them.</span><br><span class="line">			&#x2F;&#x2F;注册监听器</span><br><span class="line">			registerListeners();(10)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">			&#x2F;&#x2F;实例化所有 lazy-init的bean，以及所有的SmartInitializingSingleton</span><br><span class="line">			finishBeanFactoryInitialization(beanFactory);(11)</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Last step: publish corresponding event.</span><br><span class="line">			&#x2F;&#x2F;执行生命周期处理器处理</span><br><span class="line">			finishRefresh();(12)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		catch (BeansException ex) &#123;</span><br><span class="line">			if (logger.isWarnEnabled()) &#123;</span><br><span class="line">				logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">						&quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.</span><br><span class="line">			destroyBeans();</span><br><span class="line">			&#x2F;&#x2F; Reset &#39;active&#39; flag.</span><br><span class="line">			cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F; Propagate exception to caller.</span><br><span class="line">			throw ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		finally &#123;</span><br><span class="line">			&#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we</span><br><span class="line">			&#x2F;&#x2F; might not ever need metadata for singleton beans anymore...</span><br><span class="line">			resetCommonCaches();</span><br><span class="line">			contextRefresh.end();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上<code>refresh()</code>中的方法(1)到方法(12)就是容器初始化的大致流程，下一篇文章将介绍这些方法具体所起的功能。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-循环依赖是如何解决的</title>
    <url>/posts/11f03654/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文将搞清楚三个问题：</p>
<ul>
<li>什么是循环依赖（循环引用）？</li>
<li>是如何解决的？</li>
<li>为什么要使用三级缓存？</li>
</ul>
<h1 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h1><p>循环依赖也被称作循环引用。首先，在了解循环引用之前你应该先清楚Spring加载bean的大体流程。Spring在加载一个bean 时，当从单例池（也就是保存已经实例化且初始化完成的bean Map）中获取引用的bean对象时当该引用的对象不存在时会去加载被引用的bean。举个例子，假设现在有A、B两个类，A中包含属性类型为B的成员对象且B中包含属性类型为A的成员对象。当开始加载A类的bean对象时，会从单例池中获取B类的bean，此时获取出来肯定是null。此时就会去加载A类的bean，此时就形成了一个闭环，A类的bean和B类的bean加载都不能完成，将形成死循环。流程图如下<img src="/posts/11f03654/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="加载时的流程图"></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在Spring中循环引用的解决本质是通过提前暴露bean对象（在堆中已经存在但还未初始化完成）来解决的，Spring在bean的加载中将bean的实例化和bean初始化分开了（属性的赋值放在了初始化中），这样在其它bean创建过程中能提前拿到bean的引用。在这里你可能也就明白了为什么当使用构造器注入时发生循环引用是无法解决的了吧。在Spring中使用了三级缓存来解决循环引用，说明一下，在Spring中并没有三级缓存这个概念，用这个名词是为了好表述以及和网络上的叫法一致不引起歧义，那么三级缓存到底是什么东西呢？</p>
<h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><p>我们在<code>DefaultSingletonBeanRegistry</code>中可以找到三级缓存的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** Cache of singleton objects: bean name to bean instance. *&#x2F;</span><br><span class="line">&#x2F;&#x2F;一级缓存</span><br><span class="line">private final Map&lt;String, Object&gt; singletonObjects &#x3D; new ConcurrentHashMap&lt;&gt;(256);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三级缓存</span><br><span class="line">&#x2F;** Cache of singleton factories: bean name to ObjectFactory. *&#x2F;</span><br><span class="line">private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories &#x3D; new HashMap&lt;&gt;(16);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;二级缓存</span><br><span class="line">&#x2F;** Cache of early singleton objects: bean name to bean instance. *&#x2F;</span><br><span class="line">private final Map&lt;String, Object&gt; earlySingletonObjects &#x3D; new ConcurrentHashMap&lt;&gt;(16);</span><br></pre></td></tr></table></figure>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>单例池，单例对象的缓存，在此map中存放的是已经实例化和初始化完成的bean对象。</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>早期曝光的单例对象，在此map中存放的是已经实例化完成但未初始化完成的bean对象。</p>
<h3 id="三级缓存-1"><a href="#三级缓存-1" class="headerlink" title="三级缓存"></a>三级缓存</h3><p>单例工厂缓存，存放的是bean的工厂对象。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="bean类"><a href="#bean类" class="headerlink" title="bean类"></a>bean类</h3><h4 id="A-java"><a href="#A-java" class="headerlink" title="A.java"></a>A.java</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    private B b;</span><br><span class="line"></span><br><span class="line">    public A() &#123;</span><br><span class="line">        System.out.println(&quot;Class1实例化了一个对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;Class1的对象执行了初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public B getB() &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setB(B b) &#123;</span><br><span class="line">        System.out.println(&quot;设置了属性b&quot;);</span><br><span class="line">        this.b &#x3D; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="B-java"><a href="#B-java" class="headerlink" title="B.java"></a>B.java</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class B &#123;</span><br><span class="line">    private A a;</span><br><span class="line"></span><br><span class="line">    public B() &#123;</span><br><span class="line">        System.out.println(&quot;Class2实例化了一个对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;Class2的实例执行了初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public A getA() &#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setA(A a) &#123;</span><br><span class="line">        System.out.println(&quot;设置了属性a&quot;);</span><br><span class="line">        this.a &#x3D; a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean name&#x3D;&quot;a&quot; class&#x3D;&quot;com.pcy.circular.A&quot; init-method&#x3D;&quot;init&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;b&quot; ref&#x3D;&quot;b&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean name&#x3D;&quot;b&quot; class&#x3D;&quot;com.pcy.circular.B&quot; init-method&#x3D;&quot;init&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;a&quot; ref&#x3D;&quot;a&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><h4 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;Circular.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码讲解"><a href="#源码讲解" class="headerlink" title="源码讲解"></a>源码讲解</h2><p>接下来将从源码的层面来讲Sring是如何解决循环依赖的，通过前面的文章我们知道了加载bean的开始方法是<code>DefaultListableBeanFactory#preInstantiateSingletons()</code>方法，我们在该方法内打上断点，之后进入debug。<img src="/posts/11f03654/1.PNG"><br>跟据调试信息我们可以得知此时需要加载的bean有两个：a和b。之后我们继续debug，进入<code>doGetBean</code>方法，通过调试信息我们可以得知，此时加载的bean的bean名称<img src="/posts/11f03654/2.PNG"><br>我们继续单步执行，进入的下一个方法为<code>getSingleton</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">	&#x2F;&#x2F; Quick check for existing instance without full singleton lock</span><br><span class="line">	&#x2F;&#x2F;从一级缓存中获取单例对象</span><br><span class="line">	Object singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">	&#x2F;&#x2F;单例对象为空且当前对象正在创建中</span><br><span class="line">	if (singletonObject &#x3D;&#x3D; null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">		singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">		if (singletonObject &#x3D;&#x3D; null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">			synchronized (this.singletonObjects) &#123;</span><br><span class="line">				&#x2F;&#x2F; Consistent creation of early reference within full singleton lock</span><br><span class="line">				singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">				if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">					singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">					if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">						ObjectFactory&lt;?&gt; singletonFactory &#x3D; this.singletonFactories.get(beanName);</span><br><span class="line">						if (singletonFactory !&#x3D; null) &#123;</span><br><span class="line">							singletonObject &#x3D; singletonFactory.getObject();</span><br><span class="line">							this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">							this.singletonFactories.remove(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法内，首先从一级缓存中获取加载的单例对象，此时singletonObject是为空且当前对象还没开始创建，所以此时是不会进入第一个if语句的，我们通过debug也确实可以验证我们的推断。<img src="/posts/11f03654/3.PNG"><br>所以该方法的返回值为null，之后我们跳出此方法。之后我们继续debug会发现程序会运行到如下代码处<img src="/posts/11f03654/4.PNG"><br>该方法传入的是一个匿名内部类，我们进入<code>getSingleton</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">	synchronized (this.singletonObjects) &#123;</span><br><span class="line">		Object singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">		if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">			&#x2F;&#x2F;将此bean标记为创建中</span><br><span class="line">			beforeSingletonCreation(beanName);(1)</span><br><span class="line">			boolean newSingleton &#x3D; false;</span><br><span class="line">			boolean recordSuppressedExceptions &#x3D; (this.suppressedExceptions &#x3D;&#x3D; null);</span><br><span class="line">			if (recordSuppressedExceptions) &#123;</span><br><span class="line">				this.suppressedExceptions &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">			&#125;</span><br><span class="line">			try &#123;</span><br><span class="line">				&#x2F;&#x2F;这里调用的是匿名内部类中的方法</span><br><span class="line">				singletonObject &#x3D; singletonFactory.getObject();(2)</span><br><span class="line">				newSingleton &#x3D; true;</span><br><span class="line">			&#125;</span><br><span class="line">			....</span><br><span class="line">			return singletonObject;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中，(1)首先将该bean a标记为正在创建中也就是<code>beforeSingletonCreation</code>方法，(2)之后通过对象工厂获取bean对象，我们在（2）处打上断点进入该方法之后发现会进入传入的匿名内部类中。接着我们进入<code>createBean</code>方法，通过之前的文章我们知道了创建bean的逻辑处理是在<code>doCreateBean</code>方法中，我们在该方法中打上断点并执行。<img src="/posts/11f03654/5.png"><br>通过前面的文章我们知道了的<code>createBeanInstance</code>方法的作用就是通过反射创建该对象（实例化）。该方法执行完成之后我们确实发现A已经实例化完成了，A对象在内存中的地址为2894。bean a实例化完成之后，会创建该bean的对象工厂，并加入到三级缓存当中。<img src="/posts/11f03654/7.png"><br>之后会去填充bean a中的属性值，我们进入<code>populateBean</code>方法。在该方法中主要做了一些准备工作，填充属性值的工作又调用了<code>applyPropertyValues</code>方法，我们再进入该方法。我们通过调试信息可以得知，该bean中现在就一个属性值需要填充就是b<br><img src="/posts/11f03654/9.png"><br>通过debug可以知道程序最终进入了如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object resolvedValue &#x3D; valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br></pre></td></tr></table></figure>
<p>我们打上断点，并进入此方法<img src="/posts/11f03654/10.png"><br>最终该方法又会调用<code>resolveReference</code>方法，我们进入此方法，在此方法中我们看到了一个熟悉的方法<code>getBean</code><img src="/posts/11f03654/11.png"><br>还记得刚才加载bean a时也调用了这个方法了吗？那么此时应该去创建bean b了，流程和前面创建bean a的流程是一致的。所以我们直接在doCreateBean方法中打上断点，并进入此方法。<img src="/posts/11f03654/12.png"><br>当实例化完b之后（b的地址为3029）也会创建b的对象工厂加入三级缓存，之后去填充bean b中的属性a。根据前面的讲解我们可以知道当调用<code>polulateBean</code>方法时最后会调用<code>doGetBean</code>方法，所以我们直接在<code>doGetBean</code>方法中打上断点。<br><img src="/posts/11f03654/13.png"><br>之后会调用<code>getSingleton</code>方法，我们进入此方法。<img src="/posts/11f03654/14.png"><br>还记得之前我们调用<code>doCreateBean</code>方法时已经把a标记为创建中了吗？所以此时程序是能进入到第一个if语句的。我们往下执行。<br><img src="/posts/11f03654/15.png"><br>程序运行的结果也确实如此，singletonObject为null说明此时二级缓存中也没有a的实例。之后的逻辑就比较简单了，先从三级缓存中取出a的对象工厂，之后从工厂中取出bean a，之后再把该对象放到二级缓存当中并把三级缓存中的对象工厂移除。你可以把从工厂中取出的a和前面创建的a的地址比较一下，会发现就是前面创建的a对象<img src="/posts/11f03654/16.png"><br>之后我们一直执行，执行完<code>populateBean</code>方法之后再去看b对象中的a属性。这时候b中的a就已经被赋值了。<img src="/posts/11f03654/17.png"><br>属性值填充完成之后就是对b进行初始化，之后我们在一直执行到<code>getSingleton</code>方法，此时b已经实例化并且初始化完成了，之后所需要的就是将该对象放入到单例池中就ok了。<img src="/posts/11f03654/18.png"><br>至此，b的加载就已经完成了，当a的populateBean完成之后，我们可以debug看下，此时a中的b已经被成功填充了。<img src="/posts/11f03654/19.png"><br>之后就是将a加入到一级缓存中完成a的加载。<img src="/posts/11f03654/20.png"><br>以上a和b的加载就算完成了。</p>
<h1 id="为什么要使用三级缓存"><a href="#为什么要使用三级缓存" class="headerlink" title="为什么要使用三级缓存"></a>为什么要使用三级缓存</h1><p>为什么要使用三级缓存，一级缓存行不行？二级缓存呢？</p>
<h2 id="一级缓存能解决循环依赖吗？"><a href="#一级缓存能解决循环依赖吗？" class="headerlink" title="一级缓存能解决循环依赖吗？"></a>一级缓存能解决循环依赖吗？</h2><p>答案是否定的，首先你得搞清楚一级缓存中放的是啥？一级缓存中存放的是成品对象，如果成品对象和半成品对象同时方法单例池中。那么整个流程假设如下进行<img src="/posts/11f03654/21.png"><br>该流程是没问题的，但这只能满足满足单线程的IOC情况，当在多线程情况下，那么可能拿到半成品A这样的bean是不能被使用的。</p>
<h2 id="二级缓存能解决循环依赖吗？"><a href="#二级缓存能解决循环依赖吗？" class="headerlink" title="二级缓存能解决循环依赖吗？"></a>二级缓存能解决循环依赖吗？</h2><p>答案是在不考虑AOP的情况下，二级缓存是可以解决循环依赖的。如果成品放在一级缓存中，半成品放在二级缓存中。假设整个流程如下进行<img src="/posts/11f03654/22.png"><br>从上面的流程来看确实是没问题的，并且解决了多线程情况下可能取到半成品的问题。这点我们可以看下源码，在实例化完成bean之后会将创建bean的工厂对象并加入三级缓存<img src="/posts/11f03654/23.png"><br>我们进入<code>getEarlyBeanReference</code>方法并在此方法内打上断点<br><img src="/posts/11f03654/24.png"><br>我们可以看到当没有aop时，该方法直接返回了传入的bean。这操作就相当于将bean存入三级缓存，又从三级缓存中取出放入二级缓存，此时三级缓存是没有起任何作用的。在Spring中三级缓存的主要作用就是生成代理对象，所以在不考虑aop的情况下二级缓存是可以解决循环依赖的。那你可能会说：从二级缓存中取bean对象时生成代理对象不就行了吗？这样确实是可行的，但是这样会导致一个问题：在实例化完成之后就必须执行后置处理器（BeanPostProcessor），判断是否有AnnotationAwareAspectJAutoProxyCreator并创建代理对象。那么这样就违背了bean的生命周期的设计初衷了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>循环依赖的解决是通过三级缓存来解决的，一级缓存为单例池(singletonObjects)，二级缓存为提前曝光的对象(earlySingletonObjects)，三级缓存为对象工厂(singletonFactories)。使用三级缓存是为了满足AOP功能的，当有AOP时通过三级缓存获取到的就是生成的代理对象，当不存在AOP时，通过三级缓存获取到的就是实例化后的对象。</p>
]]></content>
      <tags>
        <tag>bean加载</tag>
        <tag>循环依赖</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring异步（@Async）源码解析</title>
    <url>/posts/c2c8cd86/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>用过Spring的应该都知道，在Spring中你只需要使用@Async和@EnableAsyc这两个注解就能完成方法的异步调用。那当使用这两个注解的时候，Spring到底做了些什么可以让我们的方法调用编程异步方法调用呢？本篇文章将带你探索其中的奥秘。</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="MyService-java"><a href="#MyService-java" class="headerlink" title="MyService.java"></a>MyService.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Async</span><br><span class="line">public interface MyService &#123;</span><br><span class="line">    void hello(String name);</span><br><span class="line">    ListenableFuture&lt;String&gt; hello1(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyServiceImpl-java"><a href="#MyServiceImpl-java" class="headerlink" title="MyServiceImpl.java"></a>MyServiceImpl.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MyServiceImpl implements MyService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void hello(String name) &#123;</span><br><span class="line">        if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;name cannot be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;hello &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ListenableFuture&lt;String&gt; hello1(String name) &#123;</span><br><span class="line">        if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;name cannot be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return new AsyncResult&lt;&gt;(&quot;hello &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AppConfig-java"><a href="#AppConfig-java" class="headerlink" title="AppConfig.java"></a>AppConfig.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAsync</span><br><span class="line">@ComponentScan(value &#x3D; &quot;threadpool&quot;)</span><br><span class="line">public class AppConfig implements AsyncConfigurer &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public Executor getAsyncExecutor() &#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor &#x3D; new ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(7);</span><br><span class="line">        executor.setMaxPoolSize(42);</span><br><span class="line">        executor.setQueueCapacity(11);</span><br><span class="line">        executor.setThreadNamePrefix(&quot;MyExecutor-&quot;);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        return executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123;</span><br><span class="line">        return new MyAsyncUncaughtExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyAsyncUncaughtExceptionHandler-java"><a href="#MyAsyncUncaughtExceptionHandler-java" class="headerlink" title="MyAsyncUncaughtExceptionHandler.java"></a>MyAsyncUncaughtExceptionHandler.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyAsyncUncaughtExceptionHandler implements AsyncUncaughtExceptionHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleUncaughtException(Throwable ex, Method method, Object... params) &#123;</span><br><span class="line">        System.out.println(&quot;Exception occurs in async method ： &quot;+ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        MyService bean &#x3D; context.getBean(MyService.class);</span><br><span class="line">        bean.hello(&quot;yuege&quot;);</span><br><span class="line">        bean.hello(null);</span><br><span class="line">        Future future &#x3D; bean.hello1(&quot;悦哥&quot;);</span><br><span class="line">        Future future1 &#x3D; bean.hello1(null);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        System.out.println(future1.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="EnableAsync"><a href="#EnableAsync" class="headerlink" title="@EnableAsync"></a>@EnableAsync</h2><p>当我们使用了<code>@EnableAsync</code>的时候，Spring到底做了一些什么工作呢？我们打开该注解类。<img src="/posts/c2c8cd86/1.png"><br>可以看到使用该注解的时候会去引入另一个类<code>AsyncConfigurationSelector</code>，在该类中有一个selectImports方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">	switch (adviceMode) &#123;</span><br><span class="line">		case PROXY:</span><br><span class="line">			return new String[] &#123;ProxyAsyncConfiguration.class.getName()&#125;;</span><br><span class="line">		case ASPECTJ:</span><br><span class="line">			return new String[] &#123;ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class="line">		default:</span><br><span class="line">			return null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到Spring会根据通知的模式来选择代理的方式，主要分为动态代理和静态代理。看到这你可能也就知道了，Spring异步功能的实现就是通过代理来实现的。我们打开<code>ProxyAsyncConfiguration</code>类的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods &#x3D; false)</span><br><span class="line">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">public class ProxyAsyncConfiguration extends AbstractAsyncConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 注入AsyncAnnotationBeanPostProcessor到容器中</span><br><span class="line">	 * @return</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	@Bean(name &#x3D; TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class="line">	@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">	public AsyncAnnotationBeanPostProcessor asyncAdvisor() &#123;</span><br><span class="line">		Assert.notNull(this.enableAsync, &quot;@EnableAsync annotation metadata was not injected&quot;);</span><br><span class="line">		AsyncAnnotationBeanPostProcessor bpp &#x3D; new AsyncAnnotationBeanPostProcessor();</span><br><span class="line">		bpp.configure(this.executor, this.exceptionHandler);</span><br><span class="line">		Class&lt;? extends Annotation&gt; customAsyncAnnotation &#x3D; this.enableAsync.getClass(&quot;annotation&quot;);</span><br><span class="line">		if (customAsyncAnnotation !&#x3D; AnnotationUtils.getDefaultValue(EnableAsync.class, &quot;annotation&quot;)) &#123;</span><br><span class="line">			bpp.setAsyncAnnotationType(customAsyncAnnotation);</span><br><span class="line">		&#125;</span><br><span class="line">		bpp.setProxyTargetClass(this.enableAsync.getBoolean(&quot;proxyTargetClass&quot;));</span><br><span class="line">		bpp.setOrder(this.enableAsync.&lt;Integer&gt;getNumber(&quot;order&quot;));</span><br><span class="line">		return bpp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该配置类中向容器中注入了一个<code>AsyncAnnotationBeanPostProcessor</code>，看下该类的结构图。<img src="/posts/c2c8cd86/2.png"><br>我在该类结构图中标注了两个比较重要的接口，<code>BeanFactoryAware</code>和<code>BeanPostProcessor</code>。在bean的生命周期中会对这两个接口中的方法进行调用，如果对这流程不清楚的话可以看下我这片文章<a href="../9483b875">Spring学习-bean的生命周期</a>。在<code>AsyncAnnotationBeanPostProcessor</code>中对<code>BeanFactoryAware#setBeanFactory()</code>方法进行了实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void setBeanFactory(BeanFactory beanFactory) &#123;</span><br><span class="line">	super.setBeanFactory(beanFactory);</span><br><span class="line">	AsyncAnnotationAdvisor advisor &#x3D; new AsyncAnnotationAdvisor(this.executor, this.exceptionHandler);</span><br><span class="line">	if (this.asyncAnnotationType !&#x3D; null) &#123;</span><br><span class="line">		advisor.setAsyncAnnotationType(this.asyncAnnotationType);</span><br><span class="line">	&#125;</span><br><span class="line">	advisor.setBeanFactory(beanFactory);</span><br><span class="line">	this.advisor &#x3D; advisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法中注册了一个<code>AsyncAnnotationAdvisor</code>，在调用被代理的方法时获取拦截器链的时候会用到该Advisor。<br>通过以上分析我们大概了解了当使用了<code>@EnableAsync</code>之后Spring主要做了两件事情：</p>
<ul>
<li>注册了<code>AsyncAnnotationBeanPostProcessor</code></li>
<li>注册了<code>AsyncAnnotationAdvisor</code></li>
</ul>
<h2 id="代理类的生成"><a href="#代理类的生成" class="headerlink" title="代理类的生成"></a>代理类的生成</h2><p>通过前面的文章你可能已经知道了，代理类的生成是在<code>BeanPostProcessor#postProcessorBeforeInitialization（）</code>中，所以我们直接在<code>AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization()</code>方法中打上断点，然后进入debug模式。<img src="/posts/c2c8cd86/3.png"><br><code>AsyncAnnotationBeanPostProcessor</code>的父类<code>AbstractAdvisingBeanPostProcessor</code>对<code>postProcessAfterInitialization</code>方法进行了实现，我们在该方法内打上断点，然后运行至断点处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(Object bean, String beanName) &#123;</span><br><span class="line">	&#x2F;&#x2F;如果不存在Advisor或者该bean是AopInfrastructureBean类型那么不生成代理类</span><br><span class="line">	if (this.advisor &#x3D;&#x3D; null || bean instanceof AopInfrastructureBean) &#123;</span><br><span class="line">		&#x2F;&#x2F; Ignore AOP infrastructure such as scoped proxies.</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;如果该bean是Advised类型的也不生成代理类</span><br><span class="line">	if (bean instanceof Advised) &#123;</span><br><span class="line">		Advised advised &#x3D; (Advised) bean;</span><br><span class="line">			if (!advised.isFrozen() &amp;&amp; isEligible(AopUtils.getTargetClass(bean))) &#123;</span><br><span class="line">			&#x2F;&#x2F; Add our local Advisor to the existing proxy&#39;s Advisor chain...</span><br><span class="line">			if (this.beforeExistingAdvisors) &#123;</span><br><span class="line">				advised.addAdvisor(0, this.advisor);</span><br><span class="line">			&#125;</span><br><span class="line">		else &#123;	</span><br><span class="line">			advised.addAdvisor(this.advisor);</span><br><span class="line">			&#125;</span><br><span class="line">			return bean;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	if (isEligible(bean, beanName)) &#123;</span><br><span class="line">		ProxyFactory proxyFactory &#x3D; prepareProxyFactory(bean, beanName);</span><br><span class="line">		if (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">			evaluateProxyInterfaces(bean.getClass(), proxyFactory);</span><br><span class="line">		&#125;</span><br><span class="line">		proxyFactory.addAdvisor(this.advisor);</span><br><span class="line">		customizeProxyFactory(proxyFactory);</span><br><span class="line">		return proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; No proxy needed.</span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中先是做了一下校验，如果advisor为空或者该bean是AopInfrastructureBean类型的类那么则不去生成代理类。然后又判断了该bean是否是Advised类型，如果是那么也不去生成代理类。然后又判断了当前bean是否合适，在当前情况下其实就是去判断bean中是否有@Async注解。<img src="/posts/c2c8cd86/4.png"><br>之后就是创建代理工厂，将当前的Advisor添加到工厂中，然后通过工厂创建代理对象。这样Spring就完成了代理类的生成了。</p>
<h2 id="异步方法的调用"><a href="#异步方法的调用" class="headerlink" title="异步方法的调用"></a>异步方法的调用</h2><p>我们在下面这行代码上打上断点。<img src="/posts/c2c8cd86/6.png"><br>然后F7进入此方法中。在前面的文章中我们已经讲过了，在执行代理方法的时候会去获取拦截器链。在前面已经对此过程讲解过了，所以这里我们只关注拦截器链中的内容。<img src="/posts/c2c8cd86/7.png"><br>可以看到当前拦截器链中就一个拦截器，拦截器的类型为<code>AnnotationAsyncExecutionInterceptor</code>。我们看下该类的结构图<img src="/posts/c2c8cd86/8.png"><br>通过前面的文章我们知道了，在调用拦截器链的时候，会去调用<code>MethodInterceptor#invoke()</code>方法，<code>AnnotationAsyncExecutionInterceptor</code>在其父类<code>AsyncExecutinInterceptor</code>中对invoke方法进行了实现。我们看下该方法内容的定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object invoke(final MethodInvocation invocation) throws Throwable &#123;</span><br><span class="line">	Class&lt;?&gt; targetClass &#x3D; (invocation.getThis() !&#x3D; null ? AopUtils.getTargetClass(invocation.getThis()) : null);</span><br><span class="line">	Method specificMethod &#x3D; ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass);</span><br><span class="line">	final Method userDeclaredMethod &#x3D; BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class="line"></span><br><span class="line">	AsyncTaskExecutor executor &#x3D; determineAsyncExecutor(userDeclaredMethod);(1)</span><br><span class="line">	if (executor &#x3D;&#x3D; null) &#123;</span><br><span class="line">		throw new IllegalStateException(</span><br><span class="line">				&quot;No executor specified and no default executor set on AsyncExecutionInterceptor either&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Callable&lt;Object&gt; task &#x3D; () -&gt; &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			Object result &#x3D; invocation.proceed();</span><br><span class="line">			if (result instanceof Future) &#123;</span><br><span class="line">				return ((Future&lt;?&gt;) result).get();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		catch (ExecutionException ex) &#123;</span><br><span class="line">			handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Throwable ex) &#123;</span><br><span class="line">			handleError(ex, userDeclaredMethod, invocation.getArguments());</span><br><span class="line">		&#125;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;;(2)</span><br><span class="line">	return doSubmit(task, executor, invocation.getMethod().getReturnType());(2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中主要做了如下事情：</p>
<ul>
<li>获取异步任务执行器</li>
<li>创建任务</li>
<li>提交任务</li>
</ul>
<h3 id="获取异步执行器"><a href="#获取异步执行器" class="headerlink" title="获取异步执行器"></a>获取异步执行器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected AsyncTaskExecutor determineAsyncExecutor(Method method) &#123;</span><br><span class="line">	AsyncTaskExecutor executor &#x3D; this.executors.get(method);</span><br><span class="line">	if (executor &#x3D;&#x3D; null) &#123;</span><br><span class="line">		Executor targetExecutor;</span><br><span class="line">		String qualifier &#x3D; getExecutorQualifier(method);</span><br><span class="line">		&#x2F;&#x2F;如果用户定义了Executor则使用用户自定义的，用户没有定义则使用默认的Executor</span><br><span class="line">		if (StringUtils.hasLength(qualifier)) &#123;</span><br><span class="line">			targetExecutor &#x3D; findQualifiedExecutor(this.beanFactory, qualifier);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			targetExecutor &#x3D; this.defaultExecutor.get();</span><br><span class="line">		&#125;</span><br><span class="line">		if (targetExecutor &#x3D;&#x3D; null) &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">		executor &#x3D; (targetExecutor instanceof AsyncListenableTaskExecutor ?</span><br><span class="line">				(AsyncListenableTaskExecutor) targetExecutor : new TaskExecutorAdapter(targetExecutor));</span><br><span class="line">		this.executors.put(method, executor);</span><br><span class="line">	&#125;</span><br><span class="line">	return executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里其实就是去判断了用户是否定义的异步执行器，如果用户定义了就使用用户定义的异步执行器去，没有定义则使用默认的。</p>
<h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Callable&lt;Object&gt; task &#x3D; () -&gt; &#123;</span><br><span class="line">	try &#123;</span><br><span class="line">		Object result &#x3D; invocation.proceed();</span><br><span class="line">		if (result instanceof Future) &#123;</span><br><span class="line">			return ((Future&lt;?&gt;) result).get();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (ExecutionException ex) &#123;</span><br><span class="line">		handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Throwable ex) &#123;</span><br><span class="line">		handleError(ex, userDeclaredMethod, invocation.getArguments());</span><br><span class="line">	&#125;</span><br><span class="line">	return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object doSubmit(Callable&lt;Object&gt; task, AsyncTaskExecutor executor, Class&lt;?&gt; returnType) &#123;</span><br><span class="line">	if (CompletableFuture.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">		return CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				return task.call();</span><br><span class="line">			&#125;</span><br><span class="line">			catch (Throwable ex) &#123;</span><br><span class="line">				throw new CompletionException(ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, executor);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (ListenableFuture.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">		return ((AsyncListenableTaskExecutor) executor).submitListenable(task);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (Future.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">		return executor.submit(task);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		executor.submit(task);</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提交任务的时候主要是根据返回值的类型来提交任务到线程池中。</p>
<h2 id="异步方法的异常处理"><a href="#异步方法的异常处理" class="headerlink" title="异步方法的异常处理"></a>异步方法的异常处理</h2><p>从上面的方法中可以看到当产生了异常之后，会调用handleError方法来处理异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void handleError(Throwable ex, Method method, Object... params) throws Exception &#123;</span><br><span class="line">	&#x2F;&#x2F;返回值类型为Future</span><br><span class="line">	if (Future.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">		ReflectionUtils.rethrowException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;返回值类型为非Future</span><br><span class="line">	else &#123;</span><br><span class="line">		&#x2F;&#x2F; Could not transmit the exception to the caller with default executor</span><br><span class="line">		try &#123;</span><br><span class="line">			this.exceptionHandler.obtain().handleUncaughtException(ex, method, params);</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Throwable ex2) &#123;</span><br><span class="line">			logger.warn(&quot;Exception handler for async method &#39;&quot; + method.toGenericString() +</span><br><span class="line">					&quot;&#39; threw unexpected exception itself&quot;, ex2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在该方法内首先对方法进行判断，判断方法的返回值是否是Future类型，如果是Future类型的话，则重新抛出异常。如果是非Future类型，会先去获取异步异常处理器。<img src="/posts/c2c8cd86/9.png"><br>可以看到该异常处理器的类型为<code>AsyncUncaughtExceptionHandler</code>，也就是如果我们需要去处理这些异常的话只需要定义一个bean并去实现该接口就行了。然后当异常产生之后，Spirng就会去调用handleUncaughtException方法来通知程序通知产生了异常。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Spring中方法的异步调用是通过代理实现的，在使用<code>@EnableAsync</code>注解之后，会注册<code>AsyncAnnotationBeanPostProcessor</code>到容器中，当加载该BeanPostProcessor时会初始化对应的Advisor（执行BeanFactoryAware）。在调用被代理方法（异步方法）时会创建一个Callable对象并将MethodInvocation传入，然后提交该异步任务。在发生异常时会根据返回值的类型是否为Future来处理，如果是Future类型则重新抛出异常。如果不是Future类型，则通过<code>AsyncUncaughtExceptionHandler</code>来通知程序。</p>
]]></content>
      <tags>
        <tag>Spring、动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>java代理-JDK动态代理</title>
    <url>/posts/8eeb963a/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在本篇文章中将带你搞明白如下几个问题：</p>
<ul>
<li>什么是代理模式？</li>
<li>代理模式的应用场景有哪些？</li>
<li>java为什么支持动态代理？</li>
<li>JDK动态代理是如何实现？</li>
</ul>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>定义：代理模式给某一个对象提供一个代理对象，并由代理对象控制着对原对象的引用。通俗的来说代理起着中介的作用，通常代理模式的结构图如下图所示。<img src="/posts/8eeb963a/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84.png"></p>
<h2 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h2><p>接口：也就是抽象角色，通过接口或抽象类声明真实角色实现的业务方法。<br>代理类：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑来实现抽象方法，并可以附加自己的操作。<br>委托类：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</p>
<h2 id="为什么要使用代理模式？"><a href="#为什么要使用代理模式？" class="headerlink" title="为什么要使用代理模式？"></a>为什么要使用代理模式？</h2><ul>
<li>职责清晰，真实的角色就只是实现实际的业务逻辑，不用关心其它非本职责的事情，通过后期代理完成其它事情。</li>
<li>代理对象可以在客户端和目标对象之间起到中介的作用，起到保护目标对象的作用。</li>
<li>高扩展性。</li>
</ul>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p><strong>代理对象和真正的对象实现同一个接口</strong>，先访问代理类再访问真正要访问的对象。</p>
<h2 id="代理模式类别"><a href="#代理模式类别" class="headerlink" title="代理模式类别"></a>代理模式类别</h2><p>代理模式按照代理创建的时期的话分为静态代理和动态代理。</p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是由程序员创建或工具生成代理类源码，再编译代理类。在程序运行之前就已经存在代理类的字节码文件了，代理类和委托类的关系在运行前就确定了。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是在实现阶段不用关心代理类，而在运行阶段才指定真正的代理对象。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>Java注解对象获取、日志、用户鉴权、Spring AOP、事务处理等等。</p>
<h1 id="java为什么支持动态代理"><a href="#java为什么支持动态代理" class="headerlink" title="java为什么支持动态代理"></a>java为什么支持动态代理</h1><p>Java虚拟机加载类可分为五个阶段：加载、验证、准备、解析、初始化，其中加载阶段主要完成一下三件事情：</p>
<ul>
<li>通过一个类的全限定名类获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区运行时数据结构。</li>
<li>在内存中生成一个代表此类的Class对象。</li>
</ul>
<p>在虚拟机规范中并没有以上三点的具体实现要求，可以由虚拟机灵活实现，关于加载此类的二进制字节流就有很多途径：</p>
<ul>
<li>从ZIP包获取。</li>
<li>从网络中获取。</li>
<li>运行时生成，这种场景的代表就有动态代理技术。</li>
</ul>
<h1 id="JDK的动态代理是如何实现的"><a href="#JDK的动态代理是如何实现的" class="headerlink" title="JDK的动态代理是如何实现的"></a>JDK的动态代理是如何实现的</h1><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    void sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="委托类"><a href="#委托类" class="headerlink" title="委托类"></a>委托类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public MyInvocationHandler(Object target) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.target &#x3D; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;-----before invoke-----&quot;);</span><br><span class="line">        Object result &#x3D; method.invoke(target, args);</span><br><span class="line">        System.out.println(&quot;-----after invoke-----&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取代理对象</span><br><span class="line">    public Object getProxy()&#123;</span><br><span class="line">        return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;保存生成的代理类</span><br><span class="line">        System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br><span class="line">        UserService userService &#x3D; new UserServiceImpl();</span><br><span class="line">        MyInvocationHandler invocationHandler &#x3D; new MyInvocationHandler(userService);</span><br><span class="line">        UserService proxy &#x3D; (UserService) invocationHandler.getProxy();</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InvocationHandler和Proxy"><a href="#InvocationHandler和Proxy" class="headerlink" title="InvocationHandler和Proxy"></a>InvocationHandler和Proxy</h2><p>JDK动态代理中有一个非常重要的接口是InvocationHandler以及用于创建代理对象的Proxy类。</p>
<h3 id="InvocationHandler-1"><a href="#InvocationHandler-1" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h3><p>从源码中该类的描述我们可以知道，每一个代理示例都有一个相关联的调用处理器（handler）。当在一个方法在代理实例中被调用时，该方法调用被编码并分配给与该代理实例相关联的这个调用处理器方法。<br><img src="/posts/8eeb963a/1.png"><br>简单来说就是当调用代理类中的方法时，该方法调用会被分派给InvocationHandler中的invoke方法中去。</p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>在该类中有几个比较重要的方法：</p>
<ul>
<li>getInvocationHandler：用于获取指定代理对象所关联的调用处理器。</li>
<li>getProxyClass：返回指定接口的代理类。</li>
<li>newProxyInstance：构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的invoke方法。</li>
<li>isProxyClass：判断该Class对应的类是否时一个代理类。<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="代理类生成"><a href="#代理类生成" class="headerlink" title="代理类生成"></a>代理类生成</h3>我们进入<code>newProxyInstance</code>方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static Object newProxyInstance(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                          InvocationHandler h)</span><br><span class="line">        throws IllegalArgumentException</span><br><span class="line">    &#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;克隆委托类的所有接口</span><br><span class="line">    final Class&lt;?&gt;[] intfs &#x3D; interfaces.clone();</span><br><span class="line">    final SecurityManager sm &#x3D; System.getSecurityManager();</span><br><span class="line">    if (sm !&#x3D; null) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * Look up or generate the designated proxy class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">	&#x2F;&#x2F;查找或生成指定的代理类</span><br><span class="line">    Class&lt;?&gt; cl &#x3D; getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     * Invoke its constructor with the designated invocation handler.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (sm !&#x3D; null) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取代理类的构造器</span><br><span class="line">        final Constructor&lt;?&gt; cons &#x3D; cl.getConstructor(constructorParams);</span><br><span class="line">        final InvocationHandler ih &#x3D; h;</span><br><span class="line">        if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                public Void run() &#123;</span><br><span class="line">                    cons.setAccessible(true);</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">		&#x2F;&#x2F;通过反射创建实例</span><br><span class="line">        return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class="line">    &#125; catch (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        throw new InternalError(e.toString(), e);</span><br><span class="line">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t &#x3D; e.getCause();</span><br><span class="line">        if (t instanceof RuntimeException) &#123;</span><br><span class="line">            throw (RuntimeException) t;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">        throw new InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在该方法中主要做了以下事情：</li>
<li>克隆委托类的所有接口，前面提到过：代理类和委托类实现同一个接口。</li>
<li>生成代理类的Class对象，也就是类加载的加载过程。</li>
<li>根据Class对象获取代理类的构造器，构造器的参数类型为InvocationHandler。</li>
<li>通过反射创建代理对象。</li>
</ul>
<p>那么生成的代理对象到底是什么样的呢？在main方法中添加如下代码保存生成的代理对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>
<p>生成的代理对象如下（省略了toString等方法）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class $Proxy0 extends Proxy implements UserService &#123;</span><br><span class="line">    private static Method m1;</span><br><span class="line">    private static Method m3;</span><br><span class="line">    private static Method m2;</span><br><span class="line">    private static Method m0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将代理类和InvocationHandler关联起来</span><br><span class="line">    public $Proxy0(InvocationHandler var1) throws  &#123;</span><br><span class="line">        super(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public final void sayHello() throws  &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            super.h.invoke(this, m3, (Object[])null);</span><br><span class="line">        &#125; catch (RuntimeException | Error var2) &#123;</span><br><span class="line">            throw var2;</span><br><span class="line">        &#125; catch (Throwable var3) &#123;</span><br><span class="line">            throw new UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            m1 &#x3D; Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, Class.forName(&quot;java.lang.Object&quot;));</span><br><span class="line">            m3 &#x3D; Class.forName(&quot;com.pcy.proxytest.UserService&quot;).getMethod(&quot;sayHello&quot;);</span><br><span class="line">            m2 &#x3D; Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;);</span><br><span class="line">            m0 &#x3D; Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;);</span><br><span class="line">        &#125; catch (NoSuchMethodException var2) &#123;</span><br><span class="line">            throw new NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; catch (ClassNotFoundException var3) &#123;</span><br><span class="line">            throw new NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的代理类继承自Proxy类以及实现了UserService接口，这里也验证了代理类和委托类实现相同的接口。通过源码可以知道当调用<code>cons.newInstance(new Object[]&#123;h&#125;)</code>时会执行上面生成的代理类的构造函数，在该方法中又去调用了父类的构造函数，跳转到父类的构造方法中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Proxy(InvocationHandler h) &#123;</span><br><span class="line">     Objects.requireNonNull(h);</span><br><span class="line">     this.h &#x3D; h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中就做了一件事：将将代理类与传入的InvocationHandler关联起来。</p>
<h3 id="调用代理方法"><a href="#调用代理方法" class="headerlink" title="调用代理方法"></a>调用代理方法</h3><p>调用的过程就比较简单了，当调用代理方法<code>sayHello</code>时，会去调用父类方法中的<code>InvocationHandler#invoke()</code>方法即参数传入的InvocationHandler。</p>
]]></content>
      <tags>
        <tag>aop原理</tag>
        <tag>proxy</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-bean的生命周期</title>
    <url>/posts/9483b875/</url>
    <content><![CDATA[<h1 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h1><p><img src="/posts/9483b875/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="bean生命周期"><br>上图展示了bean的生命周期。在本文中，我们将追根溯源，寻找生命周期的各个过程中在源码中到底在哪实现的。</p>
<h1 id="所用示例代码"><a href="#所用示例代码" class="headerlink" title="所用示例代码"></a>所用示例代码</h1><hr>
<h2 id="需要注入的bean"><a href="#需要注入的bean" class="headerlink" title="需要注入的bean"></a>需要注入的bean</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBean implements BeanNameAware, BeanClassLoaderAware, BeanFactoryAware, EnvironmentAware,</span><br><span class="line">        EmbeddedValueResolverAware, ApplicationContextAware, InitializingBean, DisposableBean &#123;</span><br><span class="line">    public MyBean() &#123;</span><br><span class="line">        System.out.println(&quot;实例化bean对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBeanName(String name) &#123;</span><br><span class="line">        System.out.println(&quot;执行了BeanNameAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBeanClassLoader(ClassLoader classLoader) &#123;</span><br><span class="line">        System.out.println(&quot;执行了BeanClassLoaderAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBeanFactory(BeanFactory beanFactory) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;执行了BeanFactoryAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;执行了ApplicationContextAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setEmbeddedValueResolver(StringValueResolver resolver) &#123;</span><br><span class="line">        System.out.println(&quot;执行了EmbeddedValueResolverAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setEnvironment(Environment environment) &#123;</span><br><span class="line">        System.out.println(&quot;执行了EnvironmentAware接口&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        System.out.println(&quot;设置对象属性&quot;);</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void initMethod() &#123;</span><br><span class="line">        System.out.println(&quot;执行自定义init-method方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void destroyMethod() &#123;</span><br><span class="line">		System.out.println(&quot;执行destroy方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">		System.out.println(&quot;调用了afterPropertiesSet&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Disposable.destroy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义的BeanPostProcessor"><a href="#自定义的BeanPostProcessor" class="headerlink" title="自定义的BeanPostProcessor"></a>自定义的BeanPostProcessor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBeanPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;BeanPostProcessor前置处理&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;BeanPostProcessor后置处理&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">    http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;myBean&quot; class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyBean&quot; init-method&#x3D;&quot;initMethod&quot;</span><br><span class="line">          destroy-method&#x3D;&quot;destroyMethod&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;悦哥哥&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;pcy.InstantiationAwareBeanPostProcessor.MyBeanPostProcessor&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例化bean对象</span><br><span class="line">设置对象属性</span><br><span class="line">执行了BeanNameAware接口</span><br><span class="line">执行了BeanClassLoaderAware接口</span><br><span class="line">执行了BeanFactoryAware接口</span><br><span class="line">执行了EnvironmentAware接口</span><br><span class="line">执行了EmbeddedValueResolverAware接口</span><br><span class="line">执行了ApplicationContextAware接口</span><br><span class="line">BeanPostProcessor前置处理</span><br><span class="line">调用了afterPropertiesSet</span><br><span class="line">执行自定义init-method方法</span><br><span class="line">BeanPostProcessor后置处理</span><br><span class="line">使用bean</span><br><span class="line">Disposable.destroy</span><br><span class="line">执行destroy方法</span><br></pre></td></tr></table></figure>
<hr>
<p>上面的运行结果也进一步验证了上面图片中的bean生命周期。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="实例化bean对象"><a href="#实例化bean对象" class="headerlink" title="实例化bean对象"></a>实例化bean对象</h2><p>从前面的文章我们可以得知，bean开始初始化的方法是<code>AbstractBeanFactory#doGetBean()</code>，我们在该方法内打上断点。<img src="/posts/9483b875/1.PNG" alt="doGetBean"><br>从这里就正式开始了，getSingleton(name)的作用是从beanFactory中尝试去获取目标bean对象，我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">	&#x2F;&#x2F; Quick check for existing instance without full singleton lock</span><br><span class="line">	Object singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">	if (singletonObject &#x3D;&#x3D; null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">		singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">		if (singletonObject &#x3D;&#x3D; null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">			synchronized (this.singletonObjects) &#123;</span><br><span class="line">				&#x2F;&#x2F; Consistent creation of early reference within full singleton lock</span><br><span class="line">				singletonObject &#x3D; this.singletonObjects.get(beanName);</span><br><span class="line">				if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">					singletonObject &#x3D; this.earlySingletonObjects.get(beanName);</span><br><span class="line">					if (singletonObject &#x3D;&#x3D; null) &#123;</span><br><span class="line">						ObjectFactory&lt;?&gt; singletonFactory &#x3D; this.singletonFactories.get(beanName);</span><br><span class="line">						if (singletonFactory !&#x3D; null) &#123;</span><br><span class="line">							singletonObject &#x3D; singletonFactory.getObject();</span><br><span class="line">							this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">							this.singletonFactories.remove(beanName);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个方法的逻辑也很简单，首先从单例池中获取”myBean”所对应的bean对象，获取的结果肯定是null的，isSingletonCurrentlyInCreation方法是用来判断当前单例是否在创建中，该值肯定也是空的，因为此时bean对象还并未实例化。通过调试来看上面的推理也确实是正确的。<img src="/posts/9483b875/2.PNG" alt="getSingleton"><br>所以说该方法返回的结果是null，beanFactory会先去创建该bean对象，我们一路跟踪到下面这行代码<img src="/posts/9483b875/3.PNG" alt="getSingleton">，此方法的第二个参数传入的是一个lamda表达是（匿名内部类）。将该形式改成这样就明白了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sharedInstance &#x3D; getSingleton(beanName, new ObjectFactory() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public MyBean getObject() throws BeansException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return createBean (beanName, mbd, args);(1)</span><br><span class="line">            &#125; catch (BeansException ex) &#123;</span><br><span class="line">                &#x2F;&#x2F; Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">                &#x2F;&#x2F; eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">                &#x2F;&#x2F; Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">                destroySingleton(beanName);</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p> 我们进入<strong>getSingleton</strong>方法<br> <img src="/posts/9483b875/4.PNG" alt="准备创建bean">当我们点击单步执行，会发现其实调用的就是上面代码（1）处的方法，我们进入此方法，直接找到<strong>doCreateBean</strong>方法（ps:spring中真正的逻辑处理的方法基本都是以do开头的）。也就是下面这行代码<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object beanInstance &#x3D; doCreateBean(beanName, mbdToUse, args);</span><br></pre></td></tr></table></figure><br> 我们按F7进入此方法<img src="/posts/9483b875/5.PNG" alt="创建对象">发现最后有调用了下面这个方法<img src="/posts/9483b875/6.PNG"><br> F7进入此方法发现最终进入的是下面这个方法<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beanInstance &#x3D; getInstantiationStrategy().instantiate(mbd, beanName, this);</span><br></pre></td></tr></table></figure><br> 我们再进入==instantiate==方法发现有调用了一个工具类来创建bean对象<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BeanUtils.instantiateClass(constructorToUse);</span><br></pre></td></tr></table></figure><br> 接着F7，终于看到创建实例的代码了。。。可以看到这里是通过反射来创建bean对象的。<br> <img src="/posts/9483b875/7.PNG" alt="利用反射创建对象"><br> 到此<strong>实例化bean对象</strong>这部分我们就搞清楚了。</p>
<h2 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h2><p> 我们debug接着往下走，当bean对象实例化完成之后，类中的属性值肯定是空的，我们可以通过调试来验证我们的推断。<img src="/posts/9483b875/8.PNG"><br> 那么，bean中的属性是在哪里被填充的呢？再<strong>oCreateBean</strong>方法中你会发现如下一行代码<img src="/posts/9483b875/9.PNG"><br> populate，意思是填充。猜这里应该是属性值填充的地方，我们按F9（step over），再看调试面板中的bean的属性值，会发现此时属性已经有值了。<img src="/posts/9483b875/10.PNG"><br> 这里也验证了bean中的属性值是在这里被填充的。</p>
<h2 id="检查Aware相关接口并设置相关依赖"><a href="#检查Aware相关接口并设置相关依赖" class="headerlink" title="检查Aware相关接口并设置相关依赖"></a>检查Aware相关接口并设置相关依赖</h2><p>我们接着往下走进入<strong>initializeBean</strong>方法，在该方法中发现了下面一行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">invokeAwareMethods(beanName, bean);</span><br></pre></td></tr></table></figure>
<p>通过该方法名就能推断处是调用相关Aware方法的，我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void invokeAwareMethods(String beanName, Object bean) &#123;</span><br><span class="line">	if (bean instanceof Aware) &#123;</span><br><span class="line">		if (bean instanceof BeanNameAware) &#123;</span><br><span class="line">			((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof BeanClassLoaderAware) &#123;</span><br><span class="line">			ClassLoader bcl &#x3D; getBeanClassLoader();</span><br><span class="line">			if (bcl !&#x3D; null) &#123;</span><br><span class="line">				((BeanClassLoaderAware) bean).setBeanClassLoader(bcl);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof BeanFactoryAware) &#123;</span><br><span class="line">			((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该方法中我们确实发现了调用<code>BeanNameAwaare</code>、<code>BeanClassLoaderAware</code>、<code>BeanFactoryAware</code>接口所实现的方法。跳出该方法，查看控制台输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例化bean对象</span><br><span class="line">设置对象属性</span><br><span class="line">执行了BeanNameAware接口</span><br><span class="line">执行了BeanClassLoaderAware接口</span><br><span class="line">执行了BeanFactoryAware接口</span><br></pre></td></tr></table></figure>
<p>细心的你可能发现了这个问题：这里只调用了<code>BeanNameAware</code>，<code>BeanClassLoaderAware</code>，<code>BeanFactoryAware</code>，剩下三个<code>EnvironmentAware</code>，<code>EmbeddedValueResolverAware</code>，<code>ApplicationContextAware</code>在哪里调用的呢？不着急，我们接着往下走，发现执行了下面这行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wrappedBean &#x3D; applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br></pre></td></tr></table></figure>
<p>我们进入==applyBeanPostProcessorsBeforeInitialization==方法<img src="/posts/9483b875/11.PNG">spring在这里调用了BeanPostProcessor的前置处理方法，第一个<code>BeanPostProcessor</code>是<code>ApplicationContextAwareProcessor</code>我们debug进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    &#x2F;&#x2F;如果不是下列类型的类直接返回</span><br><span class="line">	if (!(bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||</span><br><span class="line">			bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||</span><br><span class="line">			bean instanceof MessageSourceAware || bean instanceof ApplicationContextAware ||</span><br><span class="line">			bean instanceof ApplicationStartupAware)) &#123;</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br><span class="line">	AccessControlContext acc &#x3D; null;</span><br><span class="line"></span><br><span class="line">	if (System.getSecurityManager() !&#x3D; null) &#123;</span><br><span class="line">		acc &#x3D; this.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if (acc !&#x3D; null) &#123;</span><br><span class="line">		AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">			invokeAwareInterfaces(bean);</span><br><span class="line">			return null;</span><br><span class="line">		&#125;, acc);</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">	    &#x2F;&#x2F;之后调用Aware的相关方法</span><br><span class="line">		invokeAwareInterfaces(bean);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里我们发现了剩下的三个Aware是在这里调用的，其实Spring在<strong>prepareBeanFactory</strong>方法中就为我们添加了该BeanPostProcessor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">        &#x2F;&#x2F; Tell the internal bean factory to use the context&#39;s class loader etc.</span><br><span class="line">        beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">        beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">        beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 添加ApplicationContextAware的处理器</span><br><span class="line">        beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class="line">        beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line">                ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>到这里检查Aware相关接口并设置相关依赖也就清楚了。</p>
<h2 id="BeanPostProcessor前置处理"><a href="#BeanPostProcessor前置处理" class="headerlink" title="BeanPostProcessor前置处理"></a>BeanPostProcessor前置处理</h2><p>对BeanPostProcessor前置处理调用的就是如下方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)</span><br><span class="line">		throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">	Object result &#x3D; existingBean;</span><br><span class="line">	for (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">		Object current &#x3D; processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">		if (current &#x3D;&#x3D; null) &#123;</span><br><span class="line">			return result;</span><br><span class="line">		&#125;</span><br><span class="line">		result &#x3D; current;</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法的逻辑也是非常清楚的：取出beanFactory中的所有BeanPostProcessor，然后循环去调用前置处理方法。</p>
<h2 id="检查是否是InitializingBean以决定是否调用afterPropertiesSet方法"><a href="#检查是否是InitializingBean以决定是否调用afterPropertiesSet方法" class="headerlink" title="检查是否是InitializingBean以决定是否调用afterPropertiesSet方法"></a>检查是否是InitializingBean以决定是否调用afterPropertiesSet方法</h2><p>我们接着往下执行发现进入的是如下方法<img src="/posts/9483b875/12.PNG"><br>进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeInitMethods(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span><br><span class="line">		throws Throwable &#123;</span><br><span class="line">	&#x2F;&#x2F;判断是否实现了InitializingBean接口</span><br><span class="line">	boolean isInitializingBean &#x3D; (bean instanceof InitializingBean);(1)</span><br><span class="line">	if (isInitializingBean &amp;&amp; (mbd &#x3D;&#x3D; null || !mbd.isExternallyManagedInitMethod(&quot;afterPropertiesSet&quot;))) &#123;</span><br><span class="line">		if (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(&quot;Invoking afterPropertiesSet() on bean with name &#39;&quot; + beanName + &quot;&#39;&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;调用afterPropertiesSet方法</span><br><span class="line">		if (System.getSecurityManager() !&#x3D; null) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">					((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">					return null;</span><br><span class="line">				&#125;, getAccessControlContext());</span><br><span class="line">			&#125;</span><br><span class="line">			catch (PrivilegedActionException pae) &#123;</span><br><span class="line">				throw pae.getException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			((InitializingBean) bean).afterPropertiesSet();(2)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法的逻辑也是很清楚的，在(1)处判断了此bean是否实现了InitializingBean接口，如果实现了此接口则调用<strong>afterPropertiesSet</strong>方法，在(2)处打上断点，进入此方法，发现调用的确实是<code>MyBean#afterPropertiesSet()</code>方法，执行完此方法之后，控制台也新增了一条输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用了afterPropertiesSet</span><br></pre></td></tr></table></figure>
<h2 id="检查是否配置有自定义的init-method"><a href="#检查是否配置有自定义的init-method" class="headerlink" title="检查是否配置有自定义的init-method"></a>检查是否配置有自定义的init-method</h2><p>还是看上面的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeInitMethods(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span><br><span class="line">		throws Throwable &#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	if (mbd !&#x3D; null &amp;&amp; bean.getClass() !&#x3D; NullBean.class) &#123;</span><br><span class="line">		String initMethodName &#x3D; mbd.getInitMethodName();</span><br><span class="line">		if (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class="line">				!(isInitializingBean &amp;&amp; &quot;afterPropertiesSet&quot;.equals(initMethodName)) &amp;&amp;</span><br><span class="line">				!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">            &#x2F;&#x2F;调用初始化方法    </span><br><span class="line">			invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>invokeCustomInitMethod</strong>根据名称就能大致推断是调用初始化方法，我们在此打上断点进入此方法（省略了一些代码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void invokeCustomInitMethod(String beanName, Object bean, RootBeanDefinition mbd)</span><br><span class="line">			throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">	String initMethodName &#x3D; mbd.getInitMethodName();</span><br><span class="line">	Assert.state(initMethodName !&#x3D; null, &quot;No init method set&quot;);</span><br><span class="line">	Method initMethod &#x3D; (mbd.isNonPublicAccessAllowed() ?</span><br><span class="line">	    BeanUtils.findMethod(bean.getClass(), initMethodName) :</span><br><span class="line">	    ClassUtils.getMethodIfAvailable(bean.getClass(), initMethodName));(1)</span><br><span class="line">	...</span><br><span class="line">	Method methodToInvoke &#x3D; ClassUtils.getInterfaceMethodIfPossible(initMethod);</span><br><span class="line"></span><br><span class="line">	if (System.getSecurityManager() !&#x3D; null) &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			ReflectionUtils.makeAccessible(methodToInvoke);</span><br><span class="line">			&#x2F;&#x2F;通过反射直接调用初始化方法</span><br><span class="line">			methodToInvoke.invoke(bean);(2)</span><br><span class="line">		&#125;</span><br><span class="line">		catch (InvocationTargetException ex) &#123;</span><br><span class="line">			throw ex.getTargetException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面的主要逻辑是在(1)处通过Class对象来获取初始化Method，在(2)处进行调用。我们在(2)处打上断点，进入此方法，发现也就是我们自定义的初始化方法。<img src="/posts/9483b875/13.PNG"><br>之后跳出此方法查看控制台，确实也打印了预期的内容。<img src="/posts/9483b875/14.PNG"></p>
<h2 id="BeanPostProcessor后置处理"><a href="#BeanPostProcessor后置处理" class="headerlink" title="BeanPostProcessor后置处理"></a>BeanPostProcessor后置处理</h2><p>我们接在<strong>initializeBean</strong>方法中往下看，发现了如下方法<strong>applyBeanPostProcessorsAfterInitialization</strong>，根据名字就能推断处BeanPostProcessor的后置处理方法就是在此处调用的。我们1在该行代码打上断点，进入此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)</span><br><span class="line">		throws BeansException &#123;</span><br><span class="line">	Object result &#x3D; existingBean;</span><br><span class="line">	for (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">		Object current &#x3D; processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">		if (current &#x3D;&#x3D; null) &#123;</span><br><span class="line">			return result;</span><br><span class="line">		&#125;</span><br><span class="line">		result &#x3D; current;</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面就是获取了所有的BeanPostProcessor，然后循环调用器后置处理方法。至此，bean的初始化流程也就完成了。</p>
<h2 id="注册DisposableBean"><a href="#注册DisposableBean" class="headerlink" title="注册DisposableBean"></a>注册DisposableBean</h2><p>我们继续往下debug，在<strong>oCreateBean</strong>方法中发现了如下一行代码<img src="/posts/9483b875/15.PNG"><br>就跟名字就能推断出是跟bean销毁相关的逻辑，我们进入此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class="line">	AccessControlContext acc &#x3D; (System.getSecurityManager() !&#x3D; null ? getAccessControlContext() : null);</span><br><span class="line">	if (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;(1)</span><br><span class="line">		if (mbd.isSingleton()) &#123;</span><br><span class="line">			&#x2F;&#x2F; Register a DisposableBean implementation that performs all destruction</span><br><span class="line">			&#x2F;&#x2F; work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class="line">			&#x2F;&#x2F; DisposableBean interface, custom destroy method.</span><br><span class="line">			registerDisposableBean(beanName, new DisposableBeanAdapter(</span><br><span class="line">					bean, beanName, mbd, getBeanPostProcessorCache().destructionAware, acc));(2)</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			&#x2F;&#x2F; A bean with a custom scope...</span><br><span class="line">			Scope scope &#x3D; this.scopes.get(mbd.getScope());</span><br><span class="line">			if (scope &#x3D;&#x3D; null) &#123;</span><br><span class="line">				throw new IllegalStateException(&quot;No Scope registered for scope name &#39;&quot; + mbd.getScope() + &quot;&#39;&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			scope.registerDestructionCallback(beanName, new DisposableBeanAdapter(</span><br><span class="line">					bean, beanName, mbd, getBeanPostProcessorCache().destructionAware, acc));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在(1)处的if语句里有一个<strong>requireDestruction</strong>方法，此方法就是判断bean中是否有销毁方法。(2)的作用就是将该bean添加到disposableBeans中，后面调用销毁方法的时候执行销毁方法。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Bean生命周期</tag>
        <tag>Bean加载</tag>
      </tags>
  </entry>
</search>
